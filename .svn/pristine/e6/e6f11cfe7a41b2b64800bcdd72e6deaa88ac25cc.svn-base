<?php /**
    * @brief Model Class yang terkait dengan Sub Bisnis Proses UP
    * pada Bisnis Proses Belanja
    *
    * Class Model ini untuk mengelola proses uang persediaan (UP)
    * yang merupakan bagian dari Bisnis Proses Belanja
    *
    * @author Putu Ari Arjana
    *
    */
	class MUnit extends CI_Model {
	   
    public function __construct()
    {
        parent::__construct();
        $this->table_name = 'tb_daftar';
    }
     /**
    * Fungsi untuk menampilkan list output kegiatan berdasarkan kode_subunit
    * @param kode_subunit is integer, kode dari subunit                                                    ju
    * @return sekumpulan objek output
    */    
    function getOutputList($kode_subunit)
        {
            
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->order_by('kdoutput','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Output-';
                $result[$row->kdoutput]= ("$row->kdoutput - $row->nmoutput");
            }
            
            return $result;
        }
    /**
    * Fungsi untuk menampilkan list subunit berdasarkan id_unit
    * @param id_unit is integer, id dari unit  
    * @return array data subunit
    */  
    function getUnitList($id_unit)
         {
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_unit',$id_unit);    
            $result = $this->db->get();  
            return $result->result_array();
        }
    function getUnitListawe($id_unit)
         {
             $w = $this->db->query("select * from m_subunit where id_unit=$id_unit");
             return $w->result(); 
        }
    /**
    * Fungsi untuk menampilkan list subunit berdasarkan id_unit
    * @param id_unit is integer, id dari unit  
    * @return array data subunit
    */  
    function getSubUnitList($id_unit)
         {
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_unit',$id_unit);    
            $result = $this->db->get();  
            return $result();
        }
    /**
    * Fungsi untuk menampilkan list subunit berdasarkan id_unit
    * @param id_unit is integer, id dari unit  
    * @return array data subunit
    */  
    function detailgetSubUnitList($id_subunit)
         {
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_subunit',$id_subunit);    
            $result = $this->db->get();  
            return $result;
        }
    /**
    * Fungsi untuk menampilkan list unit 
    * @return array data unit
    */  
    function semua_unit()
         {     
            $this->db->select('*');
            $this->db->from('m_unit_pengisi');
            $this->db->group_by('group_unit');  
            $result = $this->db->get();  
            return $result->result_array();
        }
    /**
    * Fungsi untuk menampilkan list kode_subunit berdasarkan kode_unit
    * @param kode_unit is integer, kode dari unit 
    * @return sekumpulan objek subunit
    */
    function daftar_unit2($kode_unit)
         {
            $this->db->select('m_unit_pengisi.kode_unit');
            $this->db->from('m_unit_pengisi');
            $this->db->where('kode_unit',$kode_unit); 
            $this->db->or_where('kode_uplevel',$kode_unit);
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan list komponen berdasarkan kdoutput dan kode subunit   
    * @return sekumpulan objek data komponen
    */
    function getKomponenList()
        {
            $kdoutput = $this->input->post('kdoutput');
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput);  
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Komponen-';
                $result[$row->kdkomponen]= ("$row->kdkomponen - $row->nmkomponen");
            }
            
            return $result; 
        
    }
	/**
	* Fungsi untuk mendapatkan data sub komponen
	* @return list of object
	*/	
	 function getSubKomponenList($kdoutput,$kdkomponen)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
			$this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen IS NOT NULL');
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
			
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Sub Komponen-';
                $result[$row->kdskomponen]= ("$row->kdskomponen - $row->nmskomponen");
            }
            
            return $result; 
        } 
	/**
	* Fungsi untuk menghitung data sub komponen
	* @return list of object
	*/	
	 function getCountSubKomponen($kdoutput,$kdkomponen)
			{
				$kode_subunit = $this->session->userdata('kode_subunit');
				$this->db->select('*');
				$this->db->from('t_rkakl');
				$this->db->where('kode_unit',$kode_subunit); 
				$this->db->where('kdoutput',$kdoutput); 
				$this->db->where('kdkomponen',$kdkomponen);
				$this->db->where('kdskomponen IS NOT NULL'); 
				$this->db->order_by('nmkomponen','ASC');
				return $this->db->count_all_results();
				
			} 
	/**
    /**
    * Fungsi untuk menampilkan list akun berdasarkan kdoutput, kdkomponen,kode_subunit   
    * @return sekumpulan objek data akun
    */   
    function getAkunList()
        {
            $kdoutput = $this->input->post('kdoutput');
            $kdkomponen = $this->input->post('kdkomponen');
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->order_by('kdakun','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Akun-';
                $result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
            }
            
            return $result;
        }
	/**
	* Fungsi untuk mendapatkan data akun
	* @return list of object
	*/	        
		function getAkunList_test()
		   {
			   	$kdoutput = $this->input->post('kdoutput');
           		$kdkomponen = $this->input->post('kdkomponen');
				$kdskomponen = $this->input->post('kdskomponen');
				$kode_subunit = $this->session->userdata('kode_subunit');
				$result = array();
				$this->db->select('*');
				$this->db->from('t_rkakl');
				$this->db->where('kode_unit',$kode_subunit);  
				$this->db->where('kdoutput',$kdoutput);
				$this->db->where('kdkomponen',$kdkomponen);
				$this->db->where('kdskomponen',$kdskomponen);
				$this->db->order_by('kdakun','ASC');
				$array_keys_values = $this->db->get();
				foreach ($array_keys_values->result() as $row)
				{
					$result[0]= '-Pilih Akun-';
					$result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
				}
				
				return $result;
			}
    /**
    * Fungsi untuk menampilkan list header berdasarkan kode_unit berdasarkan kdakun, kdkomponen,kdoutput
    * @param kdakun is integer, kode dari akun belanja
    * @param kdkomponen is integer, kode dari komponen belanja 
    * @param kdoutput is integer, kode dari output belanja    
    * @return sekumpulan objek data header
    */
    function getHeaderList($kdakun,$kdkomponen,$kdskomponen,$kdoutput)
        {
            
            $kode_subunit = $this->session->userdata('kode_subunit');
            $id_akun = $this->input->post('id_akun');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen',$kdskomponen);
            $this->db->where('kdakun',$kdakun); 
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            
            { 
                $result[0]= '-Pilih Header-';
                $result[$row->id_header]= ("$row->hdr");
            }
            
            return $result;
        }
	function getHeaderList_val($kdakun,$kdkomponen,$kdoutput)
        {
            
            $kode_subunit = $this->session->userdata('kode_subunit');
            $id_akun = $this->input->post('id_akun');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen IS NULL');
            $this->db->where('kdakun',$kdakun); 
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            
            { 
                $result[0]= '-Pilih Header-';
                $result[$row->id_header]= ("$row->hdr");
            }
            
            return $result;
        }
     /**
    * Fungsi untuk menampilkan uraian yang belum terkirim ke unit  berdasarkan id_subunit,kdoutput,kdkomponen,kdakun,hdr
    * @param id_subunit is integer, merupakan id dari subunit belanja   
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja  
    * @return integer
    */   
    function jum_uraian($id_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr)
        {
            
            $this->db->select('*'); 
            $this->db->from("t_uraian");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);
            $this->db->where('flag_cek',0);
            $this->db->where('id_jenisbelanja',1);
            $result = $this->db->get();
            return $result->num_rows() ;  
        }
    /**
    * Fungsi untuk menampilkan uraian yang sudah terkirim ke unit  berdasarkan id_subunit,kdoutput,kdkomponen,kdakun,hdr
    * @param id_subunit is integer, merupakan id dari subunit belanja   
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja  
    * @return integer
    */  
    function jum_uraian2($id_subunit,$kdoutput,$kdkomponen,$kdskomponen,$kdakun,$hdr)
        {
            
            $this->db->select('*'); 
            $this->db->from("t_uraian");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen',$kdskomponen);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);
            $this->db->where('flag_cek',1);
            $this->db->where('id_jenisbelanja',1);
            $result = $this->db->get();
            return $result->num_rows() ;  
        }
	 function jum_uraian2_val($id_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr)
        {
            
            $this->db->select('*'); 
            $this->db->from("t_uraian");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);
            $this->db->where('flag_cek',1);
            $this->db->where('id_jenisbelanja',1);
            $result = $this->db->get();
            return $result->num_rows() ;  
        }
    /**
    * Fungsi untuk menampilkan uraian jenis belanja UP berdasarkan id_subunit,kdoutput,kdkomponen,kdakun,hdr
    * @param id_subunit is integer, merupakan id dari subunit belanja   
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja  
    * @return sekumpulan objek data uraian belanja
    */  
    function get_id_uraian($id_subunit,$kdkomponen,$subkomponen,$kdoutput,$kdakun,$hdr)
        {
            
            $this->db->select('*'); 
            $this->db->from("t_uraian");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('kdkomponen',$kdkomponen);
			if($subkomponen!='')
			{$this->db->where('kdskomponen',$subkomponen);}
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('flag_cek',0);
            $this->db->where('id_jenisbelanja',1);
            $result = $this->db->get();
            return $result;  
        }
	
	 function get_id_uraian_val($id_subunit,$kdkomponen,$kdoutput,$kdakun,$hdr)
        {
            
            $this->db->select('*'); 
            $this->db->from("t_uraian");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('flag_cek',0);
            $this->db->where('id_jenisbelanja',1);
            $result = $this->db->get();
            return $result;  
        }
    /**
    * Fungsi untuk menampilkan uraian berdasarkan kode unit dan id header  
    * @return sekumpulan objek data uraian belanja
    */
    function tampil_uraian()
        {  
           
           $id_header = $this->input->post("id_header");
           $kode_unit = $this->session->userdata('kode_unit');
           $result = array();
           $this->db->select('*');
           $this->db->from('t_uraian');   
           $this->db->where('kode_unit',$kode_unit);
           $this->db->where('id_header',$id_header);  
           $query = $this->db->get();   
           return $query;
        } 
    /**
    * Fungsi untuk menampilkan output berdasarkan id_output 
    * @return sekumpulan objek data output
    */  
    function tampil_output()
        {  
           $id_output = $this->input->post('id_output'); 
           $result = array();
           $this->db->select('*');
           $this->db->from('m_output');   
           $this->db->where('id_output',$id_output);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan komponen berdasarkan id_komponen 
    * @return sekumpulan objek data komponen
    */  
    function tampil_komponen()
        {  
           $id_komponen = $this->input->post('id_komponen'); 
           $result = array();
           $this->db->select('*');
           $this->db->from('m_komponen');   
           $this->db->where('id_komponen',$id_komponen);
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk menampilkan akun berdasarkan id_akun 
    * @return sekumpulan objek data akun
    */ 
    function tampil_akun()
        {  
           $id_akun = $this->input->post('id_akun'); 
           $result = array();
           $this->db->select('*');
           $this->db->from('m_akun');
           $this->db->join("m_akunper",'m_akun.id_akunper=m_akunper.id_akunper','inner');   
           $this->db->where('id_akun',$id_akun);
           $query = $this->db->get(); 
           return $query;
        } 
    /**
    * Fungsi untuk menampilkan akun berdasarkan id_header 
    * @return sekumpulan objek data header
    */ 
    function tampil_header()
        {  
           $id_heder = $this->input->post('id_header'); 
           $result = array();
           $this->db->select('*');
           $this->db->from('m_header');    
           $this->db->where('id_header',$id_heder);
           $query = $this->db->get(); 
           return $query;
        } 
    /**
    * Fungsi untuk menampilkan jumlah uraian berdasarkan id header
    * @return sekumpulan objek data uraian
    */ 
    function tampil_jumlah()
        {  
           $id_header = $this->input->post('id_header');    
           $result = array();
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian');   
           $this->db->where('id_header',$id_header); 
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk mengetahui ada tidaknya data dwh berdasarkan id unit, th
    * @param id_unit is integer, merupakan id dari unit  
    * @param th is integer, merupakan tahun dari data dwh      
    * @return integer
    */ 
     function ambil_dwh($id_unit,$th)                                                     
        {  
           $this->db->select('*');
           $this->db->from('m_dwh');   
           $this->db->where('th',$th); 
           $this->db->where('id_unit',$id_unit); 
           $query = $this->db->get(); 
           return $query->num_rows();  
        }
     /**
    * Fungsi untuk menampilkan data dwh berdasarkan id unit, th
    * @param id_unit is integer, merupakan id dari unit  
    * @param th is integer, merupakan tahun dari data dwh     
    * @return sekumpulan objek data dwh
    */ 
      function ambil_data_dwh($id_unit,$th)
        {  
           $this->db->select('*');
           $this->db->from('m_dwh');   
           $this->db->where('th',$th); 
           $this->db->where('id_unit',$id_unit); 
           $query = $this->db->get(); 
           return $query;  
        }
      /**
    * Fungsi untuk mengupdate data dwh berdasarkan id_unit , th
    * @param total is char, merupakan jumlah total UP yang diajukan unit 
    * @param id_unit is integer, merupakan id dari unit  
    * @param th is integer, merupakan tahun dari data dwh     
    */              
      function update_dwh($total,$id_unit,$th){
         $tgl_skrg = date("Y-m-d");     
         $this->db->set('jum_up_diajukan',$total); 
         $this->db->set('tgl_pengajuan',$tgl_skrg); 
         $this->db->where('id_unit',$id_unit);
         $this->db->where('th',$th);
         $this->db->update('m_dwh');
      }
      /**
    * Fungsi untuk mengupdate data dwh berdasarkan id_unit , th
    * @param total is char, merupakan jumlah total UP yang dibayarkan 
    * @param id_unit is integer, merupakan id dari unit  
    * @param th is integer, merupakan tahun dari data dwh      
    */ 
      function update_dwh_dibayar($total,$id_unit,$th){
         $tgl_skrg = date("Y-m-d");     
         $this->db->set('jum_up_dibayar',$total); 
         $this->db->set('tgl_dibayar',$tgl_skrg); 
         $this->db->where('id_unit',$id_unit);
         $this->db->where('th',$th);
         $this->db->update('m_dwh');
      }
      /**
    * Fungsi untuk menyimpan data dwh berdasarkan id_unit , th
    * @param total is char, merupakan jumlah total UP yang dibayarkan 
    * @param id_unit is integer, merupakan id dari unit  
    * @param th is integer, merupakan tahun dari data dwh      
    */ 
      function masuk_dwh($total,$id_unit,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $nama_unit = $this->session->userdata('nama_unit');
            $w = $this->db->query("insert into m_dwh(th,id_unit,nama_unit,id_pusat,nama_pusat,jum_up_dibayar,tgl_dibayar) values('$th','$id_unit','$nama_unit','1','unud','$total','$tgl_skrg')");
            }
    /**
    * Fungsi untuk mengetahui apakah ada uraian atau tidak berdasarkan id_akun dan id_unit
    * @param id_akun is integer, merupakan id dari akun 
    * @param id_unit is integer, merupakan id dari unit 
    * @return q boolean true jika query berhasil
    */    
    function cek_uraian($id_akun,$id_unit)
        {   
            $this->db->from('t_uraian');
            $this->db->where('id_akun',$id_akun);  
            $this->db->where('id_unit',$id_unit);     
            $this->db->where('flag_cek',0);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {       
                return false;
            }
            else    
            {     
                return true;
            }
        }
    /**
    * Fungsi untuk mengetahui ada transaksi atau tidak berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit    
    * @return result boolean true jika query berhasil
    */ 
    function cek_ada_list_up($id_subunit)
        {          
            $th= date("y");
            $this->db->from("t_rekap");    
            $this->db->join("m_status_rekap",'m_status_rekap.id_status_rekap=t_rekap.id_status_rekap','inner');
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_rekap.th_rekap',$th);         
            $this->db->where('t_transaksi.flag_kirim',1);
            $this->db->group_by('t_transaksi.id_rekap');  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {              
                return false;
            }
            else    
            {   
                return true;
            }
        }
    /**
    * Fungsi untuk mengetahui ada transaksi yang direvisi atau tidak berdasarkan id rekap, th_rekap
    * @param id_rekap is integer, merupakan id dari rekap  
    * @param th_rekap is integer, merupakan tahun dari rekap     
    * @return result boolean true jika query berhasil
    */ 
    function cek_ada_revisi($id_rekap,$th_rekap)
        {                     
            $this->db->from('t_transaksi');
            $this->db->join("t_rekap",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->where('t_rekap.id_rekap',$id_rekap);  
            $this->db->where('t_rekap.th_rekap',$th_rekap);  
            $this->db->where_not_in('id_status_transaksi', 3);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {                          
                return false;
            }
            else    
            {      
                return true;
            }
        }
    /**
    * Fungsi untuk menampilkan data pagu berdasarkan id_subunit,kdkomponen,kdoutput,kdakun,hdr
    * @param id_subunit is integer, merupakan id dari subunit belanja   
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja    
    * @return sekumpulan objek data pagu
    */    
    function cek_pagu_uraian_up($id_subunit,$kdkomponen,$kdoutput,$kdakun,$hdr)
        {     
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian');   
           $this->db->where('id_subunit',$id_subunit); 
           $this->db->where('kdoutput',$kdoutput); 
           $this->db->where('kdkomponen',$kdkomponen); 
           $this->db->where('kdakun',$kdakun); 
           $this->db->where('hdr',$hdr); 
           $this->db->where('id_jenisbelanja',1); 
           $this->db->where('flag_cek',0); 
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan data satuan   
    * @return sekumpulan objek data satuan
    */ 
    function tampil_satuan()
        {
            $group = $this->db->query("select * from m_lov where kode_app ='1'");
            return $group->result();
        }
    /**
    * Fungsi untuk mengupdate uraian    
    */       
    function cek_adauraian(){
        $cek = $this->input->post('cek');  
        for($i=0;$i<count($_POST['cek']);$i++){
             $this->db->set('flag_cek',1); 
             $this->db->where('id_uraian', $cek[$i]);
             $this->db->update('t_uraian');
        }
    }
     /**
    * Fungsi untuk mengupdate data rekap berdasarkan id_rekap, th_rekap
    * @param id_rekap is integer, merupakan id dari rekap 
    * @param th_rekap is integer, merupakan tahun dari rekap      
    */  
    function update_dokumen($id_rekap,$th_rekap){     
             $this->db->set('status_dokumen','sudah diterima'); 
             $this->db->where('id_rekap', $id_rekap);
             $this->db->where('th_rekap', $th_rekap);
             $this->db->update('t_rekap');
        }
    /**
    * Fungsi untuk mengupdate data spp berdasarkan id_spp, sp
    * @param id_spp is integer, merupakan id dari SPP
    * @param sp is integer, merupakan id dari sifatpembayaran 
    */  
    function update_spp($id_spp,$sp){     
             $this->db->set('id_sifatpembayaran',$sp); 
             $this->db->where('id_spp', $id_spp);
             $this->db->update('t_spp');
        }
     /**
    * Fungsi untuk mengupdate data spm berdasarkan id_spp,th_spm      
    */    
    function update_spm(){      
            $id_spm = $this->input->post('id_spm');    
            $th_spm = $this->input->post('th_spm');    
            $kepada = $this->input->post('kepada'); 
            $npwp = $this->input->post('npwp'); 
            $no_rek = $this->input->post('no_rek'); 
            $bank= $this->input->post('bank'); 
            $uraian = $this->input->post('uraian');     
             $this->db->set('kepada',$kepada); 
             $this->db->set('npwp',$npwp); 
             $this->db->set('nomor_rekening',$no_rek); 
             $this->db->set('bank',$bank); 
             $this->db->set('uraian_spm',$uraian); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
        } 
    /**
    * Fungsi untuk jumlah uraian berdasarkan kode_unit dan id_header 
    * @return objek uraian uraian
    */  
    function tampil_total()
        {
             $id_header = $this->input->post('id_header');
             $kode_unit = $this->session->userdata('kode_unit'); 
             $result = array();
             $this->db->select('sum(jumlah) as jumlah');
             $this->db->from('t_uraian');   
             $this->db->where('kode_unit',$kode_unit);
             $this->db->where('id_header',$id_header);
             $this->db->where('flag_cek',1);  
             $this->db->where('flag_stat',0);  
             $query = $this->db->get(); 
             return $query->row();  
        }
    /**
    * Fungsi untuk menyimpan detail transaksi berdasarkan id uraian 
    */ 
    function insert_detail_uraian($id_uraian)
        {      
            $id=$this->db->insert_id();  
            $q = $this->db->query("insert into tb_det_transaksi(id_transaksi, id_uraian) values ('$id','$id_uraian')");
                     
        } 
        /**
    * Fungsi untuk mengupdate data uraian
    * @param id_uraian is integer    
    */        
    function update_draft_uraian($id_uraian)
        {
            $this->db->set('flag_cek',0);   
            $this->db->where('id_uraian', $id_uraian);
            $this->db->update('t_uraian');
        }
    /**
    * Fungsi untuk menampilkan data uraian berdasarkan kode_unit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_unit is integer, merupakan kode dari unit       
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja      
    * @return sekumpulan objek data uraian
    */       
    function getUraianList($kode_unit,$kdoutput,$kdkomponen,$kdakun,$hdr)
        { 
            $this->db->select('*');
            $this->db->from('t_uraian');  
            $this->db->where('kode_unit',$kode_unit);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen); 
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data rkakl berdasarkan kode_subunit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_subunit is integer, merupakan kode dari subunit  
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja    
    * @return sekumpulan objek data rkakl
    */
    function getnamaList($kode_subunit,$kdoutput,$kdkomponen,$kdskomponen,$kdakun,$hdr)
        { 
            $this->db->select('*');
            $this->db->from('t_rkakl');                             
            $this->db->where('kode_unit',$kode_subunit);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen',$kdskomponen);  
            $this->db->where('kdakun',$kdakun);
            $this->db->where('id_header',$hdr);
            $result = $this->db->get();
            return $result;
        }
	function getnamaList_val($kode_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr)
        { 
            $this->db->select('*');
            $this->db->from('t_rkakl');                             
            $this->db->where('kode_unit',$kode_subunit);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen); 
            $this->db->where('kdakun',$kdakun);
            $this->db->where('id_header',$hdr);
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data rkakl berdasarkan kode_subunit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_subunit is integer, merupakan kode dari subunit  
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja    
    * @return integer
    */
    function jumlah_uraian($kdkomponen,$kdoutput,$kdakun,$hdr) {
        {
            $kode_unit = $this->session->userdata('kode_unit'); 
            $header = $this->input->post('id_header');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_uraian');  
            $this->db->where('kode_unit',$kode_unit);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);
            $this->db->where('flag_cek',0);
            $this->db->order_by('uraian','ASC');
            $result = $this->db->get();
            return $result->num_rows(); 
        }
      
      }
    /**
    * Fungsi untuk menampilkan data rkakl berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit      
    * @return sekumpulan objek data transaksi UP
    */
    function daftar_up($id_subunit)
        {   
            
            $this->db->select("*"); 
            $this->db->from("t_usulan"); 
            $this->db->join("t_uraian",'t_uraian.id_usulan=t_usulan.id_usulan','inner'); 
            $this->db->join("m_subunit",'t_usulan.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_usulan.id_subunit',$id_subunit);
            $this->db->where('t_usulan.flag_kirim',0);
            $this->db->group_by('t_usulan.id_usulan');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data rkakl berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit   
    * @return sekumpulan objek data transaksi UP
    */
    function edit_rincian_up($id_transaksi,$th_transaksi)
        {   
            
            $this->db->select("*"); 
            $this->db->from("t_transaksi"); 
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner'); 
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_transaksi',$id_transaksi);
            $this->db->where('t_transaksi.th_transaksi',$th_transaksi);
            $this->db->group_by('t_transaksi.id_transaksi');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan uraian yg telah diajukan berdasarkan id_subunit, id_rekap, th_rekap
    * @param id_subunit is integer, merupakan id dari subunit   
    * @param id_rekap is integer, merupakan id dari rekap   
    * @param th_rekap is integer, merupakan tahun dari rekap   
    * @return array data uraian
    */
    function print_daftar_up($id_subunit,$id_rekap,$th_rekap)
        {   
            $qf=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun, t_uraian.nmakun, sum(jumlah) as jumlah from t_uraian join ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM t_rekap,t_transaksi,t_uraian,m_subunit WHERE `t_rekap`.`id_rekap`=`t_transaksi`.`id_rekap` AND `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` AND `t_rekap`.`id_subunit`=`m_subunit`.`id_subunit` AND `t_rekap`.`id_subunit` = '$id_subunit' AND `t_rekap`.`th_rekap` = '$th_rekap' AND `t_rekap`.`id_rekap` = '$id_rekap'  GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun where id_subunit='$id_subunit' AND `t_uraian`.`id_jenisbelanja` = '1'  group by t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun;");
            return $qf->result_array();
        }
    function detail_rincian_pusat2($id_rekap,$th_rekap)
        {   
            $qf=$this->db->query("select t_uraian.kdoutput,t_uraian.nmoutput, t_uraian.kdkomponen,t_uraian.nmkomponen, t_uraian.kdakun, t_uraian.nmakun,t_uraian.nmheader, sum(jumlah) as jumlah from t_rekap, t_transaksi, t_uraian, m_subunit WHERE `t_rekap`.`id_rekap`=`t_transaksi`.`id_rekap` AND `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` AND `t_rekap`.`id_subunit`=`m_subunit`.`id_subunit` AND `t_rekap`.`th_rekap` = '$th_rekap' AND `t_rekap`.`id_rekap` = '$id_rekap' group by t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,t_uraian.hdr;");
            return $qf;
        }
    /**
    * Fungsi untuk menampilkan data uraian yg telah diajukan berdasarkan kode_unit
    * @param kode_unit is integer, merupakan kode dari unit   
    * @return array data uraian
    */
    function jut_rekap_up($kode_unit)
        {   
            
            $qf=$this->db->query("select sum(jumlah) as jumlah from t_uraian join (SELECT * FROM t_transaksi where id_jenis_belanja='1') as apa on t_uraian.id_transaksi=apa.id_transaksi join 
            (SELECT kode_unit from m_unit_pengisi where (kode_uplevel='$kode_unit' OR kode_unit='$kode_unit')) as total_unit on t_uraian.kode_unit=total_unit.kode_unit;");
            return $qf->result_array();
        }
    /**
    * Fungsi untuk menampilkan uraian yg telah diajukan berdasarkan id_unit
    * @param id_unit is integer, merupakan id dari unit   
    * @return array data uraian
    */
    function print_rekap_up($id_unit)
        {   
            
            $qf=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun, t_uraian.nmakun, sum(jumlah) as jumlah from t_uraian join ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_transaksi`) INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` Where id_jenis_belanja = 1 and id_status_transaksi =8 GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit group by t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun;");
            return $qf->result_array();
        }
    /**
    * Fungsi untuk menampilkan uraian UP yg belum diajukan ke unit berdasarkan id_subunit, id_rekap, th_rekap
    * @param id_subunit is integer, merupakan id dari subunit     
    * @return sekumpulan objek data uraian
    */
    function daftar_up2($id_subunit)
        {   
            
            $this->db->select("t_transaksi.id_transaksi, t_transaksi.th_transaksi"); 
            $this->db->from("t_transaksi"); 
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner'); 
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit);
            $this->db->where('t_transaksi.id_jenis_belanja',1);
            $this->db->where('t_transaksi.flag_kirim',0);
            $this->db->group_by('t_transaksi.id_transaksi');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data rekap berdasarkan id_rekap, th_rekap
    * @param id_rekap is integer, merupakan id dari rekap   
    * @param th_rekap is integer, merupakan tahun dari rekap   
    * @return sekumpulan objek data rekap
    */
     function get_id_transaksi($id_rekap,$th_rekap)
        {  
            $this->db->select("t_transaksi.id_transaksi,t_transaksi.th_transaksi"); 
            $this->db->from("t_rekap");   
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->where('t_rekap.id_rekap',$id_rekap); 
            $this->db->where('t_rekap.th_rekap',$th_rekap); 
            $result = $this->db->get();
            return $result;  
        }
     /**
    * Fungsi untuk menampilkan data rekap berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit  
    * @return sekumpulan objek data rekap
    */
    function daftar_up_veri($id_subunit)
        {     
            $q=$this->db->query("SELECT m_status_transaksi.status_transaksi, t_rekap.id_rekap,t_rekap.th_rekap,t_transaksi.id_transaksi, t_transaksi.th_transaksi,t_transaksi.id_status_transaksi,t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen, t_uraian.nmkomponen,t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader,m_subunit.id_subunit, m_subunit.nama_subunit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi,t_rekap,m_subunit,m_status_transaksi WHERE t_transaksi.id_status_transaksi=m_status_transaksi.id_status_transaksi and t_rekap.id_subunit=m_subunit.id_subunit and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_rekap=t_rekap.id_rekap and t_rekap.id_subunit ='$id_subunit' and t_transaksi.id_jenis_belanja = '1' group by t_transaksi.id_transaksi;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan data transaksi UP berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit  
    * @return sekumpulan objek data transaksi
    */
    function daftar_up_veri3($id_subunit)
        {     
            $q=$this->db->query("SELECT m_status_transaksi.status_transaksi, t_transaksi.id_transaksi,t_transaksi.id_subunit, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen, t_uraian.nmkomponen,t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader, sum(jumlah) as jumlah FROM t_uraian, t_transaksi, m_status_transaksi WHERE t_transaksi.id_status_transaksi=m_status_transaksi.id_status_transaksi and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_subunit ='$id_subunit' and t_transaksi.id_jenis_belanja='1' group by t_transaksi.id_transaksi;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan data transaksi UP berdasarkan id_transaksi, th_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_transaksi is integer, merupakan tahun dari transaksi   
    * @return sekumpulan objek data transaksi
    */
    function daftar_up_veri2($id_transaksi,$th_transaksi)
        {  
            $q=$this->db->query("SELECT t_rekap.id_rekap,t_transaksi.th_transaksi,t_transaksi.id_transaksi, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen, t_uraian.nmkomponen,t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader,t_uraian.hdr, m_subunit.id_subunit,m_subunit.nama_subunit,m_subunit.kode_subunit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi,t_rekap,m_subunit WHERE t_rekap.id_subunit=m_subunit.id_subunit and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi ='$id_transaksi'and t_transaksi.th_transaksi ='$th_transaksi' group by t_transaksi.id_transaksi;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan data rekap yang direvisi dari unit berdasarkan kode_unit
    * @param kode_unit is integer, merupakan kode dari unit   
    * @return sekumpulan objek data rekap
    */
    function daftar_up_revisi($kode_unit)
        {   
            
            $this->db->select("*"); 
            $this->db->from("t_rekap"); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner'); 
            $this->db->join("m_unit_pengisi",'t_transaksi.kode_unit=m_unit_pengisi.kode_unit','inner');
            $this->db->where('t_transaksi.kode_unit',$kode_unit);
            $this->db->where('t_rekap.status','revisi');
            $this->db->or_where('t_rekap.status','baru');
            $this->db->where('t_transaksi.flag_kirim',1);
            $this->db->group_by('t_transaksi.id_transaksi');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data rekap yang sudah dikirim ke unit berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit  
    * @return sekumpulan objek data rekap
    */
    function list_up($id_subunit)
        {   
            
            $this->db->select("*"); 
            $this->db->from("t_rekap");    
            $this->db->join("m_status_rekap",'m_status_rekap.id_status_rekap=t_rekap.id_status_rekap','inner');
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit); 
            $this->db->where('t_rekap.id_jenis_belanja',1);   
            $this->db->where('t_transaksi.flag_kirim',1);
            $this->db->group_by('t_transaksi.id_rekap');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data trasaksi UP berdasarkan id_subunit
    * @param kode_unit is integer, merupakan kode dari unit  
    * @return sekumpulan objek data transaksi
    */
    function list_up_dummy($kode_unit)
        {   
            
            $this->db->select("*"); 
            $this->db->from("t_transaksi");  
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
            $this->db->join("m_unit_pengisi",'t_transaksi.kode_unit=m_unit_pengisi.kode_unit','inner');
            $this->db->where('t_transaksi.kode_unit',$kode_unit); 
            $this->db->where('t_transaksi.id_jenis_belanja',1);  
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan mak pada t_transaksi berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit  
    * @return sekumpulan objek data transaksi
    */
    function list_up_mak($id_subunit)
        {    
            $q=$this->db->query("SELECT t_transaksi.id_transaksi,t_transaksi.th_transaksi, t_transaksi.id_rekap,t_uraian.id_uraian, m_status_transaksi.status_transaksi, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen,t_uraian.nmkomponen, t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader, sum(jumlah) as jumlah FROM t_uraian, t_transaksi,m_status_transaksi WHERE m_status_transaksi.id_status_transaksi=t_transaksi.id_status_transaksi and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_subunit ='$id_subunit' and t_transaksi.flag_kirim ='1' and t_transaksi.id_jenis_belanja ='1' group by t_transaksi.id_transaksi;");
            return $q;
        }
    /**
    * Fungsi untuk menghapus data transaksi berdasarkan id_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi     
    */
    function hapus_up($id_transaksi)
        {     
            $this->db->where('id_transaksi',$id_transaksi);
            $this->db->delete('t_transaksi');
        }
    /**
    * Fungsi untuk menghapus detail data transaksi berdasarkan id_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi        
    */
    function hapus_det_transaksi($id_transaksi)
        {     
            $this->db->where('id_transaksi',$id_transaksi);
            $this->db->delete('tb_det_transaksi');
        }
    /**
    * Fungsi untuk menghapus data uraian berdasarkan id_uraian
    * @param id is integer, merupakan id dari uraian              
    */
    function hapus_uraian($id)
        {     
            $this->db->where('id_uraian',$id);       
            $this->db->delete('t_uraian');  
        }
    /**
    * Fungsi untuk mengupdate uraian berdasarkan id_uraian,id_subunit,id
    * @param id_uraian is integer,  merupakan id dari uraian  
    * @param id_subunit is integer, merupakan id dari subunit  
    * @param id is integer                  
    */
     function update_flag_cek($id_uraian,$id_subunit,$id)
        {   
              
             $this->db->set('flag_cek',1); 
             $this->db->set('id_transaksi',$id);  
             $this->db->where('id_subunit',$id_subunit);
             $this->db->where('id_uraian',$id_uraian);
             $this->db->update('t_uraian'); 
        }
     /**
    * Fungsi untuk banyaknya data rekap berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit   
    * @return integer
    */  
    function banyak_up2($id_subunit)
        {
            $this->db->select("*"); 
            $this->db->from("t_rekap"); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');    
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit);
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $result = $this->db->get();
            return $result->num_rows() ; 
        }
    /**
    * Fungsi untuk banyaknya data transaksi berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit   
    * @return integer
    */
    function banyak_up($id_subunit)
        {
            $this->db->select("*"); 
            $this->db->from("t_usulan");         
            $this->db->join("t_uraian",'t_usulan.id_usulan=t_uraian.id_usulan','inner');
            $this->db->where('t_usulan.id_subunit',$id_subunit);
            $this->db->where('t_usulan.flag_kirim',0);
            $result = $this->db->get();
            return $result->num_rows() ; 
        }
    /**
    * Fungsi untuk banyaknya data rekap yang baru berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit  
    * @return integer
    */
    function banyak_up_veri($id_subunit)
        {
            
            $this->db->select("*"); 
            $this->db->from("t_rekap"); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');   
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit);
            $this->db->where('t_rekap.id_status_rekap',1);
            $this->db->where('t_transaksi.flag_kirim',1);
            $result = $this->db->get();
            return $result->num_rows() ; 
        }
    /**
    * Fungsi untuk banyaknya data transaksi berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit    
    * @return integer
    */
    function banyak_up_veri3($id_subunit)
        {
            $this->db->select("*"); 
            $this->db->from("t_transaksi");  
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');   
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_transaksi.id_subunit',$id_subunit); 
            $result = $this->db->get();
            return $result->num_rows() ; 
        }
    /**
    * Fungsi untuk banyaknya data transaksi yang telah dikirim berdasarkan id_subunit, tahun
    * @param id_subunit is integer, merupakan id dari subunit 
    * @param tahun is integer, merupakan tahun dari transaksi    
    * @return integer
    */
    function banyak_up_terkirim($id_subunit,$tahun)
        {
            
            $this->db->select("t_transaksi.flag_kirim"); 
            $this->db->from("t_transaksi");      
            $this->db->where('t_transaksi.id_subunit',$id_subunit);
            $this->db->where('t_transaksi.id_jenis_belanja',1);
            $this->db->where('t_transaksi.flag_kirim',1);
            $this->db->where('t_transaksi.th_transaksi',$tahun);
            $result = $this->db->get();
            return $result->num_rows() ;  
        }
        
    function ada_mp_max($id_subunit)
        {
            $tahun = date('Y'); 
            $this->db->select("*"); 
            $this->db->from("t_max_up");
            $this->db->where('tahun',$tahun);
            $this->db->where('id_subunit',$id_subunit);
            $result = $this->db->get();
            return $result->num_rows() ;  
        }
    function banyak_mp_max($id_subunit)
        {
            $tahun = date('Y'); 
            $this->db->select("nilai_max"); 
            $this->db->from("t_max_up");
            $this->db->where('tahun',$tahun);
            $this->db->where('id_subunit',$id_subunit);
            $result = $this->db->get();
            return $result ;  
        }
    /**
    * Fungsi untuk menampillkan unit berdasarkan subunit   
    * @return sekumpulan objek data unit  
    */
    function daftar_unit()
        {   
            $id_subunit = $this->session->userdata('id_subunit'); 
            $this->db->select("*"); 
            $this->db->from("m_subunit");
            $this->db->join("m_unit",'m_unit.id_unit=m_subunit.id_unit','inner');   
            $this->db->where('id_subunit',$id_subunit);
            $this->db->group_by('m_subunit.id_subunit');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampillkan detail unit berdasarkan id_unit     
    * @return sekumpulan objek data unit  
    */
    function detail_unit()
        {
            $id_unit = $this->session->userdata('id_unit'); 
            $this->db->select("*"); 
            $this->db->from("m_unit"); 
            $this->db->where('m_unit.id_unit',$id_unit);   
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampillkan detail unit berdasarkan kode_unit     
    * @return sekumpulan objek detail unit 
    */
    function nama_fakultas($kode_up)
        {   
            $this->db->select("*"); 
            $this->db->from("m_unit");            
            $this->db->where('m_unit.kode_unit',$kode_up);   
            $result = $this->db->get();
            return $result;
        }
        /**
    * Fungsi untuk menampillkan detail unit berdasarkan kode_unit     
    * @return sekumpulan objek detail unit 
    */
    function detail_subunit($id_subunit)
        {   
            $this->db->select("*"); 
            $this->db->from("m_subunit");            
            $this->db->where('id_subunit',$id_subunit);   
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampillkan data dipa      
    * @return sekumpulan objek data dipa
    */
    function dipa()
        {   
            $this->db->select("*"); 
            $this->db->from("m_dipa");   
            $this->db->where('aktif',1);   
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampillkan data dipa      
    * @return sekumpulan objek data dipa
    */
    function pagu_real($id_subunit)
        {   
            $th = date('Y');
            $this->db->select("pagu_real"); 
            $this->db->from("t_pagu_real");   
            $this->db->where('subunit',$id_subunit);   
            $this->db->where('tahun',$th);   
            $result = $this->db->get();
            return $result;
        }
    function pagu_real_row($id_subunit,$tahun_ajaran)
        {   
            $th = date('Y');
            $this->db->select("*"); 
            $this->db->from("t_pagu_real");   
            $this->db->where('subunit',$id_subunit);   
            $this->db->where('tahun',$tahun_ajaran);   
            $result = $this->db->get();
            return $result->num_rows();
        }
    /**
    * Fungsi untuk menampilkan besarnya pagu berdasarkan kode_unit, tahun_sekarang   
    * @return objek
    */
    function select_pagu() {     
            $kode_unit = $this->session->userdata('kode_unit'); 
            $tahun_sekarang= date("Y");
            $result = array();
            $this->db->select('*');
            $this->db->from('t_pagu');  
            $this->db->where('kdunit',$kode_unit);
            $this->db->where('tahun',$tahun_sekarang); 
            $result = $this->db->get();
            return $result->row();  
      }
    /**
    * Fungsi untuk menampilkan jumlah uraian yang belum dikirim ke unit berdasarkan kode_unit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_unit is integer, merupakan kode dari unit  
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja  
    * @return objek
    */                                                                        
    function cek_jumbel($kode_unit,$kdkomponen,$kdoutput,$kdakun,$hdr)
        {   
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian');   
           $this->db->where('kdoutput',$kdoutput);
           $this->db->where('kdkomponen',$kdkomponen);
           $this->db->where('kdakun',$kdakun);
           $this->db->where('hdr',$hdr);
           $this->db->where('kode_unit',$kode_unit);
           $this->db->where('flag_cek',0);
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk menampilkan jumlah pagu pada rkakl berdasarkan kode_subunit, satuan
    * @param kode_subunit is integer, merupakan kode dari sub_unit    
    * @param satuan is integer, merupakan nama satuan dari barang
    * @return sekumpulan objek rkakl
    */ 
    function total_keg_non_adhoc ($kode_subunit,$satuan) 
        { 
           $this->db->select('sum(jumlah)');
           $this->db->from('t_rkakl');
           $this->db->where('kode_unit',$kode_subunit);
           $this->db->where_in('sat', $satuan);   
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan jumlah pagu berdasarkan kode_subunit, kdakun
    * @param kode_subunit is integer, merupakan kode dari sub_unit   
    * @return sekumpulan objek rkakl
    */ 
    function total_belanja_modal ($kode_subunit) 
        {  
           $kdakun = array('531112', '531111', '572111','532121','572113','536111','533111','532111','512311');  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_rkakl');
           $this->db->where('kode_unit',$kode_subunit);
           $this->db->where_in('kdakun', $kdakun);   
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk menampilkan jumlah pagu berdasarkan kode_subunit
    * @param kode_subunit is integer, merupakan kode dari sub_unit
    * @return sekumpulan objek rkakl
    */ 
    function total_rkakl($kode_subunit)
        {  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_rkakl');
           $this->db->where('kode_unit',$kode_subunit);
           $query = $this->db->get(); 
           return $query;
        } 
    /**
    * Fungsi untuk menampilkan data uraian berdasarkan kode_unit, id_header
    * @param kode_unit is integer, merupakan kode dari unit
    * @return sekumpulan objek uraian
    */ 
    function cari_id($kode_unit,$id_header)
        {  
           $this->db->select('*');
           $this->db->from('t_uraian');
           $this->db->where('kode_unit',$kode_unit);
           $this->db->where('id_header',$id_header);
           $this->db->where('flag_cek',1); 
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk menampilkan jumlah uraian berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari sub_unit
    * @return objek uraian
    */ 
    function total_up($id_subunit)
        {     
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian'); 
           $this->db->join("t_transaksi",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
           $this->db->where('t_transaksi.id_subunit',$id_subunit);  
           $this->db->where('id_jenisbelanja',1);   
           $query = $this->db->get(); 
           return $query;
        }
    function total_up_home($id_subunit)
        {  
            $th = date('y');   
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian'); 
           $this->db->join("t_usulan",'t_usulan.id_usulan=t_uraian.id_usulan','inner');  
           $this->db->where('t_usulan.id_subunit',$id_subunit);  
           $this->db->where('t_usulan.sifat_bayar',1); 
           $this->db->where('YEAR(tgl_usulan)',$th); 
           $this->db->where_not_in('id_status_usulan', 1);  
           $query = $this->db->get(); 
           return $query;
        }
    function total_tup_home($id_subunit)
        {  
            $th = date('y');   
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian'); 
           $this->db->join("t_transaksi",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
           $this->db->where('t_transaksi.id_subunit',$id_subunit);  
           $this->db->where('id_jenisbelanja',2); 
           $this->db->where('th_transaksi',$th); 
           $this->db->where_not_in('id_status_transaksi', 1);  
           $query = $this->db->get(); 
           return $query;
        }
    
    function cari_tot_gu_home($id_subunit) 
        {  
            $th = date('y');        
           $status_kwitansi = array('2','3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(nominal)');
           $this->db->from('t_kwitansi');  
           $this->db->where('t_kwitansi.id_subunit',$id_subunit); 
           $this->db->where('t_kwitansi.th_kwitansi',$th); 
           $this->db->where('t_kwitansi.id_sifatpembayaran',3); 
           $this->db->where_in('id_status_kwitansi', $status_kwitansi);   
           $query = $this->db->get(); 
           return $query;
        }
        
    function cari_tot_ls_home($id_subunit) 
        {  
            $th = date('y');        
           $status_kwitansi = array('2','3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(nominal)');
           $this->db->from('t_kwitansi');  
           $this->db->where('t_kwitansi.id_subunit',$id_subunit); 
           $this->db->where('t_kwitansi.th_kwitansi',$th); 
           $this->db->where('t_kwitansi.id_sifatpembayaran',4); 
           $this->db->where_in('id_status_kwitansi', $status_kwitansi);   
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan data uraian berdasarkan id_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @return sekumpulan objek uraian
    */    
    function select_det_t($id_transaksi)
        {     
           $this->db->select('*');
           $this->db->from('t_uraian');
           $this->db->where('id_transaksi',$id_transaksi);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk mengupdate data uraian berdasarkan kode_unit, id
    * @param kode_unit is integer, merupakan kode dari sub_unit   
    * @param id is integer   
    */     
    function update_flag_cek2($kode_unit,$id)
        {  
             $this->db->set('flag_cek',0); 
             $this->db->where('id_uraian',$id);
             $this->db->where('kode_unit',$kode_unit);
             $this->db->update('t_uraian'); 
        }
    /**
    * Fungsi untuk mengupdate status rekap berdasarkan kode_unit, id
    * @param kode_unit is integer, merupakan kode dari sub_unit   
    * @param id is integer   
    */
    function ubah_status_rekap($kode_unit,$id)
        { 
             $tgl_skrg = date("Y-m-d"); 
             $jam_skrg = date("H:i:s");     
             $this->db->set('status','baru'); 
             $this->db->where('id_rekap',$id);
             $this->db->where('kode_unit',$kode_unit);
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_transaksi, id
    * @param id_transaksi is integer, merupakan id dari transaksi   
    * @param id is integer, merupakan id dari rekap    
    */
    function ubah_status_up($id_transaksi,$id)
        { 
                 
            $this->db->set('id_status_transaksi',2);      
            $this->db->set('flag_kirim',1);      
            $this->db->set('id_rekap',$id);      
            $this->db->where('id_transaksi',$id_transaksi);
            $this->db->update('t_transaksi'); 
        }
    /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_transaksi, th_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi     
    * @param th_transaksi is integer, merupakan tahun dari transaksi    
    */
    function ubah_status_up2($id_transaksi,$th_transaksi)
        { 
                 
            $this->db->set('id_status_transaksi',2);    
            $this->db->where('id_transaksi',$id_transaksi);
            $this->db->where('th_transaksi',$th_transaksi);
            $this->db->update('t_transaksi'); 
        }
    /**
    * Fungsi untuk menampilkan banyaknya rekap UP berdasarkan status transaksi, kode_unit
    * @param kode_unit is integer, merupakan kode dari sub_unit 
    * @return integer
    */ 
    function banyak_kb($kode_unit)
    {
            $this->db->select('*'); 
            $this->db->from("t_rekap"); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');         
            $this->db->where('t_transaksi.id_jenis_belanja',1);
            $this->db->where('t_transaksi.id_status_transaksi',2);      
            $this->db->where('t_transaksi.kode_unit',$kode_unit);
            $this->db->group_by('t_transaksi.id_transaksi'); 
            $result = $this->db->get();
            return $result->num_rows() ;
    }
    /**
    * Fungsi untuk menampilkan banyakanya rekap UP berdasarkan status transaksi, id_subunit, id
    * @param id_subunit is integer, merupakan id dari sub_unit 
    * @param th is integer, merupakan tahun dari transaksi 
    * @return integer
    */
    function banyak_kb2($id_subunit,$th)
    {
            $this->db->select('*'); 
            $this->db->from("t_rekap");     
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');         
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');         
            $this->db->where('t_rekap.id_status_rekap',1);      
            $this->db->where('t_transaksi.id_jenis_belanja',1);      
            $this->db->where('t_transaksi.id_subunit',$id_subunit);
            $this->db->where('t_transaksi.th_transaksi',$th);
            $this->db->group_by('t_transaksi.id_transaksi'); 
            $result = $this->db->get();
            return $result->num_rows() ;
    }
    /**
    * Fungsi untuk menampilkan data subunit berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari sub_unit  
    * @return sekumpulan objek
    */
    function get_nama_unit($id_subunit)
        {    
            $this->db->select('m_subunit.nama_subunit, m_subunit.id_subunit');
            $this->db->from('m_subunit'); 
            $this->db->where('id_subunit', $id_subunit);  
            $result = $this->db->get(); 
            return $result;
        }
    /**
    * Fungsi untuk menampilkan data transaksi berdasarkan id_transaksi
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @return sekumpulan objek
    */
    function daftar_up_subunit($id_transaksi)
        {  
            $q=$this->db->query("SELECT t_transaksi.id_transaksi, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen, t_uraian.nmkomponen,t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader, m_subunit.kode_subunit,m_subunit.id_subunit,m_subunit.nama_subunit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi, m_subunit WHERE t_transaksi.id_subunit=m_subunit.id_subunit and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_transaksi ='$id_transaksi' group by t_transaksi.id_transaksi;");
            return $q;
        }
    /**
    * Fungsi untuk menyimpan data transaksi berdasarkan id_subunit, detail uraian
    * @param id_subunit is integer, merupakan id dari sub_unit  
    * @param detail uraian is array, merupakan array dari data uraian
    */
    function insert_up($id_subunit,$detail_uraian)
        {        
            $id=$this->nomer->id_baru('t_transaksi','transaksi', date('y')); 
            $this->db->set('id_jenis_belanja','1'); 
            $this->db->set('id_subunit',$id_subunit); 
            $this->db->where('id_transaksi', $id['id_transaksi']);
            $this->db->where('th_transaksi', $id['th_transaksi']);
            $this->db->update('t_transaksi');
            foreach($detail_uraian->result_array() as $row){
               $id_uraian = $row['id_uraian'];
               $this->munit->update_flag_cek($id_uraian,$id_subunit,$id['id_transaksi']);
            }        
        }
    /**        
    * Fungsi untuk menyimpan data uraian 
    * @param kode_unit is integer, merupakan kode dari unit  
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja   
    * @param uraian is integer, merupakan uraian belanja 
    * @param volume is integer, merupakan volume belanja 
    * @param satuan is integer, merupakan satuan uraian 
    * @param harga_satuan is integer, merupakan harga satuan uraian  
    * @param jumlah is integer, merupakan jumlah uraian
    * @return sekumpulan objek 
    */
    function insert_uraian($kode_unit,$kdoutput,$kdkomponen,$kdakun,$hdr,$uraian,$volume,$satuan,$harga_satuan,$jumlah)
        {
            
            $p = $this->db->query("insert into t_uraian (kode_unit, kdoutput, kdkomponen, kdakun, hdr, uraian, volume, satuan, harga_satuan, jumlah) values('$kode_unit', '$kdoutput', '$kdkomponen','$kdakun','$hdr','$uraian','$volume','$satuan','$harga_satuan', '$jumlah')");
            return $p;  
        }
    /**
    * Fungsi untuk menyimpan data transaksi 
    * @param kode_unit is integer, merupakan kode dari unit 
    * @param tot_jumbel is integer, merupakan jumlah transaksi 
    * @param id_rekap is integer, merupakan id dari rekap
    * @return sekumpulan objek 
    */
    function insert_up2($kode_unit,$tot_jumbel,$id_rekap)
        {      
            $thn_skrg = date("Y");
            $jam_skrg = date("H:i:s");   
            $p = $this->db->query("insert into t_transaksi(tahun, id_rekap, id_jenis_belanja, kode_unit, jum_transaksi, flag_kirim) values('$thn_skrg','$id_rekap','1','$kode_unit', '$tot_jumbel', '1')");
            return $p;  
        } 
    /**
    * Fungsi untuk menyimpan data rekap
    * @param id_subunit is integer, merupakan id dari subunit 
    * @param daftar_up is array, merupakan array dari data transaksi   
    */    
    function masuk_rekap($id_subunit,$daftar_up)
        {
            $dipa = $this->munit->ambil_level_tertinggi_dipa();
            foreach($dipa->result_array() as $row){
                            $id_dipa = $row['id_dipa'];  
            }
            $kegiatan = $this->munit->ambil_level_tertinggi_kegiatan();
            foreach($kegiatan->result_array() as $row){
                            $id_kegiatan = $row['id_keg'];  
            }
            
            $id=$this->nomer->id_baru('t_rekap','rekap', date('y')); 
            $this->db->set('id_jenis_belanja','1'); 
            $this->db->set('id_kegiatan',$id_kegiatan); 
            $this->db->set('id_jenispembayaran',1); 
            $this->db->set('id_dipa',$id_dipa); 
            $this->db->set('id_subunit',$id_subunit); 
            $this->db->where('id_rekap', $id['id_rekap']);
            $this->db->where('th_rekap', $id['th_rekap']);
            $this->db->update('t_rekap');
            foreach($daftar_up->result_array() as $id_up)
                         { 
                             $id_transaksi  = $id_up ['id_transaksi'];
                             $th_transaksi  = $id_up ['th_transaksi'];
                             $this->munit->ubah_status_up($id_transaksi,$id['id_rekap']);  
                             $this->munit->masuk_waktu_pengajuan($id_transaksi,$th_transaksi);  
                         }
        }
    /**
    * Fungsi untuk mengecek ada tidaknya transaksi berdasarkan id_subunit, th 
    * @param id_subunit is integer, merupakan id dari subunit 
    * @param th is integer, merupakan tahun dari transaksi        
    * @return boolean 
    */
    function cek_ada_transaksi($id_subunit,$th)
        {     
            $this->db->select('*');
            $this->db->from('t_transaksi');     
            $this->db->where('id_subunit',$id_subunit);     
            $this->db->where('th_transaksi',$th);     
            $this->db->where('id_jenis_belanja',1); 
            $this->db->where('id_status_transaksi',1); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {     
                return true;
            }
        }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param $id_transaksi is integer, merupakan id dari transaksi 
    * @param th_transaksi is integer, merupakan tahun dari transaksi 
    */
    function masuk_waktu_pengajuan($id_transaksi,$th_transaksi)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi, th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_transaksi', '$tgl_skrg $jam_skrg','diajukan','1')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th_transaksi is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history 
    */
    function masuk_waktu_setuju_veri_unit($id_transaksi,$level_terkini,$th_transaksi)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi, th_transaksi,tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_transaksi','$tgl_skrg $jam_skrg','setujui verifikator unit','$level_terkini')");
        }
     /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th_transaksi is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history  
    * @param ket is char, merupakan keterangan dari history
    */
    function masuk_waktu_revisi_veri_unit($id_transaksi,$level_terkini,$ket,$th_transaksi)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,komentar,level) values('$id_transaksi','$th_transaksi','$tgl_skrg $jam_skrg','revisi verifikator unit','$ket','$level_terkini')");
            }
     /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th_transaksi is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_kirim_hasil_revisi($id_transaksi,$th_transaksi,$level_terkini)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_transaksi','$tgl_skrg $jam_skrg','kirim hasil revisi','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th_transaksi is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history 
    */
    function masuk_waktu_otorisasi_kaprodi($id_transaksi,$level_terkini,$th_trans)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_trans','$tgl_skrg $jam_skrg','terotorisasi kaprodi','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_dibuatkan_spp($id_transaksi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th','$tgl_skrg $jam_skrg','dibuatkan spp','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_trans is integer, merupakan id dari transaksi
    * @param th is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_otorisasi_ppk($id_trans,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_trans','$th','$tgl_skrg $jam_skrg','terotorisasi ppk','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history       
    */
    function masuk_waktu_dibuatkan_spm($id_transaksi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th','$tgl_skrg $jam_skrg','dibuatkan spm','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param th is integer, merupakan tahun dari transaksi
    * @param level terkini is integer, merupakan level tertinggi pada history 
    */
    function masuk_waktu_otorisasi_dekan($id_transaksi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th','$tgl_skrg $jam_skrg','terotorisasi dekan','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history   
    */
    function masuk_waktu_dicek_petugas_penerima($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','dicek petugas penerima','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_otorisasi_verifikator_pusat($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi verifikator pusat','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history 
    */
    function masuk_waktu_otorisasi_subag_dm($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi kasubag dana masyarakat','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history 
    */
    function masuk_waktu_otorisasi_kabag_keu($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi kabag keuangan','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_dibuatkan_sp2d($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','dibuatkan sp2d','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_dibuatkan_bg($id_transaksi,$level_terkini,$th_sp2d)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_sp2d','$tgl_skrg $jam_skrg','dibuatkan bg','$level_terkini')");
            }
    /**
    * Fungsi untuk menyimpan history transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_spm is integer, merupakan tahun dari transaksi 
    * @param level terkini is integer, merupakan level tertinggi pada history  
    */
    function masuk_waktu_otorisasi_pr2($id_transaksi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_transaksi(id_transaksi,th_transaksi, tanggal_waktu,status_waktu,level) values('$id_transaksi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi pr2','$level_terkini')");
            }
     /**
    * Fungsi untuk menyimpan detail transaksi  
    */
     function insert_detail()
        {      
            $id=$this->db->insert_id();
            $cek = $this->input->post('cek');  
                for($i=0;$i<count($_POST['cek']);$i++){
                    $q = $this->db->query("insert into tb_det_transaksi(id_transaksi, id_uraian) values ('$id',$cek[$i])");
                    }     
        }
     /**
    * Fungsi untuk mengetahui apakah ada uraian atau tidak berdasarkan kode_unit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_unit is integer, merupakan kode dari unit  
    * @param kdkomponen is integer, merupakan kode dari komponen belanja 
    * @param kdoutput is integer, merupakan kode dari output belanja  
    * @param kdakun is integer, merupakan kode dari akun belanja  
    * @param hdr is integer, merupakan kode dari header belanja
    * @return result boolean true jika query berhasil
    */  
     function cek_upmasuk($kode_unit,$kdkomponen,$kdoutput,$kdakun,$hdr)
        {       
            $this->db->select('*');
            $this->db->from("t_transaksi"); 
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('hdr',$hdr);     
            $this->db->where('t_transaksi.kode_unit',$kode_unit);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                return false;
            }
            else    
            {    
                return true;
            }
        }
    /**
    * Fungsi untuk mengupdate status rekap berdasarkan id_rekap,th_rekap  
    * @param id_rekap is integer, merupakan id dari rekap  
    * @param th_rekap is integer, merupakan tahun dari rekap     
    */
   function update_setuju_rekap($id_rekap,$th_rekap)
        {  
             $this->db->set('id_status_rekap',2); 
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_rekap); 
             $this->db->update('t_rekap'); 
        }
   /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_transaksi,th_transaksi  
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_transaksi is integer, merupakan tahun dari transaksi     
    */
   function update_trans($id_transaksi,$th_transaksi)
        {  
             $this->db->set('id_status_transaksi',3); 
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_transaksi); 
             $this->db->update('t_transaksi'); 
        }
   /**
    * Fungsi untuk mengupdate status transaksi berdasarkan ket,id_transaksi,th_transaksi  
    * @param id_transaksi is integer, merupakan id dari transaksi 
    * @param th_transaksi is integer, merupakan tahun dari transaksi     
    * @param ket is char, merupakan keterangan dari transaksi     
    */
   function update_trans2($id_transaksi, $ket,$th_transaksi)
        {  
             $this->db->set('id_status_transaksi',4);
             $this->db->set('keterangan',$ket); 
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_transaksi); 
             $this->db->update('t_transaksi'); 
        }
   /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_trans,th_trans  
    * @param id_trans is integer, merupakan id dari transaksi 
    * @param th_trans is integer, merupakan tahun dari transaksi   
    */
   function update_trans3($id_trans,$th_trans)
        {  
             $this->db->set('id_status_transaksi',5); 
             $this->db->where('id_transaksi',$id_trans); 
             $this->db->where('th_transaksi',$th_trans); 
             $this->db->update('t_transaksi'); 
        }
   /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id transaksi  
    * @param id is integer, merupakan id dari transaksi        
    */
   function update_trans4($id)
        {  
             $this->db->set('status_transaksi','cek verifikator unit'); 
             $this->db->where('id_transaksi',$id); 
             $this->db->update('t_transaksi'); 
        } 
   /**
    * Fungsi untuk mengupdate status rekap berdasarkan id rekap,ket  
    * @param id_rekap is integer, merupakan id dari rekap       
    * @param ket is char, merupakan keterangan dari rekap         
    */
   function update_revisi_rekap($id_rekap,$ket)
        {  
             $this->db->set('status','revisi'); 
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk menampilkan pagu rkakl berdasarkan kode_unit  
    * @param kode_unit is integer, merupakan kode dari unit        
    * @return sekumpulan objek       
    */
   function daftar_pagu($kode_unit)
        {  
           $this->db->select('*');
           $this->db->from('t_rkakl');  
           $this->db->where('t_rkakl.kode_unit',$kode_unit);
           $this->db->group_by('t_rkakl.kdoutput,t_rkakl.kdkomponen,t_rkakl.kdakun');  
           $query = $this->db->get(); 
           return $query;
        }
    function daftar_pagu_subunit($kode_unit)
        {   
            $id_subunit = $this->session->userdata('id_subunit'); 
            $q=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,sum(jumlah) as jumlah from t_uraian join
            ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit`  WHERE id_status_spp='12' and `t_spp`.`id_unit` = '$id_unit' and `t_spp`.`th_spp` = '$th_spp' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) 
            as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit
            group by t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun");
            return $q->result(); 
        } 
        
   /**
    * Fungsi untuk menampilkan level tertnggi dari history berdasarkan id_transaksi,th_transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi       
    * @param th_transaksi is integer, merupakan tahun dari transaksi         
    * @return sekumpulan objek       
    */  
   function ambil_level_tertinggi($id_transaksi,$th_transaksi)
        {  
           $this->db->select_max('level');
           $this->db->from('tb_waktu_transaksi');    
           $this->db->where('id_transaksi',$id_transaksi);  
           $this->db->where('th_transaksi',$th_transaksi);  
           $query = $this->db->get(); 
           return $query;
        }
   /**
    * Fungsi untuk menampilkan dipa yang akan digunakan(aktif)      
    * @return sekumpulan objek                           
    */ 
   function ambil_level_tertinggi_dipa()
        {  
           $this->db->select_max('id_dipa');
           $this->db->from('m_dipa');    
           $this->db->where('aktif',1);  
           $query = $this->db->get(); 
           return $query;
        }
   /**
    * Fungsi untuk menampilkan kegiatan yg aktif berdasarkan   
    * @return sekumpulan objek       
    */ 
   function ambil_level_tertinggi_kegiatan()
        {  
           $this->db->select_max('id_keg');
           $this->db->from('m_kegiatan');    
           $this->db->where('aktif',1);  
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan level tertnggi dari history transaksi berdasarkan id_transaksi,th_transaksi 
    * @param id_transaksi is integer, merupakan id dari transaksi       
    * @param th_transaksi is integer, merupakan tahun dari transaksi        
    * @return sekumpulan objek       
    */ 
   function ambil_level_tertinggi2($id_transaksi,$th_transaksi)
        {  
           $this->db->select_max('level');
           $this->db->from('tb_waktu_transaksi');    
           $this->db->where('id_transaksi',$id_transaksi);  
           $this->db->where('th_transaksi',$th_transaksi);  
           $this->db->where('status_waktu','revisi verifikator unit');  
           $query = $this->db->get(); 
           return $query;
        }
   /**
    * Fungsi untuk mengambil komentar history berdasarkan id_transaksi,th_transaksi,level 
    * @param id_transaksi is integer, merupakan id dari transaksi       
    * @param th_transaksi is integer, merupakan tahun dari transaksi        
    * @param level is integer, merupakan level dari komentar transaksi       
    * @return sekumpulan objek       
    */ 
   function ambil_komentar($id_transaksi,$th_transaksi,$level)
        {  
           $this->db->select('komentar');
           $this->db->from('tb_waktu_transaksi');    
           $this->db->where('level',$level);  
           $this->db->where('id_transaksi',$id_transaksi);  
           $this->db->where('th_transaksi',$th_transaksi);  
           $this->db->where('status_waktu','revisi verifikator unit');  
           $query = $this->db->get(); 
           return $query;
        }
   /**
    * Fungsi untuk mengupdate status rekap berdasarkan id_subunit,id,th_rekap 
    * @param id_subunit is integer, merupakan id dari subunit         
    * @param id is integer, merupakan id dari rekap        
    * @param th_rekap is integer, merupakan tahun dari rekap         
    * @return sekumpulan objek       
    */
    function ubah_otorisasi_kaprodi($id_subunit,$id,$th_rekap)
        {  
             $this->db->set('id_status_rekap',3); 
             $this->db->where('id_subunit',$id_subunit); 
             $this->db->where('id_rekap',$id); 
             $this->db->where('th_rekap',$th_rekap); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk menampilkan rekap transaksi yang sudah di otorisasi kaprodi berdasarkan id_unit 
    * @param id_unit is integer, merupakan id dari unit      
    * @return sekumpulan objek       
    */
    function up_terotorisasi($id_unit)
        {  
            $this->db->select("*"); 
            $this->db->from("t_rekap");
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);  
            $this->db->where('t_rekap.id_status_rekap',3); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->group_by('t_rekap.id_rekap');
            $result = $this->db->get();
            return $result;
        }
    function jum_up_terotorisasi($id_unit)
        {  
            $this->db->select("*"); 
            $this->db->from("t_rekap");
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);  
            $this->db->where('t_rekap.id_status_rekap',3); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->group_by('t_rekap.id_rekap');
            $result = $this->db->get();
            return $result->num_rows();
        }
    /**
    * Fungsi untuk menampilkan rekap yang hardcopy-nya belum diterima oleh unit berdasarkan id_unit,th_rekap
    * @param id_unit is integer, merupakan id dari unit      
    * @param th_rekap is integer, merupakan tahun dari rekap      
    * @return integer       
    */                                                                      
    function cek_dokumen($id_unit,$th_rekap)
        {  
            $this->db->select("*"); 
            $this->db->from("t_rekap");
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);   
            $this->db->where('t_rekap.id_status_rekap',3);   
            $this->db->where('t_rekap.th_rekap',$th_rekap);   
            $this->db->where('t_rekap.status_dokumen','belum diterima'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->group_by('t_rekap.id_rekap');
            $result = $this->db->get();
            return $result->num_rows() ; ;
        }
    /**
    * Fungsi untuk menampilkan rekap yang hardcopy-nya belum diterima oleh unit berdasarkan id_unit,th_rekap
    * @param id_unit is integer, merupakan id dari unit     
    * @param th_rekap is integer, merupakan tahun dari rekap      
    * @return array data transaksi       
    */
    function daftar_sudah_buat($id_unit)
        { 
            $qf=$this->db->query("SELECT m_subunit.id_unit as id_unit,m_subunit.nama_subunit as nama_subunit FROM (`t_transaksi`) INNER JOIN `m_subunit` ON `t_transaksi`.`id_subunit`=`m_subunit`.`id_subunit`  where m_subunit.id_unit=$id_unit and id_jenis_belanja='1' and id_status_transaksi='1' GROUP BY `m_subunit`.`id_subunit`;");
            return $qf->result_array();
        }
    /**
    * Fungsi untuk data transaksi yang belum diotorisasi kaprodi berdasarkan unit_sudah,id_unit
    * @param unit_sudah is integer, merupakan list unit yang sudah mengajukan uraian UP      
    * @param id_unit is integer, merupakan id dari unit     
    * @return sekumpulan objek       
    */
    function up_belum_terotorisasi($unit_sudah,$id_unit)
        {  
            $this->db->select("*"); 
            $this->db->from("t_transaksi");
            $this->db->join("m_subunit",'t_transaksi.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);    
            $this->db->where_not_in('m_subunit.id_subunit',$unit_sudah);
            $this->db->where('t_transaksi.id_status_transaksi',1);
            $this->db->or_where('t_transaksi.id_status_transaksi',2);
            $this->db->where('t_transaksi.id_jenis_belanja',1);
            $this->db->group_by('t_transaksi.kode_unit');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan subunit yang belum mengajukan UP berdasarkan id_unit     
    * @param id_unit is integer, merupakan id dari unit      
    * @return array transaksi       
    */
    function up_belum_buat_rincian($id_unit)
        {            
            $qf=$this->db->query("SELECT id_subunit, nama_subunit from m_subunit where id_unit=$id_unit AND m_subunit.id_subunit NOT IN (SELECT m_subunit.id_subunit as id_subunit FROM (`t_transaksi`) INNER JOIN `m_subunit` ON `t_transaksi`.`id_subunit`=`m_subunit`.`id_subunit` where id_jenis_belanja='1' GROUP BY `m_subunit`.`id_subunit`)");
            return $qf->result_array();
        } 
    /**
    * Fungsi untuk menampilkan data UP berdasarkan id_unit, th_rekap   
    * @param id_unit is integer, merupakan id dari unit      
    * @param th_rekap is integer, merupakan tahun dari rekap     
    * @return sekumpulan objek      
    */
    function up_terotorisasi_simpan($id_unit,$th_rekap)
        {  
            $this->db->select("m_sifatpembayaran.*,t_rekap.id_rekap,t_rekap.id_spp,t_transaksi.id_transaksi, t_uraian.id_uraian,t_rekap.th_rekap"); 
            $this->db->from("t_rekap");
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("m_sifatpembayaran",'m_sifatpembayaran.id_sifatpembayaran=t_rekap.id_jenis_belanja','inner');
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);   
            $this->db->where('t_rekap.id_status_rekap',3); 
            $this->db->where('t_rekap.th_rekap',$th_rekap); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $result = $this->db->get();
            return $result;
        } 
    /**
    * Fungsi untuk menampilkan data UP berdasarkan id_unit, th_rekap   
    * @param id_unit is integer, merupakan id dari unit     
    * @param th_rekap is integer, merupakan tahun dari rekap      
    * @return sekumpulan objek      
    */
    function up_terotorisasi2($id_unit,$th_rekap)
        {  
            $this->db->select("m_sifatpembayaran.*,m_unit.*,m_kegiatan.*,t_rekap.id_rekap,t_rekap.id_spp,t_transaksi.id_transaksi, t_uraian.id_uraian,t_rekap.th_rekap, sum(jumlah) as jumlah"); 
            $this->db->from("t_rekap");
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("m_sifatpembayaran",'m_sifatpembayaran.id_sifatpembayaran=t_rekap.id_jenis_belanja','inner');
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->join("m_unit",'m_unit.id_unit=m_subunit.id_unit','inner');
            $this->db->join("m_kegiatan",'m_kegiatan.id_keg=t_rekap.id_kegiatan','inner');
            $this->db->where('m_subunit.id_unit',$id_unit);   
            $this->db->where('t_rekap.id_status_rekap',3); 
            $this->db->where('t_rekap.th_rekap',$th_rekap); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $result = $this->db->get();
            return $result;
        } 
    /**
    * Fungsi untuk menampilkan data rekap UP yang belum dibuatkan SPM berdasarkan id_unit, th_rekap   
    * @param id_unit is integer, merupakan id dari unit      
    * @param th_rekap is integer, merupakan tahun dari rekap      
    * @return result boolean true jika query berhasil    
    */
    function up_terotorisasi2_num($id_unit,$th_rekap)
        {  
            $this->db->select("*"); 
            $this->db->from("t_rekap");
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("m_sifatpembayaran",'m_sifatpembayaran.id_sifatpembayaran=t_rekap.id_jenis_belanja','inner');
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');
            $this->db->join("m_subunit",'t_rekap.id_subunit=m_subunit.id_subunit','inner');
            $this->db->where('t_rekap.id_spm', NULL); 
            $this->db->where('m_subunit.id_unit',$id_unit);   
            $this->db->where('t_rekap.id_status_rekap',3); 
            $this->db->where('t_rekap.th_rekap',$th_rekap); 
            $this->db->where('t_rekap.id_jenis_belanja',1);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {       
                return false;
            }
            else    
            {    
                return true;
            }
        }
    /**
    * Fungsi untuk menampilkan id transaksi UP berdasarkan kode_unit,kdoutput,kdkomponen,kdakun   
    * @param kode_unit is integer, merupakan kode dari unit      
    * @param kdoutput is integer, merupakan kode dari output      
    * @param kdkomponen is integer, merupakan kode dari komponen      
    * @param kdakun is integer, merupakan kode dari akun      
    * @return sekumpulan objek   
    */ 
    function ambil_id_transaksi($kode_unit,$kdoutput,$kdkomponen,$kdakun)
        {  
            $this->db->select("t_transaksi.id_transaksi"); 
            $this->db->from("t_transaksi"); 
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');
            $this->db->join("m_unit_pengisi",'t_uraian.kode_unit=m_unit_pengisi.kode_unit','inner');
            $this->db->where('m_unit_pengisi.kode_unit',$kode_unit); 
            $this->db->or_where('m_unit_pengisi.kode_uplevel',$kode_unit);
            $this->db->where('t_transaksi.status_transaksi','terotorisasi kaprodi'); 
            $this->db->where('t_transaksi.id_jenis_belanja',1); 
            $this->db->where('kdoutput',$kdoutput); 
            $this->db->where('kdkomponen',$kdkomponen); 
            $this->db->where('kdakun',$kdakun);
            $this->db->group_by('t_transaksi.id_transaksi'); 
            $result = $this->db->get();
            return $result;
        } 
    /**
    * Fungsi untuk menampilkan daftar UP yg sudah terotorisasi berdasarkan id_rekap,id_subunit,th_rekap   
    * @param id_rekap is integer, merupakan id dari rekap      
    * @param id_subunit is integer, merupakan id dari subunit     
    * @param th_rekap is integer, merupakan tahun dari rekap     
    * @return sekumpulan objek   
    */
    function daftar_up_terotorisasi($id_rekap,$id_subunit,$th_rekap)
        {   
            $q=$this->db->query("SELECT t_transaksi.id_transaksi, t_transaksi.id_rekap,t_uraian.id_uraian, m_status_transaksi.status_transaksi, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen,t_uraian.nmkomponen, t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader, m_subunit.nama_subunit,m_subunit.id_subunit,m_subunit.kode_subunit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi,m_status_transaksi,m_subunit,t_rekap WHERE t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_subunit=m_subunit.id_subunit and m_status_transaksi.id_status_transaksi=t_transaksi.id_status_transaksi and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_subunit ='$id_subunit' and t_transaksi.flag_kirim ='1' and t_transaksi.id_jenis_belanja ='1' and t_transaksi.id_rekap= '$id_rekap' and t_rekap.th_rekap= '$th_rekap' group by t_transaksi.id_transaksi;");
            return $q;   
        }
    /**
    * Fungsi untuk menampilkan daftar UP yg belum terotorisasi berdasarkan kode_unit  
    * @param kode_unit is integer, merupakan kode dari unit 
    * @return sekumpulan objek   
    */
    function daftar_up_belum_terotorisasi($kode_unit)
        { 
            $this->db->from("t_transaksi");
            $this->db->join("t_uraian",'t_uraian.id_transaksi=t_transaksi.id_transaksi','inner');  
            $this->db->join("m_unit_pengisi",'t_transaksi.kode_unit=m_unit_pengisi.kode_unit','inner');
            $this->db->where('t_transaksi.kode_unit',$kode_unit);
            $this->db->group_by('t_transaksi.id_transaksi');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk mengambil id autoincrement SPP    
    * @return array SPP   
    */
    function get_id_spp()
        {   
            $p = $this->db->query("show table status like 't_spp' ");
            return  $p->result_array();  
        }
    /**
    * Fungsi untuk mengambil id autoincrement SPM    
    * @return array SPM   
    */
    function get_id_spm()
        {   
            $p = $this->db->query("show table status like 't_spm' ");
            return  $p->result_array();  
        }
    /**
    * Fungsi untuk mengambil id autoincrement SP2D    
    * @return array SP2D   
    */
    function get_id_sp2d()
        {   
            $p = $this->db->query("show table status like 't_sp2d' ");
            return  $p->result_array();  
        }
    /**
    * Fungsi untuk data cara bayar    
    * @return sekumpulan objek   
    */
    function get_carabayar()
        {       
            $this->db->select('*');
            $this->db->from('m_carabayar');   
            $this->db->order_by('id_carabayar','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Cara Bayar-';
                $result[$row->id_carabayar]= ("$row->kode_carabayar - $row->carabayar"); 
            }  
            return $result;
        }
    /**
    * Fungsi untuk data jenis pembayaran   
    * @return sekumpulan objek   
    */
    function get_jenispembayaran()
        {       
            $this->db->select('*');
            $this->db->from('m_jenispembayaran');   
            $this->db->order_by('id_jenispembayaran','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Jenis Pembayaran-';
                $result[$row->id_jenispembayaran]= ("$row->id_jenispembayaran - $row->jenispembayaran"); 
            }  
            return $result;
        }
    /**
    * Fungsi untuk data kewenanganpelaksanaan  
    * @return sekumpulan objek   
    */
    function get_kewenanganpelaksanaan()
        {       
            $this->db->select('*');
            $this->db->from('m_kp');   
            $this->db->order_by('id_kewenangan_pelaksana','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Kewenangan Pelaksana-';
                $result[$row->id_kewenangan_pelaksana]= ("$row->id_kewenangan_pelaksana - $row->kewenangan"); 
            }  
            return $result;
        }
    /**
    * Fungsi untuk menampilkan jumlah uraian transaksi yang sudah terotorisasi
    * @param id_unit is integer, merupakan kode dari output   
    * @return sekumpulan objek   
    */
    function jum_spp($id_unit)
        {  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian');
           $this->db->join("m_subunit",'m_subunit.id_subunit=t_uraian.id_subunit','inner'); 
           $this->db->join("t_transaksi",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner'); 
           $this->db->where('flag_kirim',1);
           $this->db->where('id_status_transaksi',5);
           $this->db->where('flag_cek',1);
           $this->db->where('id_jenisbelanja',1); 
           $this->db->where('m_subunit.id_unit',$id_unit); 
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan jumlah uraian transaksi yang sudah terotorisasi
    * @param id_unit is integer, merupakan id dari unit   
    * @return sekumpulan objek   
    */
    function jum_spp2($kode_unit,$kdoutput,$kdkomponen,$kdakun)
        {  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_uraian');
           $this->db->join("m_unit_pengisi",'m_unit_pengisi.kode_unit=t_uraian.kode_unit','inner'); 
           $this->db->where('flag_cek',1);
           $this->db->where('m_unit_pengisi.kode_unit',$kode_unit);
           $this->db->or_where('m_unit_pengisi.kode_uplevel',$kode_unit); 
           $this->db->where('kdoutput',$kdoutput);
           $this->db->where('kdkomponen',$kdkomponen);
           $this->db->where('kdakun',$kdakun);
           $this->db->where('id_jenisbelanja',1);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan jumlah uraian transaksi yang sudah terotorisasi
    * @param id_unit is integer, merupakan id dari unit  
    * @return sekumpulan objek   
    */
    function get_unit($id_unit)
        {  
           $this->db->select('*');
           $this->db->from('m_subunit');
           $this->db->join("m_unit",'m_unit.id_unit=m_subunit.id_unit','inner');   
           $this->db->where('m_subunit.id_unit',$id_unit);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan data sifatpembayaran berdasarkan id_sifatpembayaran 
    * @param id_sifatpembayaran is integer, merupakan id dari sifatpembayaran   
    * @return sekumpulan objek   
    */
    function get_sifatpembayaran($id_sifatpembayaran)
        {  
           $this->db->select('*');
           $this->db->from('m_sifatpembayaran');       
           $this->db->where('id_sifatpembayaran',$id_sifatpembayaran);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan data dipa yang digunakan/terpakai 
    * @return sekumpulan objek   
    */
    function get_dipa()
        {  
           $this->db->select('*');
           $this->db->from('m_dipa');    
           $this->db->where('aktif',1);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menyimpan data SPP berdasarkan id_unit, id_transaksi
    * @param id_unit is integer, merupakan id dari unit
    * @param transaksi is integer   
    */ 
    function simpan_spp($id_unit,$transaksi)
        {         
            
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");      
            $id_dipa = $this->input->post('id_dipa');
            
            $dipa = $this->munit->ambil_level_tertinggi_dipa();
            foreach($dipa->result_array() as $row){
                            $dipa = $row['id_dipa'];  
            } 
            
            
            $id=$this->nomer->no_baru2('t_spp','spp','id_unit',$id_unit, date('y')); 
            
            $this->db->set('id_sifatpembayaran','1'); 
            $this->db->set('id_jenispembayaran','1'); 
            $this->db->set('id_kegiatan','1'); 
            $this->db->set('tgl_dibuat',$tgl_skrg);  
            $this->db->set('id_unit',$id_unit); 
            $this->db->set('id_dipa',$dipa); 
            $this->db->where('id_spp', $id['id_spp']);
            $this->db->where('th_spp', $id['th_spp']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_spp'); 
            
            $th  =date ('y');
            foreach($transaksi->result_array() as $row){
            $id_rekap = $row['id_rekap'];     
            $id_trans = $row['id_transaksi'];     
            $th_trans = $row['th_transaksi'];     
            $this->munit->update_rekap_spp($id_rekap,$id['id_spp'],$th);
            $this->munit->update_transaksi($id_trans,$id['id_spp'],$th);  
                            $get_id = $this->munit->ambil_level_tertinggi($id_trans,$th);
                            foreach($get_id->result_array() as $row){
                            $level = $row['level'];  
                            }
                            $level_terkini =  $level+1;           
                            $this->munit->masuk_waktu_dibuatkan_spp($id_trans,$level_terkini,$th); 
            }
        }
     /**
    * Fungsi untuk mengupdate data rekap berdasarkan id_rekap, id_spp, th
    * @param id_unit is integer, merupakan id dari unit
    * @param id is integer, merupakan id dari SPP   
    * @param th is integer, merupakan tahun dari rekap   
    */             
     function update_rekap_spp($id_rekap, $id,$th)
        {     
             $this->db->set('id_spp',$id); 
             $this->db->set('id_status_rekap',4);  
             $this->db->set('th_rekap',$th);  
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->update('t_rekap'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi berdasarkan id_transaksi,id,th
    * @param id_transaksi is integer, merupakan id dari transaksi
    * @param id is integer, merupakan id dari spp   
    * @param th is integer, merupakan tahun dari transaksi   
    */ 
     function update_transaksi($id_transaksi,$id,$th)
        {     
             $this->db->set('id_spp',$id); 
             $this->db->set('id_status_transaksi',6);  
             $this->db->set('th_transaksi',$th);  
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk menampilkan data SPP UP berdasarkan id_unit
    * @param id_unit is integer, merupakan id dari unit     
    */
     function spp_up($id_unit)
        {   
            $q=$this->db->query("SELECT t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_spp.id_spp=t_transaksi.id_spp and t_spp.id_unit ='$id_unit' and t_spp.id_sifatpembayaran ='1' group by t_spp.id_spp;");
            return $q;    
        }
     /**
    * Fungsi untuk menampilkan jumlah pagu berdasarkan kode_subunit,kdkomponen,kdoutput,kdakun,hdr
    * @param kode_subunit is integer, merupakan kode dari subunit      
    * @param kdoutput is integer, merupakan kode dari output      
    * @param kdkomponen is integer, merupakan kode dari komponen      
    * @param kdakun is integer, merupakan kode dari akun    
    * @param $hdr is integer, merupakan kode dari header belanja      
    * @return sekumpulan objek    
    */ 
     function jumlah_pagu_uraian_val($kode_subunit,$kdkomponen,$kdoutput,$kdakun,$hdr)
        {
             $result = array();
             $this->db->select('sum(jumlah)');
             $this->db->from('t_rkakl');   
             $this->db->where('kode_unit',$kode_subunit);
             $this->db->where('kdkomponen',$kdkomponen);
             $this->db->where('kdoutput',$kdoutput);
             $this->db->where('kdakun',$kdakun);
             $this->db->where('id_header',$hdr);
             $query = $this->db->get(); 
             return $query;  
        }
	  
	  function jumlah_pagu_uraian($kode_subunit,$kdkomponen,$kdskomponen,$kdoutput,$kdakun,$hdr)
        {
             $result = array();
             $this->db->select('sum(jumlah)');
             $this->db->from('t_rkakl');   
             $this->db->where('kode_unit',$kode_subunit);
             $this->db->where('kdkomponen',$kdkomponen);
			 if($kdskomponen!=0)
			 {$this->db->where('kdskomponen',$kdskomponen);}
             $this->db->where('kdoutput',$kdoutput);
             $this->db->where('kdakun',$kdakun);
             $this->db->where('id_header',$hdr);
             $query = $this->db->get(); 
             return $query;  
        }
     /**
    * Fungsi untuk menampilkan jumlah pagu berdasarkan id_unit,id_spp,th_spp
    * @param id_unit is integer, merupakan id dari unit     
    * @param id_spp is integer, merupakan id dari spp     
    * @param th_spp is integer, merupakan tahun dari spp     
    * @return sekumpulan objek    
    */  
     function detail_spp($id_unit,$id_spp,$th_spp)
        {      
            $this->db->from("t_spp"); 
            $this->db->join("m_dipa",'t_spp.id_dipa=m_dipa.id_dipa','inner');
            $this->db->join("m_sifatpembayaran",'t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran','inner');
            $this->db->join("m_jenispembayaran",'t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran','inner');
            $this->db->join("t_transaksi",'t_transaksi.id_spp=t_spp.id_spp','inner');  
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
            $this->db->join("m_unit",'t_spp.id_unit=m_unit.id_unit','inner');    
            $this->db->join("m_status_spp",'m_status_spp.id_status_spp=t_spp.id_status_spp','inner'); 
            $this->db->where('t_spp.id_unit',$id_unit);
            $this->db->where('t_spp.id_spp',$id_spp);
            $this->db->where('t_spp.th_spp',$th_spp);
            $this->db->group_by('t_spp.id_spp');
            $result = $this->db->get();
            return $result;
        } 
     /**
    * Fungsi untuk menampilkan jumlah pagu berdasarkan kode_unit,kdoutput,kdkomponen,kdakun
    * @param kd_un is integer, merupakan list dari kode dari unit     
    * @param kdoutput is integer, merupakan kode dari output    
    * @param kdkomponen is integer, merupakan kode dari komponen     
    * @param kdakun is integer , merupakan kode dari akun    
    * @return sekumpulan objek  
    */ 
      function jum_rkakl($kd_un,$kdoutput,$kdkomponen,$kdakun)
        {  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_rkakl');   
           $this->db->where('kdoutput',$kdoutput); 
           $this->db->where('kdkomponen',$kdkomponen); 
           $this->db->where('kdakun',$kdakun); 
           $this->db->where('kode_unit',$kd_un); 
           $query = $this->db->get(); 
           return $query;
        }
      /**
    * Fungsi untuk menampilkan data pagu berdasarkan id_unit,id_spp
    * @param id_unit is integer, merupakan list dari kode dari output     
    * @param id_spp is integer, merupakan id dari spp 
    * @return sekumpulan objek  
    */   
      function all ($id_unit,$id_spp)
        {
            $tahun = date('Y');
            $q=$this->db->query("select t_rkakl.kdkomponen, t_rkakl.kdakun, sum(jumlah) as jumlah from t_rkakl join (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit where tahun=$tahun group by t_rkakl.kdkomponen, t_rkakl.kdakun ");
            return $q->result();
        }
      /**
    * Fungsi untuk menampilkan data spp sesuai mak di pagu berdasarkan id_unit,id_spp,th_spp
    * @param id_unit is integer, merupakan id dari unit    
    * @param id_spp is integer, merupakan id dari spp  
    * @param th_spp is integer, merupakan tahun dari spp  
    * @return sekumpulan objek  
    */ 
      function jum ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdkomponen,t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_spm`) INNER JOIN `t_rekap` ON `t_rekap`.`id_spm`=`t_spm`.`id_spm` INNER JOIN `m_dipa` ON `t_rekap`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `t_transaksi` ON `t_rekap`.`id_rekap`=`t_transaksi`.`id_rekap` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_sifatpembayaran` ON `t_rekap`.`id_jenis_belanja`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_rekap`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `m_unit` ON `t_spm`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spm`.`id_unit` = '$id_unit' AND `t_spm`.`th_spm` = '$th_spp' AND `t_spm`.`id_spm` = '$id_spp' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun`) as apa on t_rkakl.kdoutput=apa.output and t_rkakl.kdkomponen=apa.komponen and t_rkakl.kdakun=apa.akun join 
            (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit
            group by t_rkakl.kdoutput,t_rkakl.kdkomponen, t_rkakl.kdakun");
            return $q->result();
        }
      /**
    * Fungsi untuk menampilkan jumlah spp sesuai mak di pagu berdasarkan id_unit,id_spp,th_spp
    * @param id_unit is integer, merupakan id dari unit     
    * @param id_spp is integer, merupakan id dari spp 
    * @param th_spp is integer, merupakan id dari spp  
    * @return sekumpulan objek  
    */
      function jum_sebagian ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdkomponen,t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spp`.`th_spp` = '$th_spp' AND `t_spp`.`id_spp` = '$id_spp' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun`) as apa on t_rkakl.kdoutput=apa.output and t_rkakl.kdkomponen=apa.komponen and t_rkakl.kdakun=apa.akun join 
            (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit
            ");
            return $q->result();
        }
     /**
    * Fungsi untuk menampilkan jumlah spp per mak yang telah dibayarkan berdasarkan id_unit,id_spp,th_spp
    * @param id_unit is integer, merupakan id dari unit     
    * @param id_spp is integer, merupakan id dari spp             
    * @param th_spp is integer, merupakan tahun dari spp  
    * @return sekumpulan objek  
    */ 
      function jum_spp_terdahulu ($id_unit,$th_spp)
        {
            $q=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,sum(jumlah) as jumlah from t_uraian join
            ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit`  WHERE id_status_spp='12' and `t_spp`.`id_unit` = '$id_unit' and `t_spp`.`th_spp` = '$th_spp' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) 
            as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit
            group by t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun");
            return $q->result();
        }
      /**
    * Fungsi untuk menampilkan jumlah spp yang diajukan  berdasarkan id_unit,id_spp,th_spp
    * @param id_unit is integer, merupakan id dari unit     
    * @param id_spp is integer, merupakan id dari spp             
    * @param th_spp is integer, merupakan tahun dari spp  
    * @return sekumpulan objek  
    */ 
       function jum_kini ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,sum(jumlah) as jumlah from t_uraian join
            ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen,t_uraian.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spp`.`id_spp` = '$id_spp' and `t_spp`.`th_spp` = '$th_spp' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) 
            as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit
            group by t_uraian.kdoutput,t_uraian.kdkomponen,t_uraian.kdakun");
            return $q->result();
        }
     /**
    * Fungsi untuk menampilkan total pagu berdasarkan id_unit
    * @param id_unit is integer, merupakan id dari unit
    * @return sekumpulan objek  
    */    
       function pagu_tot_dipa ($id_unit)
        {
            $tahun = date('Y');
            $q=$this->db->query("select sum(jumlah) from t_rkakl  join (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit where tahun='$tahun' ;");
            return $q;
        }
       /**
    * Fungsi untuk menampilkan total spp yang telah dibayarkan berdasarkan id_unit, th spp
    * @param id_unit is integer, merupakan id dari unit
    * @param th_spp is integer, merupakan tahun dari spp 
    * @return sekumpulan objek  
    */  
       function total_spp_terbayar ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(jumlah) from t_spp INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` where id_sifatpembayaran = 1 and th_spp=$th_spp and id_status_spp='12' ;");
            return $q;
        } 
    /**
    * Fungsi untuk menampilkan total spp yang telah dibayarkan per unit berdasarkan id_unit, th spp
    * @param id_unit is integer, merupakan id dari unit
    * @param th_spp is integer, merupakan tahun dari spp
    * @return sekumpulan objek  
    */ 
        function total_spp_terbayar_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(jumlah) from t_spp INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` where id_sifatpembayaran = 1 and id_status_spp='12' and id_unit=$id_unit and th_spp=$th_spp ;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan total spp yang diajukan per unit berdasarkan id_unit, th spp
    * @param id_unit is integer, merupakan id dari unit
    * @param th_spp is integer, merupakan tahun dari spp
    * @return sekumpulan objek  
    */ 
        function total_spp_diajukan_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(jumlah) from t_spp INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` where id_sifatpembayaran = 1 and id_status_spp='1' and id_unit=$id_unit and th_spp=$th_spp ;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan total semua spp yang diajukan per unit berdasarkan id_unit, th spp
    * @param id_unit is integer, merupakan id dari unit
    * @param th_spp is integer, merupakan tahun dari spp
    * @return sekumpulan objek  
    */ 
        function total_spp_semua_diajukan_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(jumlah) from t_spp INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` where id_sifatpembayaran = 1 and id_unit=$id_unit and th_spp=$th_spp;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan total spp yang diajukan berdasarkan id_unit,id spp, th spp
    * @param id_unit is integer, merupakan id dari unit
    * @param id_spp is integer, merupakan id dari spp
    * @param th_spp is integer, merupakan tahun dari spp
    * @return sekumpulan objek  
    */ 
       function total_spp_diajukan ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select sum(jumlah) from t_uraian,t_transaksi,t_spp WHERE `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi`AND `t_spp`.`id_spp`=`t_transaksi`.`id_spp` AND  `t_spp`.`id_spp` = '$id_spp' AND  `t_spp`.`th_spp` = '$th_spp' ;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan total spm yang diajukan berdasarkan id_unit,id spm, th spm
    * @param id_unit is integer, merupakan id dari unit
    * @param id_spm is integer, merupakan id dari spm
    * @param th_spm is integer, merupakan tahun dari spm
    * @return sekumpulan objek  
    */ 
       function total_spm_diajukan ($id_unit,$id_spm,$th_spm)
        {
            $q=$this->db->query("select sum(jumlah) from t_uraian,t_transaksi,t_rekap, t_spm WHERE `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` AND `t_rekap`.`id_rekap`=`t_transaksi`.`id_rekap` AND `t_spm`.`id_spm`=`t_rekap`.`id_spm` AND `t_spm`.`id_unit` = '$id_unit' AND `t_spm`.`id_spm` = '$id_spm' AND `t_spm`.`th_spm` = '$th_spm' and t_rekap.id_jenis_belanja='1';");
            return $q;
        }
     /**
    * Fungsi untuk menampilkan rincian UP berdasarkan id_subunit
    * @param id_subunit is integer, merupakan id dari subunit    
    * @return sekumpulan objek  
    */  
       function rincian ($id_subunit)
        {
            $q=$this->db->query("SELECT t_transaksi.id_transaksi,t_transaksi.th_transaksi, t_transaksi.id_rekap,t_uraian.id_uraian, m_status_transaksi.status_transaksi, t_uraian.kdoutput, t_uraian.nmoutput, t_uraian.kdkomponen,t_uraian.nmkomponen, t_uraian.kdakun, t_uraian.nmakun, t_uraian.nmheader, sum(jumlah) as jumlah FROM t_uraian, t_transaksi,m_status_transaksi WHERE m_status_transaksi.id_status_transaksi=t_transaksi.id_status_transaksi and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_subunit ='$id_subunit' and t_transaksi.flag_kirim ='0' and flag_cek=1 and t_transaksi.id_jenis_belanja ='1' group by t_transaksi.id_transaksi;");
            return $q;
        }
       /**
    * Fungsi untuk mengupdate status spp berdasarkan id, th
    * @param id is integer, merupakan id dari spp     
    * @param th is integer, merupakan tahun dari spp     
    * @return sekumpulan objek  
    */ 
       function otorisasi_spp_up($id,$th)
        {  
             $this->db->set('id_status_spp',2);
             $this->db->where('id_spp',$id); 
             $this->db->where('th_spp',$th); 
             $this->db->update('t_spp'); 
        }
       /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_trans, th
    * @param id_trans is integer, merupakan id dari transaksi     
    * @param th is integer, merupakan tahun dari transaksi    
    * @return sekumpulan objek  
    */ 
       function otorisasi_trans_up($id_trans,$th)
        {  
             $this->db->set('id_status_transaksi',7);
             $this->db->where('id_transaksi',$id_trans); 
             $this->db->where('th_transaksi',$th); 
             $this->db->update('t_transaksi'); 
        }
       /**
    * Fungsi untuk menampilkan data transaksi berdasarkan id, th
    * @param id is integer, merupakan id dari spp    
    * @param th is integer, merupakan tahun dari spp    
    * @return sekumpulan objek  
    */  
      function selek_trans($id,$th)
        {  
           $this->db->select('t_transaksi.id_transaksi');
           $this->db->from('t_transaksi');
           $this->db->join("t_spp",'t_transaksi.id_spp=t_spp.id_spp','inner');     
           $this->db->where('t_spp.id_spp',$id);
           $this->db->where('t_spp.th_spp',$th);
           $query = $this->db->get(); 
           return $query;
        }
    /**
    * Fungsi untuk menampilkan maksimum pengeluaran berdasarkan kode_unit
    * @param kode_unit is integer, merupakan kode dari unit  
    * @return sekumpulan objek  
    */
      function mp_pengeluaran($kode_subunit)
        {     
            $q=$this->db->query("select sum(jumlah) as jumlah from t_rkakl where kode_unit='$kode_subunit';");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan data spp berdasarkan id_unit
    * @param id_unit is integer, merupakan id dari unit
    * @return sekumpulan objek  
    */
      function spp_up_keu($id_unit)
        {      
            $q=$this->db->query("SELECT t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(jumlah) as jumlah FROM t_uraian, t_transaksi, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_spp.id_spp=t_transaksi.id_spp and t_spp.id_unit ='$id_unit' and t_spp.id_sifatpembayaran ='1' group by t_spp.id_spp;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan data spp berdasarkan id_unit, id_spp, th_spp
    * @param id_unit is integer, merupakan id dari unit 
    * @param id_spp is integer, merupakan id dari spp 
    * @param th_spp is integer, merupakan tahun dari spp 
    * @return sekumpulan objek  
    */
     function spp($id_unit,$id_spp,$th_spp)
        {   
            $q=$this->db->query("SELECT m_kegiatan.kdkeg, m_sifatpembayaran.sifatpembayaran, m_jenispembayaran.jenispembayaran,  t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(jumlah) as jumlah FROM m_kegiatan,m_sifatpembayaran,m_jenispembayaran,t_uraian, t_transaksi, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_spp=t_transaksi.id_spp and t_spp.id_unit ='$id_unit' and t_spp.id_spp ='$id_spp' and th_spp ='$th_spp' and t_spp.id_sifatpembayaran ='1' group by t_spp.id_spp;");
            return $q;  
        }
     /**
    * Fungsi untuk menampilkan data spp berdasarkan id_unit, id_spp, th_spp
    * @param id_unit is integer, merupakan id dari unit 
    * @param id_spp is integer, merupakan id dari spp 
    * @param th_spp is integer, merupakan tahun dari spp 
    * @return result boolean true jika query berhasil   
    */
     function cek_spp_spm($id_spp,$th_spp)
        {
            
            $this->db->from("t_spm");
            $this->db->join("t_spp",'t_spm.id_spp=t_spp.id_spp','inner');    
            $this->db->where('t_spm.id_spp',$id_spp);  
            $this->db->where('t_spp.th_spp',$th_spp);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {   
                return true;
            }
        }
     /**
    * Fungsi untuk menampilkan jumlah spm per pagu berdasarkan id_unit, id_spm, th_spm
    * @param id_unit is integer, merupakan id dari unit 
    * @param id_spm is integer, merupakan id dari spm 
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return sekumpulan objek  
    */
        function jum_spm ($id_unit,$id_spm,$th_spm)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdkomponen,t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen, t_uraian.kdakun as akun FROM (`t_spm`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `t_transaksi` ON `t_spp`.`id_spp`=`t_transaksi`.`id_spp` INNER JOIN `t_spp` ON `t_spp`.`id_spp`=`t_spm`.`id_spp` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spm`.`id_unit` = '$id_unit' AND `t_spm`.`th_spm` = '$th_spm' AND `t_spm`.`id_spm` = '$id_spm' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun`) as apa on t_rkakl.kdoutput=apa.output and t_rkakl.kdkomponen=apa.komponen and t_rkakl.kdakun=apa.akun join 
            (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit
            group by t_rkakl.kdoutput,t_rkakl.kdkomponen, t_rkakl.kdakun");
            return $q->result();
        }
    /**
    * Fungsi untuk menampilkan jumlah yang diajukan berdasarkan id_unit, id_spm, th_spm
    * @param id_unit is integer, merupakan id dari unit 
    * @param id_spm is integer, merupakan id dari spm 
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return sekumpulan objek  
    */
        function jum_kini_spm ($id_unit,$id_spm,$th_spm)
        {
            $q=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,sum(jumlah) as jumlah from t_uraian join
            ( SELECT t_uraian.kdoutput as output,t_uraian.kdkomponen as komponen,t_uraian.kdakun as akun FROM (`t_spm`) INNER JOIN `t_rekap` ON `t_spm`.`id_spm`=`t_rekap`.`id_spm` INNER JOIN `m_dipa` ON `t_rekap`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_rekap`.`id_jenis_belanja`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_rekap`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_transaksi` ON `t_rekap`.`id_rekap`=`t_transaksi`.`id_rekap` INNER JOIN `t_uraian` ON `t_transaksi`.`id_transaksi`=`t_uraian`.`id_transaksi` INNER JOIN `m_unit` ON `t_spm`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spm`.`id_unit` = '$id_unit' AND `t_spm`.`th_spm` = '$th_spm' AND `t_spm`.`id_spm` = '$id_spm' GROUP BY `t_uraian`.`kdoutput`,`t_uraian`.`kdkomponen`, `t_uraian`.`kdakun` ) 
            as apa on t_uraian.kdoutput=apa.output and t_uraian.kdkomponen=apa.komponen and t_uraian.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit where id_jenisbelanja=1
            group by t_uraian.kdoutput,t_uraian.kdkomponen,t_uraian.kdakun");
            return $q->result();
        }
    /**
    * Fungsi untuk menyimpan data SPM
    * @param id_unit is integer, merupakan id dari unit 
    * @param id_spm is integer, merupakan id dari spm 
    * @param th_spm is integer, merupakan tahun dari spm      
    */
     function simpan_spm($transaksi,$id_unit,$th_rekap)
        {      
            $tgl_skrg = date("Y-m-d");         
            $cb = $this->input->post('cb');     
            $kepada = $this->input->post('kpd'); 
            $npwp = $this->input->post('npwp'); 
            $no_rek = $this->input->post('rek'); 
            $bank= $this->input->post('bnk'); 
            $uraian = $this->input->post('uraian');    
            
            $id=$this->nomer->no_baru2('t_spm','spm','id_unit',$id_unit, date('y')); 
            
            
            $this->db->set('tgl_spm',$tgl_skrg); 
            $this->db->set('id_carabayar',$cb); 
            $this->db->set('kepada',$kepada); 
            $this->db->set('npwp',$npwp);  
            $this->db->set('bank',$bank);  
            $this->db->set('nomor_rekening',$no_rek); 
            $this->db->set('uraian_spm',$uraian); 
            $this->db->where('id_spm', $id['id_spm']);
            $this->db->where('th_spm', $id['th_spm']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_spm');
            
            foreach($transaksi->result_array() as $row){
            $id_rekap = $row['id_rekap']; 
            $id_transaksi = $row['id_transaksi']; 
          
           $this->munit->update_status_rekap_spm($id_rekap,$id['id_spm'],$th_rekap); 
            $this->munit->update_trans_spm($id_transaksi,$th_rekap);
              $get_id = $this->munit->ambil_level_tertinggi($id_transaksi,$th_rekap);
                            foreach($get_id->result_array() as $row){
                            $level = $row['level'];  
                            }
                            $level_terkini =  $level+1;           
                            $this->munit->masuk_waktu_dibuatkan_spm($id_transaksi,$level_terkini,$th_rekap);
          }
        }
     /**
    * Fungsi untuk mengupdate status transaksi berdasarkan id_trans, th_rekap
    * @param id_trans is integer, merupakan id dari transaksi
    * @param th_rekap is integer, merupakan tahun dari rekap    
    * @return sekumpulan objek  
    */    
     function update_trans_spm($id_trans,$th_rekap)
        {    
            $this->db->set('id_status_transaksi',8);   
            $this->db->where('id_transaksi', $id_trans);
            $this->db->where('th_transaksi', $th_rekap);
            $this->db->update('t_transaksi');
        }
     /**
    * Fungsi untuk mengupdate status rekap berdasarkan id_rekap,id_spm,th_rekap
    * @param id_rekap is integer, merupakan id dari rekap
    * @param id_spm is integer, merupakan id dari spm   
    * @param th_rekap is integer, merupakan tahun dari rekap
    */ 
     function update_status_rekap_spm($id_rekap,$id_spm,$th_rekap)
        {    
            $this->db->set('id_status_rekap',5);   
            $this->db->set('id_spm',$id_spm);   
            $this->db->where('id_rekap', $id_rekap);
            $this->db->where('th_rekap', $th_rekap);
            $this->db->update('t_rekap');
        }
     /**
    * Fungsi untuk menampilkan jumlah uraian berdasarkan id_unit
    * @param id_rekap is integer, merupakan id dari rekap
    */ 
     function spm_up_jum($id_unit)
        {      
            $q=$this->db->query("SELECT sum(jumlah) FROM t_uraian, t_transaksi, t_spm, m_status_spm, m_unit,t_rekap WHERE t_rekap.id_spm=t_spm.id_spm and t_spm.id_unit=m_unit.id_unit and t_rekap.id_rekap=t_transaksi.id_rekap and m_status_spm.id_status_spm=t_spm.id_status_spm and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_spm.id_spm=t_rekap.id_spm and t_spm.id_unit ='$id_unit' and t_uraian.id_jenisbelanja ='1' ;");
            return $q; 
        }
     /**
    * Fungsi untuk menampilkan data SPM UP berdasarkan id_unit
    * @param id_unit is integer, merupakan id dari unit
    * @return sekumpulan objek 
    */
     function spm_up($id_unit)
        {      
            $q=$this->db->query("SELECT t_spm.*, m_status_spm.status_spm,m_unit.nama_unit, kode_digit,singkat FROM t_uraian, t_transaksi, t_spm, m_status_spm, m_unit,t_rekap, m_sifatpembayaran WHERE t_rekap.id_spm=t_spm.id_spm and t_spm.id_unit=m_unit.id_unit and m_status_spm.id_status_spm=t_spm.id_status_spm and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_spm.id_spm=t_rekap.id_spm and t_spm.id_unit ='$id_unit' and t_rekap.id_jenis_belanja ='1' group by t_spm.id_spm;");
            return $q; 
        }
    /**
    * Fungsi untuk menampilkan detail SPM UP berdasarkan id_unit, id_spm, th_spm
    * @param id_unit is integer, merupakan id dari unit
    * @param id_spm is integer, merupakan id dari spm 
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return sekumpulan objek 
    */  
     function detail_spm($id_unit,$id_spm,$th_spm)
        {    
        
        $q=$this->db->query("SELECT t_spm.*,m_kegiatan.*, m_status_spm.*,m_unit.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran , singkat, sum(jumlah) as jumlah FROM t_spm,m_status_spm,m_sifatpembayaran, m_jenispembayaran,m_carabayar,t_rekap,t_transaksi,t_uraian,m_unit, m_kegiatan WHERE m_kegiatan.id_keg=t_rekap.id_kegiatan and t_uraian.id_jenisbelanja=1 and m_jenispembayaran.id_jenispembayaran=t_rekap.id_jenispembayaran and m_status_spm.id_status_spm=t_spm.id_status_spm and t_rekap.id_spm=t_spm.id_spm and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar  and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_spm.id_spm =$id_spm and t_spm.th_spm =$th_spm and t_rekap.id_jenis_belanja =1 group by t_spm.id_spm;");
            return $q;     
        }
     /**
    * Fungsi untuk menampilkan data UP yang telah dibuatkan SPM berdasarkan id_unit, id_spm, th_spm
    * @param id_unit is integer, merupakan id dari unit  
    * @param th_rekap is integer, merupakan tahun dari rekap
    * @return array data spm 
    */   
     function jum_rekap_up($id_unit,$th_rekap)
        {          
            $qf=$this->db->query("select sum(jumlah) as jumlah from t_uraian join (SELECT * FROM t_transaksi where id_jenis_belanja='1' and id_status_transaksi=8 and th_transaksi=$th_rekap) as apa on t_uraian.id_transaksi=apa.id_transaksi join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_uraian.id_subunit=total_unit.id_subunit;");
            return $qf->result_array();
        }
     /**
    * Fungsi untuk mengupdate status spm (otorisasi spm oleh dekan)berdasarkan id_spm, th_spm
    * @param id is integer, merupakan id dari spm  
    * @param th is integer, merupakan tahun dari spm    
    */ 
     function otorisasi_spm_up($id,$th)
        {  
             $this->db->set('id_status_spm',2);
             $this->db->where('id_spm',$id); 
             $this->db->where('th_spm',$th); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk menampilkan data UP yang telah dibuatkan SPM berdasarkan id_spm, th_spm
    * @param id_spm is integer, merupakan id dari spm  
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return array data spm 
    */ 
     function data_dwh($id_spm,$th_spm)
        {  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_spm');    
           $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
           $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');     
           $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');     
           $this->db->where('t_spm.id_spm',$id_spm);
           $this->db->where('t_spm.th_spm',$th_spm);
           $query = $this->db->get(); 
           return $query;
        }
        /**
    * Fungsi untuk menampilkan data SPM berdasarkan id_spm, th_spm
    * @param id_spm is integer, merupakan id dari spm  
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return sekumpulan objek 
    */ 
     function selek_spm_trans($th_spm,$id_spm)
        {  
           $this->db->select('*');
           $this->db->from('t_spm');    
           $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
           $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');     
           $this->db->where('t_spm.id_spm',$id_spm);
           $this->db->where('t_spm.th_spm',$th_spm);
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk menampilkan data SPM berdasarkan id_spm, th_spm
    * @param id_spm is integer, merupakan id dari spm   
    * @param th_spm is integer, merupakan tahun dari spm 
    * @return sekumpulan objek 
    */ 
     function spp_dari_spm($id_spm,$th_spm)
        {  
           $this->db->select('*');
           $this->db->from('t_spm');           
           $this->db->where('t_spm.id_spm',$id_spm);
           $this->db->where('t_spm.th_spm',$th_spm);
           $query = $this->db->get(); 
           return $query;
        }
     /**
    * Fungsi untuk mengupdate data transaksi(terotorisasi dekan) berdasarkan id_trans, th
    * @param id_trans is integer, merupakan id dari transaksi   
    * @param th is integer, merupakan tahun dari transaksi         
    */ 
     function otorisasi_trans_up2($id_trans,$th)
        {  
             $this->db->set('id_status_transaksi',9);
             $this->db->where('id_transaksi',$id_trans); 
             $this->db->where('th_transaksi',$th); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(verifikasi blu) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi   
    * @param th_spm is integer, merupakan tahun dari spm    
    */ 
     function trans_stat_veri_blu($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',10);                  
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(kasubag dana masyarakat) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_spm is integer, merupakan tahun dari spm     
    */
     function trans_stat_subag_dm($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',11);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(kabag keuangan) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_spm is integer, merupakan tahun dari spm     
    */
     function trans_stat_kabag_keu($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',12);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(petugas sp2d) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_spm is integer, merupakan tahun dari spm      
    */
     function trans_stat_ppsp2d($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',13);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(terotorisasi pr2) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_spm is integer, merupakan tahun dari spm   
    */
     function trans_stat_pr2($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',15);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(telah dibuatkan sp2d) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi  
    * @param th_spm is integer, merupakan tahun dari spm     
    */
     function trans_stat_telah_sp2d($id_transaksi,$th_spm)
        {  
             $this->db->set('id_status_transaksi',14);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_spm); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data transaksi(telah dibuatkan bg) berdasarkan id_transaksi, th_spm
    * @param id_transaksi is integer, merupakan id dari transaksi   
    * @param th_spm is integer, merupakan tahun dari spm 
    */
     function trans_stat_telah_bg($id_transaksi,$th_sp2d)
        {  
             $this->db->set('id_status_transaksi',16);
             $this->db->where('id_transaksi',$id_transaksi); 
             $this->db->where('th_transaksi',$th_sp2d); 
             $this->db->update('t_transaksi'); 
        }
     /**
    * Fungsi untuk mengupdate data rekap(terotorisasi dekan) berdasarkan id_rekap, th
    * @param id_rekap is integer  
    * @param th is integer     
    */
     function otorisasi_rekap_up2($id_rekap,$th)
        {  
             $this->db->set('id_status_rekap',6);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th); 
             $this->db->update('t_rekap'); 
        }
     /**
    * Fungsi untuk mengupdate data rekap(verifikator blu) berdasarkan id_rekap, th
    * @param id_rekap is integer  
    * @param th is integer      
    */
    function rekap_stat_veri_blu($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',7);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap');
        }
    /**
    * Fungsi untuk mengupdate status rekap (kasubag dana masyarakat) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer  
    */
    function rekap_stat_subag_dm($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',8);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk mengupdate status rekap (kabag keuangan) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer  
    */
    function rekap_stat_kabag_keu($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',9);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap');
        }
    /**
    * Fungsi untuk mengupdate status rekap (petugas sp2d) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer 
    */
    function rekap_stat_ppsp2d($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',10);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap');
        }
    /**
    * Fungsi untuk mengupdate status rekap (terotorisasi pr2) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer 
    */
    function rekap_stat_pr2($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',12);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk mengupdate status rekap (telah dibuatkan sp2d) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer  
    */
    function rekap_stat_telah_sp2d($id_rekap,$th_spm)
        {  
             $this->db->set('id_status_rekap',11);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_spm); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk mengupdate status rekap (telah dibuatkan bg) berdasarkan id_rekap, th_spm
    * @param id_rekap is integer  
    * @param th_spm is integer   
    */
    function rekap_stat_telah_bg($id_rekap,$th_sp2d)
        {  
             $this->db->set('id_status_rekap',13);
             $this->db->where('id_rekap',$id_rekap); 
             $this->db->where('th_rekap',$th_sp2d); 
             $this->db->update('t_rekap'); 
        }
    /**
    * Fungsi untuk menampilkan SPM UP (bagian penerimaan) berdasarkan th
    * @param th is integer      
    * @return sekumpulan objek 
    */
    function spm_up_pen($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    function jum_spm_up_pen($th)
        {         
            $this->db->from("t_spm");  
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.th_spm',$th);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    /**
    * Fungsi untuk menampilkan SPM UP (yang direvisi) berdasarkan th
    * @param th is integer      
    * @return sekumpulan objek 
    */
    function spm_up_pen_revisi($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_spm.id_status_spm=10 and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    function jum_spm_revisi_pusat($id_unit)
        {         
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.id_unit',$id_unit);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    function jum_spm_up_veri($th)
        {         
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.th_spm',$th);
            //$this->db->where('t_spm.id_status_spm',3);  
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    function jum_spm_up_subagdm($th)
        {         
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.th_spm',$th);
            //$this->db->where('t_spm.id_status_spm',4);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    function jum_spm_up_kabagkeu($th)
        {         
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.th_spm',$th);
            //$this->db->where('t_spm.id_status_spm',5);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    function jum_spm_up_sp2d($th)
        {         
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->where('t_rekap.id_jenis_belanja',1);
            $this->db->where('t_spm.th_spm',$th);
            //$this->db->where('t_spm.id_status_spm',6);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result->num_rows();
        }
    /**
    * Fungsi untuk menampilkan SPM UP berdasarkan id_spm, th_spm
    * @param id is integer, merupakan id_spm     
    * @param th is integer, merupakan th_spm      
    * @return sekumpulan objek 
    */
    function spm_up_pen4($id,$th)
        {      
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->join("m_sifatpembayaran",'t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran','inner'); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
            $this->db->join("m_unit",'t_spm.id_unit=m_unit.id_unit','inner');
            $this->db->where('t_spm.id_spm',$id);
            $this->db->where('t_spm.th_spm',$th);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan SPM UP (verifikator pusat)berdasarkan th
    * @param id is integer, merupakan id_spm     
    * @param th is integer, merupakan th_spm      
    * @return sekumpulan objek 
    */
    function spm_up_veri($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan SPM UP (kasubag dana masyarakat)berdasarkan th 
    * @param th is integer, merupakan th_spm      
    * @return sekumpulan objek 
    */
    function spm_up_dm($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan SPM UP (kabag keuangan)berdasarkan th   
    * @param th is integer, merupakan th_spm      
    * @return sekumpulan objek 
    */
    function spm_up_kabag($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan SP2D UP berdasarkan th   
    * @param th is integer, merupakan th_spm      
    * @return sekumpulan objek 
    */
    function spm_up_sp2d($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan daftar sp2d berdasarkan th   
    * @param th is integer, merupakan th_sp2d      
    * @return sekumpulan objek 
    */
    function list_sp2d($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*,t_sp2d.id_sp2d,t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_rekap.id_spm=t_spm.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and t_spm.th_spm= '$th' group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan daftar sp2d berdasarkan id_sp2d, th_sp2d   
    * @param id_sp2d is integer, merupakan id_sp2d      
    * @param th_sp2d is integer, merupakan th_sp2d      
    * @return sekumpulan objek 
    */
    function list_sp2d2($id_sp2d,$th_sp2d)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*,t_sp2d.id_sp2d,t_sp2d.tgl_buat, t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(jumlah) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_rekap.id_spm=t_spm.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and id_sp2d=$id_sp2d and th_sp2d=$th_sp2d group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan daftar sp2d beserta jumlah berdasarkan id_sp2d, th_sp2d   
    * @param id_sp2d is integer, merupakan id_sp2d      
    * @param th_sp2d is integer, merupakan th_sp2d      
    * @return sekumpulan objek 
    */
    function list_sp2d3($id_sp2d,$th_sp2d)
        {      
            $q=$this->db->query("SELECT m_bg.nomor_bg,t_spm.*,t_sp2d.id_sp2d,t_sp2d.tgl_buat, t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_status_spm.*, kode_digit, nama_unit, sum(jumlah) as jumlah FROM m_bg,t_sp2d,t_spm,m_status_spm,t_rekap,t_transaksi,t_uraian,m_unit WHERE t_sp2d.id_bg=m_bg.id_bg and t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_rekap.id_spm=t_spm.id_spm and t_transaksi.id_rekap=t_rekap.id_rekap and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 and id_sp2d=$id_sp2d and th_sp2d=$th_sp2d group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan syarat kelengkapan SPP       
    * @return sekumpulan objek 
    */
    function getSyaratList_up()
        {  
           $result = array();
           $this->db->select('*');
           $this->db->from('m_verifikasi');   
           $this->db->where('id_jenis',7);   
           $this->db->where('id_persyaratan',1);   
           $query = $this->db->get();   
           return $query;
        }
    /**
    * Fungsi untuk menampilkan detail SPM UPberdasarkan id   
    * @param id is integer, merupakan id_spm      
    * @return sekumpulan objek 
    */
    function spm_up_pen2($id)
        {      
            $this->db->from("t_spm"); 
            $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner');
            $this->db->join("t_rekap",'t_spp.id_spp=t_rekap.id_spp','inner');
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
            $this->db->join("m_unit_pengisi",'t_spp.kode_unit=m_unit_pengisi.kode_unit','inner');
            $this->db->join("m_detail_unit",'m_detail_unit.kode_unit=t_spp.kode_unit','inner');  
            $this->db->where('t_spp.id_sifatpembayaran',1);
            $this->db->where('t_spm.id_spm',$id);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result;
        }
    /**
    * Fungsi untuk menampilkan ada tidaknya detail veri berdasarkan id_spm, th_spm  
    * @param id_spm is integer, merupakan id_spm      
    * @param th_spm is integer, merupakan th_spm      
    * @return return boolean true jika query berhasil  
    */
    function cek_ada_veri($id,$th)
        {   
            $this->db->select('*');
            $this->db->from('t_detail_veri');   
            $this->db->where('id_spm',$id);  
            $this->db->where('th_spm',$th);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {     
                return false;
            }
            else    
            {     
                return true;
            }
        }
    function cek_detail_kelengkapan($id,$th)
        {   
            $this->db->select('*');
            $this->db->from('t_detail_veri');   
            $this->db->where('id_spm',$id);  
            $this->db->where('th_spm',$th);  
            $result = $this->db->get(); 
            return $result->num_rows();
        }
    function cek_ada_veri_komplit($id,$th)
        {   
            $this->db->select('*');
            $this->db->from('t_detail_veri');   
            $this->db->where('id_spm',$id);  
            $this->db->where('th_spm',$th);  
            $this->db->where('flag_cek',0);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {     
                return false;
            }
            else    
            {     
                return true;
            }
        }
     /**
    * Fungsi untuk menyimpan detail veri berdasarkan id, th  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm 
    */ 
     function insert_detail_kel($id,$th)
        {        
            $cek = $this->input->post('cek');  
                for($i=0;$i<count($_POST['cek']);$i++){
                    $q = $this->db->query("insert into t_detail_veri(id_spm,th_spm, id_uraian) values ('$id','$th',$cek[$i])");
                } 
                
        }
     /**
    * Fungsi untuk mengupdate detail syarat kelengkapan berdasarkan id_spm, th_spm  
    * @param id_spm is integer, merupakan id_spm      
    * @param th_spm is integer, merupakan th_spm
    */
     function update_kelengkapan($id)
        {         
        $tes = $this->input->post('tes');  
        for($i=0;$i<count($_POST['tes']);$i++){
             $this->db->set('flag_cek',1); 
             $this->db->where('id_spm', $id);
             $this->db->where('id_uraian', $tes[$i]);
             $this->db->update('t_detail_veri'); 
        }
        }
     /**
    * Fungsi untuk mengupdate status spm (revisi) berdasarkan id_spm, th_spm  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm
    */
     function revisi_spm_kelengkapan($id,$th)
        {                    
             $this->db->set('id_status_spm',10); 
             $this->db->where('id_spm', $id);
             $this->db->where('th_spm', $th);
             $this->db->update('t_spm');
        }
     /**
    * Fungsi untuk mengupdate status spm (terotorisasi dekan) berdasarkan id_spm, th_spm  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm
    */
     function kirim_ulang_kepusat($id,$th)
        {                         
             $this->db->set('id_status_spm',2); 
             $this->db->where('id_spm', $id);
             $this->db->where('th_spm', $th);
             $this->db->update('t_spm');
        }
     /**
    * Fungsi untuk mengupdate data spm berdasarkan id_spm, th_spm  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm
    */
     function update_penyerah($id,$th)
        {                         
            $nm = $this->input->post('nmpenyerah');     
            $nip = $this->input->post('nippenyerah');     
            $this->db->set('nama_penyerah',$nm); 
            $this->db->set('nip_penyerah',$nip); 
            $this->db->where('id_spm', $id);    
            $this->db->where('th_spm', $th);    
            $this->db->update('t_spm');
             
        }
      /**
    * Fungsi untuk menampilkan detail data spm berdasarkan id_spm, th_spm  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm
    * @return sekumpulan objek
    */ 
     function detail_daftar($id,$th)
        {      
            $this->db->from("t_spm"); 
            $this->db->join("t_rekap",'t_rekap.id_spm=t_spm.id_spm','inner'); 
            $this->db->join("m_sifatpembayaran",'t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran','inner'); 
            $this->db->join("t_transaksi",'t_transaksi.id_rekap=t_rekap.id_rekap','inner');
            $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');  
            $this->db->join("m_unit",'t_spm.id_unit=m_unit.id_unit','inner');  
            $this->db->join("m_kegiatan",'m_kegiatan.id_keg=t_rekap.id_kegiatan','inner');     
            $this->db->where('t_spm.id_spm',$id);
            $this->db->where('t_spm.th_spm',$th);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result;
        }
     /**
    * Fungsi untuk menampilkan detail data spm (syarat kelengkapan) berdasarkan id_spm, th_spm  
    * @param id is integer, merupakan id_spm      
    * @param th is integer, merupakan th_spm
    * @return sekumpulan objek
    */ 
     function ceklist_umum($id,$th)
         {   
            $this->db->select('*');
            $this->db->from('t_spm');
            $this->db->join("t_detail_veri",'t_detail_veri.id_spm=t_spm.id_spm','inner'); 
            $this->db->join("m_verifikasi",'m_verifikasi.id_uraian=t_detail_veri.id_uraian','inner'); 
            $this->db->where('id_persyaratan',1); 
            $this->db->where('t_detail_veri.id_spm', $id); 
            $this->db->where('t_detail_veri.th_spm', $th); 
            $result = $this->db->get();
            return $result;
        }
      /**
    * Fungsi untuk menampilkan data setting   
    * @return sekumpulan objek
    */
     function select_setting()
         {   
            $this->db->select('*');
            $this->db->from('m_setting'); 
            $result = $this->db->get();
            return $result;
        }
     /**
    * Fungsi untuk mengupdate status spm (revisi ke unit)  
    * @param id_spm is integer, merupakan id_spm
    */
     function spm_revisi_keunit($id_spm)
        {  
             $this->db->set('status_spm','revisi_ke_unit');
             $this->db->where('id_spm',$id_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk menegecek ada tidaknya syarat kelengkapan spm berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm
    * @return result boolean true jika query berhasil  
    */
     function sudah_cek_kelengkapan($id_spm,$th_spm)
        {
            $this->db->select('*'); 
            $this->db->from('t_detail_veri'); 
            $this->db->where('id_spm',$id_spm); 
            $this->db->where('th_spm',$th_spm); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                return false;
            }
            else    
            {   
                return true;
            }
        }    
     /**
    * Fungsi untuk mengecek status syarat kelengkapan spm berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm
    * @return result boolean true jika query berhasil  
    */
     function ada_flag_cek($id_spm,$th_spm)
        {
            $this->db->select('*'); 
            $this->db->from('t_detail_veri');
            $this->db->where('flag_cek',0); 
            $this->db->where('id_spm',$id_spm); 
            $this->db->where('th_spm',$th_spm); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                return false;
            }
            else    
            {   
                return true;
            }
        }
     /**
    * Fungsi untuk mengupdate status syarat kelengkapan spm berdasarkan id_spm dan th_spm  
    * @param id is integer, merupakan id_spm
    * @param th is integer, merupakan th_spm      
    */
     function update_detail_kel($id,$th)
        {                         
        $tes = $this->input->post('tes'); 
        for($i=0;$i<count($_POST['tes']);$i++){
             $this->db->set('flag_cek',1); 
             $this->db->where('id_spm', $id);
             $this->db->where('th_spm', $th);
             $this->db->where('id_uraian', $tes[$i]);
             $this->db->update('t_detail_veri');
             
        }
        }
     /**
    * Fungsi untuk mengupdate status spm (verifikator pusat) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function setuju_bak($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',3);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(kasubag dana masyarakat) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function setuju_veri($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',4);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(kabag keuangan) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function setuju_dm($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',5);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(petugas sp2d) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function setuju_kabag($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',6);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(telah dibuatkan sp2d) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function setuju_sp2d($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',7);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(telah dibuatkan bg) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function buat_bg($id_spm,$th_sp2d)
        {  
             $this->db->set('id_status_spm',9);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_sp2d); 
             $this->db->update('t_spm'); 
        }
     /**
    * Fungsi untuk mengupdate status spm(terotorisasi pr2) berdasarkan id_spm dan th_spm  
    * @param id_spm is integer, merupakan id_spm
    * @param th_spm is integer, merupakan th_spm      
    */
     function otorisasi_pr2($th_spm,$id_spm)
        {  
             $this->db->set('id_status_spm',8);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        } 
     /**
    * Fungsi untuk menampilkan kode unit berdasarkan id_spm  
    * @param id_spm is integer, merupakan id_spm      
    */
      function ambil_kode_unit($id_spm)
         {   
            $this->db->select('kode_digit');
            $this->db->from('t_spm'); 
            $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner'); 
            $this->db->join("m_detail_unit",'t_spp.kode_unit=m_detail_unit.kode_unit','inner');   
            $this->db->where('t_spm.id_spm', $id_spm); 
            $result = $this->db->get();
            return $result;  
        }
      /**
    * Fungsi untuk menyimpan sp2d berdasarkan id_spm, th_spm 
    * @param id_spm is integer, merupakan id_spm      
    * @param th_spm is integer, merupakan th_spm      
    * @param trans is array, merupakan data untuk transaksi    
    */
      function buat_sp2d($id_spm,$trans,$th_spm)
        {
            $tahun = date("Y");
            $tgl_skrg = date("Y-m-d");    
            $id=$this->nomer->id_baru('t_sp2d','sp2d', date('y')); 
            
            $no = sprintf("%04d", $id['id_sp2d']);
            $nomor_sp2d = ''.$no.'/UP/BLU/'.$tahun; 
            
            $this->db->set('id_spm',$id_spm);
            $this->db->set('no_sp2d',$nomor_sp2d);
            $this->db->set('tgl_buat',$tgl_skrg);
            $this->db->where('id_sp2d', $id['id_sp2d']);
            $this->db->where('th_sp2d', $id['th_sp2d']);
            $this->db->update('t_sp2d'); 
            
            foreach($trans->result_array() as $row){
                    $id_trans = $row['id_transaksi'];
                    $id_rekap = $row['id_rekap'];
                    $this->munit->trans_stat_telah_sp2d($id_trans,$th_spm);
                    $this->munit->rekap_stat_telah_sp2d($id_rekap,$th_spm);
                    
                    $get_id = $this->munit->ambil_level_tertinggi($id_trans,$th_spm);
                    foreach($get_id->result_array() as $row){
                    $level = $row['level'];  
                    }
                    $level_terkini =  $level+1;           
                    $this->munit->masuk_waktu_dibuatkan_sp2d($id_trans,$level_terkini,$th_spm);
            }
        }
    /**
    * Fungsi untuk menampilkan data sp2d berdasarkan id_spm, th_spm 
    * @param id_spm is integer, merupakan id_spm      
    * @param th_spm is integer, merupakan th_spm 
    * @return result boolean true jika query berhasil     
    */
    function cek_adasp2d($th_spm,$id_spm)
        {
            
            $this->db->select('*');
            $this->db->from('t_sp2d');   
            $this->db->where('id_spm',$id_spm);  
            $this->db->where('th_sp2d',$th_spm);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {    
                return false;
            }
            else    
            {return true; }
        }
    /**
    * Fungsi untuk menampilkan detail data sp2d berdasarkan id_spm 
    * @param id_spm is integer, merupakan id_spm
    * @return sekumpulan objek     
    */
    function detail_sp2d($id_spm)
        {      
            $q=$this->db->query("SELECT nmakun,t_sp2d.*,kdkeg, t_spm.*, m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,m_unit.*, sum(jumlah) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_rekap,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_transaksi,t_uraian,m_unit WHERE t_spm.id_spm=t_sp2d.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_rekap.id_spm=t_spm.id_spm and m_kegiatan.id_keg=t_rekap.id_kegiatan and t_rekap.id_dipa=m_dipa.id_dipa and t_rekap.id_jenis_belanja=m_sifatpembayaran.id_sifatpembayaran and t_rekap.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_transaksi.id_transaksi=t_uraian.id_transaksi and t_spm.id_unit=m_unit.id_unit and t_rekap.id_jenis_belanja =1 group by t_spm.id_spm;");
            return $q;
        }
    /**
    * Fungsi untuk menampilkan detail data spm berdasarkan id_spm, th_spm 
    * @param id_spm is integer, merupakan id_spm
    * @param id_thspm is integer, merupakan th_spm
    * @return sekumpulan objek     
    */
     function detail_spm2($id_spm,$th_spm)
        {     
            $q=$this->db->query("SELECT t_transaksi.id_transaksi,t_transaksi.th_transaksi, t_rekap.id_rekap,status_spm , m_subunit.nama_subunit, sum(jumlah) as jumlah FROM t_spm, t_rekap, t_uraian, t_transaksi, m_subunit, m_status_spm WHERE t_spm.id_status_spm=m_status_spm.id_status_spm and t_spm.id_spm=t_rekap.id_spm and t_transaksi.id_rekap=t_rekap.id_rekap and t_uraian.id_transaksi=t_transaksi.id_transaksi and t_transaksi.id_subunit = m_subunit.id_subunit and t_spm.id_spm = '$id_spm' and t_spm.th_spm = '$th_spm' group by t_transaksi.id_subunit;");
            return $q;
        }
    /**
    * Fungsi untuk mengecek nomor bg yang belum digunakan berdasarkan nomor_bg
    * @param nomor_bg is integer, merupakan nomor bg   
    * @return result boolean true jika query berhasil    
    */ 
    function cek_adabg($nomor_bg)
        {            
            $this->db->from('m_bg');
            $this->db->where('nomor_bg',$nomor_bg);       
            $this->db->where('status_bg','baru');       
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {       
                return false;
            }
            else    
            {      
                return true;
            }
        }
   /**                                                                         
    * Fungsi untuk menampilkan data history transaksi berdasarkan id_transaksi,th_transaksi
    * @param id_transaksi is integer, merupakan id_transaksi   
    * @param th_transaksi is integer, merupakan nomorth_transaksibg   
    * @return sekumpulan objek    
    */ 
   function history($id_transaksi,$th_transaksi)
        {      
            $this->db->select('*');
            $this->db->from("tb_waktu_transaksi");  
            $this->db->where('tb_waktu_transaksi.id_transaksi',$id_transaksi); 
            $this->db->where('tb_waktu_transaksi.th_transaksi',$th_transaksi); 
            $result = $this->db->get();
            return $result;
        }
   /**                                                                         
    * Fungsi untuk menampilkan nomor bg berdasarkan tahun
    * @param th_sp2d is integer, merupakan tahun sp2d       
    * @return sekumpulan objek    
    */ 
   function ambil_nomor_bg($th_sp2d)
        {  
           $q=$this->db->query("select m_bg.id_bg,m_bg.nomor_bg from m_bg join (SELECT MIN(`id_bg`) AS id_bg FROM (`m_bg`) WHERE `status_bg` = 'baru' ) as nomor on m_bg.id_bg = nomor.id_bg where th_bg='$th_sp2d';");
           return $q->result();
        }
   /**                                                                         
    * Fungsi untuk mengupdate data sp2d berdasarkan id_sp2d,id_bg,th_sp2d
    * @param th_sp2d is integer, merupakan tahun sp2d       
    * @param id_sp2d is integer, merupakan id sp2d       
    * @param id_bg is integer, merupakan id bilyet giro      
    * @return sekumpulan objek    
    */ 
   function buat_bg_sp2d($id_sp2d,$id_bg,$th_sp2d)
        {                  
             $this->db->set('id_bg',$id_bg);
             $this->db->where('id_sp2d',$id_sp2d); 
             $this->db->where('th_sp2d',$th_sp2d); 
             $this->db->update('t_sp2d'); 
        }
   /**                                                                         
    * Fungsi untuk mengupdate data sp2d berdasarkan id_bg,th_sp2d
    * @param th_sp2d is integer, merupakan tahun sp2d 
    * @param id_bg is integer, merupakan id bilyet giro 
    */ 
   function update_bg($id_bg,$th_sp2d)
        {  
             $this->db->set('status_bg','terpakai'); 
             $this->db->where('id_bg',$id_bg); 
             $this->db->where('th_bg',$th_sp2d); 
             $this->db->update('m_bg'); 
        }
	function jumlahUp($id_subunit){
		$this->db->from("t_rekap");  
		$this->db->where('id_subunit',$id_subunit); 
		$this->db->where('id_status_rekap','2');
		$this->db->where('id_jenis_belanja','1');  
		return $this->db->count_all_results();
	   }
   function cari_tot_up_tup($id_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr) 
        {          
           $status_transaksi = array('3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_transaksi');
           $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
           $this->db->where('t_uraian.id_subunit',$id_subunit); 
           $this->db->where('t_uraian.kdoutput',$kdoutput); 
           $this->db->where('t_uraian.kdkomponen',$kdkomponen); 
           $this->db->where('t_uraian.kdakun',$kdakun); 
           $this->db->where('t_uraian.hdr',$hdr); 
           $this->db->where_in('id_status_transaksi', $status_transaksi);   
           $query = $this->db->get(); 
           return $query;
        }
   function cari_tot_up($id_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr) 
        {          
           $status_transaksi = array('3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_transaksi');
           $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
           $this->db->where('t_uraian.id_subunit',$id_subunit); 
           $this->db->where('t_uraian.kdoutput',$kdoutput); 
           $this->db->where('t_uraian.kdkomponen',$kdkomponen); 
           $this->db->where('t_uraian.kdakun',$kdakun); 
           $this->db->where('t_uraian.hdr',$hdr); 
           $this->db->where('t_uraian.id_jenisbelanja',1); 
           $this->db->where_not_in('id_status_transaksi', $status_transaksi);   
           $query = $this->db->get(); 
           return $query;
        }
   function cari_tot_gu_ls($id_subunit) 
        {  
            $th = date('y');        
           $status_kwitansi = array('2','3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(nominal)');
           $this->db->from('t_kwitansi');  
           $this->db->where('t_kwitansi.id_subunit',$id_subunit); 
           $this->db->where('t_kwitansi.th_kwitansi',$th); 
           $this->db->where_in('id_status_kwitansi', $status_kwitansi);   
           $query = $this->db->get(); 
           return $query;
        }
   function get_pagu_rkakl($kode_subunit,$kdoutput,$kdkomponen,$kdakun,$hdr)
        { 
            $this->db->select('sum(jumlah)');
            $this->db->from('t_rkakl');                             
            $this->db->where('kode_unit',$kode_subunit);
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen); 
            $this->db->where('kdakun',$kdakun);
            $this->db->where('id_header',$hdr);
            $result = $this->db->get();
            return $result;
        }
		
	function jumlahTransUp($id_subunit){
		$this->db->from("t_transaksi");  
		$this->db->where('id_subunit',$id_subunit); 
		$this->db->where('id_status_transaksi','4');
		$this->db->where('id_jenis_belanja','1');  
		return $this->db->count_all_results();
	   }
	   
	function jumlahUpVer($id_unit){
		$this->db->from('t_transaksi');
		$this->db->join('m_subunit', 'm_subunit.id_subunit = t_transaksi.id_subunit');
		$this->db->where('id_status_transaksi','2');
		$this->db->where('id_jenis_belanja','1');
		$this->db->where('m_subunit.id_unit',$id_unit); 
		return $this->db->count_all_results();
	   }
	function jumlahUpBk($id_unit){
		$this->db->from('t_rekap');
		$this->db->join('m_subunit', 'm_subunit.id_subunit = t_rekap.id_subunit');
		$this->db->where('id_status_rekap','3');
		$this->db->where('id_jenis_belanja','1');
		$this->db->where('m_subunit.id_unit',$id_unit);  
		return $this->db->count_all_results();
	   }	
	function jumlahSpmUpBk($id_unit){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','1');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		$this->db->where('t_spm.id_unit',$id_unit);
		return $this->db->count_all_results();
	   }
    function all23 ($id_subunit)
        {
            $tahun = date('Y');
            $q=$this->db->query("select t_rkakl.kdoutput,t_rkakl.nmoutput, t_rkakl.kdkomponen,t_rkakl.nmkomponen, t_rkakl.kdakun,t_rkakl.nmakun, hdr, sum(jumlah) as jumlah from t_rkakl join (SELECT kode_subunit from m_subunit where id_subunit=$id_subunit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit where tahun=$tahun group by t_rkakl.kdoutput,t_rkakl.kdkomponen, t_rkakl.kdakun ");
            return $q->result();
        }
    function jum_spp_terdahulu2($id_subunit)
        {
            $q=$this->db->query("select t_uraian.kdoutput, t_uraian.kdkomponen, t_uraian.kdakun,sum(jumlah) as jumlah from t_uraian where id_subunit=$id_subunit and id_jenisbelanja=1 and flag_cek=1 group by t_uraian.kdoutput,t_uraian.kdkomponen, t_uraian.kdakun ") ;
            return $q->result();
        }	
	function jumlahSpmUpPenerima(){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','2');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		return $this->db->count_all_results();
	   }
	function jumlahSpmUpVeri(){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','3');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		return $this->db->count_all_results();
	   }
	function jumlahSpmUpSubag(){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','4');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		return $this->db->count_all_results();
	   }
	function jumlahSpmUpKabag(){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','5');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		return $this->db->count_all_results();
	   }
	function jumlahSpmUpPpsp2d(){
		$this->db->from('t_spm');
		$this->db->join('t_rekap','t_rekap.id_spm = t_spm.id_spm');
		$this->db->where('t_spm.id_status_spm','6');
		$this->db->where('t_rekap.id_jenis_belanja','1');
		return $this->db->count_all_results();
	   }
    function jumtot_yang_sudah_spj($id_subunit)
        {
            $q=$this->db->query("select sum(nominal) from t_kwitansi where id_subunit=$id_subunit ") ;
            return $q;
        }
    function cari_jumlah($id_unit)
        {
            $q=$this->db->query("select t_max_up.id_subunit,nilai_max from t_max_up join (SELECT * FROM m_subunit where id_unit='$id_unit') as apa on t_max_up.id_subunit=apa.id_subunit") ;
            return $q->result();
        }
    function cari_pagu_real($id_unit)
        {
            $q=$this->db->query("select subunit as id_subunit,pagu_real from t_pagu_real join (SELECT * FROM m_subunit where id_unit='$id_unit') as apa on t_pagu_real.subunit=apa.id_subunit") ;
            return $q->result();
        }
    function cari_jumlah_sesuai_subunit($subunit)
        {
            $q=$this->db->query("select * from t_max_up, m_subunit where m_subunit.id_subunit=t_max_up.id_subunit and t_max_up.id_subunit=$subunit") ;
            return $q;
        }	
    function jum_tot_up($id_subunit) 
        {          
           $status_transaksi = array('3','4','5','6','7','8','9','10', '11', '12','13','14','15','16','17');  
           $this->db->select('sum(jumlah)');
           $this->db->from('t_transaksi');
           $this->db->join("t_uraian",'t_transaksi.id_transaksi=t_uraian.id_transaksi','inner');
           $this->db->where('t_uraian.id_subunit',$id_subunit);
           $this->db->where('t_uraian.id_jenisbelanja',1); 
           $this->db->where_not_in('id_status_transaksi', 17);   
           $query = $this->db->get(); 
           return $query;
        }
    function simpan_maks($max_up)
        {
            $tgl_skrg = date("Y-m-d");  
            $tahun = date("Y");  
            $id_subunit = $this->input->post('id_subunit');
            //$id_user = $this->session->userdata('id_user');
            $nama_user= $this->session->userdata('username'); 
            $w = $this->db->query("insert into t_max_up(id_subunit,tahun, nilai_max,created_date,created_by) values('$id_subunit','$tahun','$max_up','$tgl_skrg','$nama_user')");
            }
    function update_dummy_max($max_up,$subunit)
    {                                                                         
         //$tgl_skrg = date("Y-m-d");
         $nama_user= $this->session->userdata('username');      
         $this->db->set('nilai_max',$max_up); 
         $this->db->set('created_by',$nama_user); 
         $this->db->where('id_subunit',$subunit); 
         $this->db->update('t_max_up');
      }
    function spp_up_mp($id_subunit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(jumlah) from t_sp2d,t_spm,t_rekap,t_transaksi,t_uraian where t_sp2d.id_spm=t_spm.id_spm and t_spm.id_spm=t_rekap.id_spm and t_rekap.id_rekap=t_transaksi.id_rekap and t_transaksi.id_transaksi=t_uraian.id_uraian and t_uraian.id_subunit=$id_subunit and t_uraian.id_jenisbelanja=1 and t_spm.id_status_spm=8 and t_spm.th_spm=$th  ;");
            return $q;
        }
    function spp_up_mp_kini($id_subunit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(jumlah) from t_sp2d,t_spm,t_rekap,t_transaksi,t_uraian where t_sp2d.id_spm=t_spm.id_spm and t_spm.id_spm=t_rekap.id_spm and t_rekap.id_rekap=t_transaksi.id_rekap and t_transaksi.id_transaksi=t_uraian.id_uraian and t_uraian.id_subunit=$id_subunit and t_uraian.id_jenisbelanja=1 and t_spm.id_status_spm <> 8 and t_spm.th_spm=$th  ;");
            return $q;
        }
    function spp_tup_mp($id_subunit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(jumlah) from t_sp2d,t_spm,t_spp,t_rekap,t_transaksi,t_uraian where t_sp2d.id_spm=t_spm.id_spm and t_spm.id_spp=t_spp.id_spp and t_spp.id_spp=t_rekap.id_spp and t_rekap.id_rekap=t_transaksi.id_rekap and t_transaksi.id_transaksi=t_uraian.id_uraian and t_uraian.id_subunit=$id_subunit and t_uraian.id_jenisbelanja=2 and t_spm.id_status_spm=8 and t_spm.th_spm=$th  ;");
            return $q;
        }
    function spp_gu_mp($id_subunit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(nominal) from t_sp2d,t_spm,t_spp,t_sptb,t_kwitansi where t_sp2d.id_spm=t_spm.id_spm and t_spm.id_spp=t_spp.id_spp and t_spp.id_sptb=t_sptb.id_sptb and t_sptb.id_sptb=t_kwitansi.id_sptb and t_kwitansi.id_subunit=$id_subunit and t_kwitansi.id_sifatpembayaran=3 and t_spm.id_status_spm=8 and t_spm.th_spm=$th  ;");
            return $q;
        }
    function spp_ls_mp($id_subunit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(nominal) from t_sp2d,t_spm,t_spp,t_sptb,t_kwitansi where t_sp2d.id_spm=t_spm.id_spm and t_spm.id_spp=t_spp.id_spp and t_spp.id_sptb=t_sptb.id_sptb and t_sptb.id_sptb=t_kwitansi.id_sptb and t_kwitansi.id_subunit=$id_subunit and t_kwitansi.id_sifatpembayaran=4 and t_spm.id_status_spm=8 and t_spm.th_spm=$th  ;");
            return $q;
        }
    function simpan_mp()
        {
            $tahun = date("Y"); 
            $bulan = date("m"); 
            //$jam_skrg = date("H:i:s");
            $id_subunit = $this->session->userdata('id_subunit');
            $pagu_pengeluaran = $this->input->post('pagu_pengeluaran');
            $alokasi_pnbp = $this->input->post('alokasi_pnbp');
            $pagu_up = $this->input->post('pagu_up');
            $pagu_tup = $this->input->post('pagu_tup');
            $pagu_gup = $this->input->post('pagu_gup');
            $pagu_ls = $this->input->post('pagu_ls');
            $spp_kini = $this->input->post('spp_kini');
            $no_dipa = $this->input->post('no_dipa');
            $tgl_dipa = $this->input->post('tgl_dipa');
            $tmb_pnbp = $this->input->post('tmb_pnbp');
            $w = $this->db->query("insert into t_mp(bulan_mp,tahun_mp,id_subunit, no_dipa, tgl_dipa, pagu_pengeluaran, alokasi_pnbp,tmb_alokasi_pnbp, spp_up, spp_tup, spp_gu, spp_ls, spp_ini) values('$bulan','$tahun','$id_subunit','$no_dipa','$tgl_dipa','$pagu_pengeluaran','$alokasi_pnbp','$tmb_pnbp','$pagu_up','$pagu_tup','$pagu_gup','$pagu_ls','$spp_kini')");
            }
    function cek_ada_mp($id_subunit)
        {    
            $month = date('m'); 
            $this->db->select('*');
            $this->db->from('t_mp');     
            $this->db->where('bulan_mp',$month);     
            $this->db->where('id_subunit',$id_subunit);
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {     
                return true;
            }
        }
    function mp_unit($id_unit)
        {   
            $bulan= date('m'); 
            $tahun = date('Y'); 
            $qf=$this->db->query("select t_mp.id_subunit, sum(pagu_pengeluaran), sum(alokasi_pnbp), sum(tmb_alokasi_pnbp), sum(spp_up), sum(spp_tup), sum(spp_gu), sum(spp_ls), sum(spp_ini)  from t_mp join ( SELECT id_subunit FROM m_subunit WHERE id_unit=$id_unit ) as apa on t_mp.id_subunit=apa.id_subunit where bulan_mp=$bulan and tahun_mp=$tahun;");
            return $qf;
        }
    function ada_di_mp($id_subunit,$bulan)
    {
            $this->db->select('*'); 
            $this->db->from("t_mp");      
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('bulan_mp',$bulan);
            $this->db->group_by('id_mp'); 
            $result = $this->db->get();
            return $result->num_rows() ;
    }
    function spp_up_mp_kini_unit($id_unit)
        {
            //$id_status_rekap = array('1','2','3','4','5'); 
            $th = date("y");  
            $q=$this->db->query("select sum(jumlah) from t_spm,t_rekap,t_transaksi,t_uraian join (select id_subunit from m_subunit where id_unit=$id_unit) as apa on apa.id_subunit=t_uraian.id_subunit where t_rekap.id_rekap=t_transaksi.id_rekap and t_transaksi.id_transaksi=t_uraian.id_uraian and t_uraian.id_jenisbelanja=1 and id_status_rekap IN (1,2,3,4,5);");
            return $q;
        }
    function spp_tup_mp_unit($id_unit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(jumlah) from t_spm,t_rekap,t_transaksi,t_uraian join (select id_subunit from m_subunit where id_unit=$id_unit) as apa on apa.id_subunit=t_uraian.id_subunit where t_rekap.id_rekap=t_transaksi.id_rekap and t_transaksi.id_transaksi=t_uraian.id_uraian and t_uraian.id_jenisbelanja=2 and id_status_rekap IN (1,2,3,4,5) ;");
            return $q;
        }
    function spp_gu_mp_unit($id_unit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(nominal) from t_kwitansi join (select id_subunit from m_subunit where id_unit=$id_unit) as apa on apa.id_subunit=t_kwitansi.id_subunit where id_status_kwitansi IN (0,1,2,3,4,5,6,7,8) ;");
            return $q;
        }
    function spp_ls_mp_unit($id_unit)
        {
            $th = date("y");  
            $q=$this->db->query("select sum(nominal) from t_kwitansi join (select id_subunit from m_subunit where id_unit=$id_unit) as apa on apa.id_subunit=t_kwitansi.id_subunit where id_status_kwitansi IN (0,1,2,3,4,5,6,7,8);");
            return $q;
        }
    function tot_pagu_realisasi($id_subunit) 
        {          
           $this->db->select('*');
           $this->db->from('t_pagu_real');
           $this->db->where('subunit',$id_subunit);
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->pagu_real))
		   {return $result->pagu_real;}
		   else
		   {return 0;}
		   
		   
        }
    function maksimum_up($id_subunit) 
        {          
           $this->db->select('*');
           $this->db->from('t_max_up');
           $this->db->where('id_subunit',$id_subunit);
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->nilai_max))
		   {return $result->nilai_max;}
		   else
		   {return 0;}
        }
    function spm_update_print_sper($id_spm,$th_spm){           
             $this->db->set('print_sper',1); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
    } 
    function spm_update_print_rekap($id_spm,$th_spm){           
             $this->db->set('print_rekap',1); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
    }
    function spm_update_print_speng($id_spm,$th_spm){           
             $this->db->set('print_speng',1); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
    }
    function update_print_spm($id_spm,$th_spm){           
             $this->db->set('jum_print',1); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
    }
    function update_print_kelengkapan_spm($id_spm,$th_spm){           
             $this->db->set('jum_kelengkapan',1); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->update('t_spm');
    }
    function recheck_kelengkapan($id,$th)
         {
            $this->db->select('*');
            $this->db->from('t_spm');
            $this->db->where('id_spm',$id); 
            $this->db->where('th_spm',$th);
            $this->db->where('jum_print',0); 
            $this->db->or_where('print_rekap',0);
            $this->db->or_where('print_sper',0);
            $this->db->or_where('print_speng',0); 
            $result = $this->db->get();
            return $result->num_rows();
        }
    function cek_print_kel_spm($id,$th)
         {
            $this->db->select('*');
            $this->db->from('t_spm');
            $this->db->where('id_spm',$id); 
            $this->db->where('th_spm',$th);
            $this->db->where('jum_kelengkapan',0);  
            $result = $this->db->get();
            return $result->num_rows();
        }
	function detail_bas($id_unit)
         {
            $this->db->select('*');
            $this->db->from('m_bas');
            $this->db->where('id_unit',$id_unit); 
            $result = $this->db->get();
            return $result->row();
        }
           					
} 