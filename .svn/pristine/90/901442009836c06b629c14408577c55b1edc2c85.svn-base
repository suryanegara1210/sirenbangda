<?php /**
* @brief Model Class yang berhubungan dengan Sub Bisnis proses untuk belanja langsung (LS) dalam mengelola model proses bisnis belanja
*
* Class Model ini digunakan untuk mengelola Sub Bisnis proses belanja langsung
* Long Description
* @Author I Wayan Sudharmika
* @Author I Putu Praba Santika
* @Author Putu Ari Arjana
* @Author I Wayan Shandyasa
* @Author Dwi Adi Jaya Antika Putra
* @Package
*/

class m_ls extends CI_Model {
	   
    public function __construct()
    {
        parent::__construct();
        $this->table_name = 't_kwitansi';
    }

/**
* Fungsi untuk aktifasi dari autocomplete dari daftar pegawai
* @param keyword is char, merupakan inputan kata dari user 
* @return query data array 
*/
function lookup($keyword){
        $id_unit = $this->session->userdata('id_unit');
		$this->db->select('*');
        $this->db->from("m_pegawai");  
		$this->db->join("m_unit",'m_pegawai.kode_unit=m_unit.kode_unit','inner');         
        $this->db->like('m_pegawai.nama_pegawai',$keyword,'after');
        $this->db->where('m_unit.id_unit',$id_unit); 
        $query = $this->db->get();    
        return $query->result();
}
/**
* Fungsi untuk menampilkan nama dari unit sesuai dengan session id unit user
* @return list of object 
*/
function get_nama_unit(){
		$id_unit = $this->session->userdata('id_unit');
		$this->db->select('nama_unit');
		$this->db->from('m_unit');
		$this->db->where('id_unit',$id_unit); 

		return $this->db->get(); 
	}
/**
* Fungsi untuk mendapatkan nama output
* @return result data array 
*/
 function getOutputList($jns_kwitansi)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('kdoutput','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Output-';
                $result[$row->kdoutput]= ("$row->kdoutput - $row->nmoutput");
            }
            return $result;
        }
/**
* Fungsi untuk mendapatkan nama komponen list
* @return result data array 
*/ 
function getKomponenList($jns_kwitansi)
        {
            $kdoutput = $this->input->post('kdoutput');
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Komponen-';
                $result[$row->kdkomponen]= ("$row->kdkomponen - $row->nmkomponen");
            }
            return $result; 
        }   
/**
* Fungsi untuk mendapatkan data sub komponen
* @return list of object
*/	
 function getSubKomponenList($jns_kwitansi,$kdoutput,$kdkomponen)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
			$this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen IS NOT NULL');
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
			
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Sub Komponen-';
                $result[$row->kdskomponen]= ("$row->kdskomponen - $row->nmskomponen");
            }
            
            return $result; 
        } 
		
		/**
* Fungsi untuk menghitung data sub komponen
* @return list of object
*/	
 function getCountSubKomponen($jns_kwitansi,$kdoutput,$kdkomponen)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
			$this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('type_kwitansi',$jns_kwitansi); 
		    $this->db->where('kdskomponen IS NOT NULL'); 
            $this->db->order_by('nmkomponen','ASC');
			return $this->db->count_all_results();
			
        } 
/**
* Fungsi untuk mendapatkan nama akun list
* @return result data array 
*/ 		
   function getAkunList($jns_kwitansi,$kdoutput,$kdkomponen)
       {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('kdakun','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Akun-';
                $result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
            }
            
            return $result;
        }

/**
* Fungsi untuk mendapatkan data akun
* @return list of object
*/	        
    function getAkunList_test($jns_kwitansi,$kdoutput,$kdkomponen,$kdskomponen)
       {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen',$kdskomponen);
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('kdakun','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Akun-';
                $result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
            }
            
            return $result;
        }

/**
* Fungsi untuk mendapatkan nama header list
* @param kdakun is integer untuk inputan kode akun dari user
* @param kdkomponen is integer untuk inputan kode komponen dari user
* @param kdoutput is integer untuk inputan kode output dari user
* @return result data array 
*/ 			
    function getHeaderList($kdakun, $kdkomponen,$kdoutput)
        {
            
            $kode_unit = $this->session->userdata('kode_subunit');
            $id_akun = $this->input->post('id_akun');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_unit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdakun',$kdakun); 
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            
            { 
                $result[0]= '-Pilih Header-';
                $result[$row->id_header]= ("$row->hdr");
            }
            
            return $result;
        } 

/**
* Fungsi untuk mendapatkan nama list golongan
* @return result data array 
*/ 
function getGolongan() {
            $result = array();
            $this->db->select('*');
            $this->db->from('tb_golongan');
            $this->db->order_by('id_golongan','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '<<-Pilih Output->>';
                $result[$row->id_golongan]= ("$row->golongan");
            }
            
            return $result;
        }
/**
* Fungsi untuk mendapatkan nama list jenis pajak
* @return result data array 
*/ 
	function get_jenis_pajak()
        {
            $result = array();
            $this->db->select('*');
            $this->db->from('tb_pajak');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Jenis Pajak-';
                $result[$row->id_pajak]= (" [PPN : $row->ppn % ] - [PPH : $row->pph% ] - $row->ket");
            }
            
            return $result;
        }
/**
* Fungsi untuk mendapatkan nama list nilai pajak
* @param jns_pajak is integer untuk inputan untuk mencari jenis pajak
* @return list of object
*/ 
	function get_nilai_pajak($jns_pajak)
        {
            $this->db->select('*');
            $this->db->from('tb_pajak');
			$this->db->where('id_pajak',$jns_pajak);
            return $this->db->get();
        }

/**
* Fungsi untuk mendapatkan seluruh nama list
* @param kdakun is integer untuk inputan kode akun dari user
* @param kdkomponen is integer untuk inputan kode komponen dari user
* @param kdoutput is integer untuk inputan kode output dari user
* @param kode_subunit is integer untuk menentukan nama list dari kode subunit
* @param hdr is integer untuk inputan header dari user
* @return list of object
*/ 	
function getnamaList($kode_subunit,$kdoutput,$komponen,$akun,$header)
        { 
		$q=$this->db->query("  SELECT * FROM (`t_rkakl`) WHERE `kdakun` = '$akun' AND `kdoutput` = '$kdoutput' AND `kdkomponen` = '$komponen' AND `id_header` = '$header' AND kdskomponen IS NULL GROUP BY kdgiat");              
		return $q;
        }
function getnamaListSub($kode_subunit,$kdoutput,$komponen,$kdskomponen,$akun,$header)
        { 
		$q=$this->db->query("  SELECT * FROM (`t_rkakl`) WHERE `kdakun` = '$akun' AND `kdoutput` = '$kdoutput' AND `kdkomponen` = '$komponen' AND `id_header` = '$header' AND kdskomponen = '$kdskomponen' GROUP BY kdgiat");              
		return $q;
        }
/**
* Fungsi untuk menyimppan data kwitansi honor yg telah dibuat
* @param tgl_kwitansi is date untuk inputan tanggal kwitansi dari user
* @param tpt_kwitansi is varchar untuk inputan tempat kwitansi dari user
* @param output_kode is varchar untuk inputan kode output dari user
* @param komponen_kode is varchar untuk inputan kode komponen dari user
* @param akun_kode is varchar untuk inputan kode akun dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user	
* @param ket_kwitansi is varchar untuk inputan keterangan kwitansi dari user
* @param pengambil is varchar untuk inputan nama pengambil dari user
* @param nip_pengambil is varchar untuk inputan nip pengambil dari user
* @param penerima is varchar untuk inputan nama penerima dari user				
* @param nip_penerima is varchar untuk inputan nip penerima dari user
* @param ket_sptb is text untuk inputan keterangan surat pertanggung jawaban belanja dari user
* @param no_sk is varchar untuk inputan nomor surat keputusan dari user
* @param tgl_sk is date untuk inputan tanggal diberlakukannya SK dari user
* @param kop_honor is varchar untuk inputan kop honor dari user
* @param jns_honor is integer untuk inputan jenis honor dari user
* @param namazz is varchar untuk inputan nama user dari user
* @param jabatan is varchar untuk inputan jabatan dari user
* @param golongan is varchar untuk inputan golongan user
* @param kd_mk is varchar untuk inputan kode mata kuliah dari user
* @param m_kul is varchar untuk inputan nama mata kuliah dari user
* @param kls is varchar untuk inputan kelas mata kuliah dari user
* @param jum_org is integer untuk inputan jumlah orang dari user
* @param h_naskah is text untuk inputan naskah dari user
* @param nama_mhs is varchar untuk inputan nama_mahasiswa dari user
* @param nim_mhs is varchar untuk inputan nim mahasiswa dari user 
* @param jum_hadir is integer untuk inputan jumlah kehadiran dari user
* @param jum_bln is integer untuk inputan jumlah bulan dari user
* @param ptkp is varchar untuk inputan kode mata kuliah dari user
* @param pkp is varchar untuk inputan pkp dari user
* @param jum_hari is integer untuk jumlah hari dari user
* @param bruto is integer untuk inputan bruto dari user
*/

function simpan_honor(  $tgl_kwitansi, $tpt_kwitansi, 
						$kdoutput, $kdkomponen,$kdskomponen, $kdakun, $hdr, 
						$nmoutput, $nmkomponen,$nmsubkomponen, $nmakun, $nmheader, 				
						$ket_kwitansi, $pengambil, $nip_pengambil, $penerima,
						$nip_penerima, $ket_sptb, $no_sk, $tgl_sk, $kop_honor, $jns_honor,  
						$namazz, $jabatan, $golongan, $kd_mk, $m_kul, $kls,
						$jml_org, $h_naskah, $nama_mhs, $nim_mhs,     
						$jml_hadir, $jml_bln, $ptkp, $pkp, $jml_hari, $bruto,$kode_bas 
					 )
{
	 	$subunit = $this->session->userdata('id_subunit');
		$unit_kerja = $this->session->userdata('id_unit');

		$this->db->trans_strict(FALSE);
		$this->db->trans_start();
        $id=$this->nomer->no_baru2('t_kwitansi','kwitansi','id_subunit',$subunit, date('y')); 
		
		 $this->db->set('id_sifatpembayaran','4');
		 $this->db->set('jenis_kwitansi','1'); 
		 $this->db->set('id_unit',$unit_kerja); 
		 $this->db->set('tgl_kwitansi',$tgl_kwitansi);
		 
		 $this->db->set('kegiatan','4078');
         $this->db->set('kdoutput',$kdoutput);
         $this->db->set('kdkomponen',$kdkomponen);
		 $this->db->set('kdskomponen',$kdskomponen);
         $this->db->set('kdakun',$kdakun);
         $this->db->set('hdr',$hdr);
		 
		 $this->db->set('nmoutput',$nmoutput);
         $this->db->set('nmkomponen',$nmkomponen);
		 $this->db->set('nmskomponen',$nmsubkomponen);
		 $this->db->set('nmakun',$nmakun);
		 $this->db->set('nmheader',$nmheader);
		 
		 $this->db->set('ket_kwitansi',$ket_kwitansi);
		 $this->db->set('pengambil',$pengambil);
		 $this->db->set('nip_pengambil',$nip_pengambil);
		 $this->db->set('penerima',$penerima);
		 $this->db->set('tpt_kwitansi',$tpt_kwitansi);	
		 
		 $this->db->set('ket_sptb',$ket_sptb);
		 $this->db->set('nip_penerima',$nip_penerima);
		 $this->db->set('no_sk_rektor',$no_sk);
		 $this->db->set('tgl_sk_rektor',$tgl_sk);
		 $this->db->set('kop_honor',$kop_honor);
		 $this->db->set('akun_kode',$kode_bas);
			
			$this->db->where('id_kwitansi', $id['id_kwitansi']);
			$this->db->where('th_kwitansi', $id['th_kwitansi']);
			$this->db->where('id_subunit', $id['id_subunit']);
			$this->db->update('t_kwitansi');
		
			//=== INSERT DATA KELENGKAAN ===
			$this->db->query("INSERT into t_verunit (id_kwitansi, th_kwitansi, id_ver, flag, jenis_kwitansi, id_sifatpembayaran)
								SELECT	".$id['id_kwitansi'].",".$id['th_kwitansi'].", id_ver, 0, 1, 4  
								FROM m_verunit, t_kwitansi
								WHERE m_verunit.id_sifat_pembayaran=t_kwitansi.id_sifatpembayaran
								AND m_verunit.jenis_kwitansi=t_kwitansi.jenis_kwitansi
								AND t_kwitansi.id_kwitansi=".$id['id_kwitansi']."
								AND t_kwitansi.th_kwitansi=".$id['th_kwitansi']
								);

		
	if(isset($namazz) && $namazz[0]!=''){
		$nominal=0;
		$pajak=0;
            foreach ($namazz as $no=>$nam){
				
					$this->db->select("pph_honor");
					$this->db->from('tb_pajak_golongan');
					$this->db->join("tb_golongan",'tb_golongan.id_golongan=tb_pajak_golongan.id_golongan','inner');   
					$this->db->where('tb_golongan.golongan', $golongan[$no]);
					$result = $this->db->get();
					$row = $result->row();	
				$pphx = $row->pph_honor;		
									

				if($jns_honor=='1')
				{
					$jml_bruto=$jml_bln[$no]*$bruto[$no];
					$pph=$pphx*$jml_bruto/100;
					}
				 else
				if($jns_honor=='2')
				{
					$jml_bruto=$jml_hadir[$no]*$bruto[$no];
					$pph=$pphx*$jml_bruto/100;
					}
				 else
				if($jns_honor=='3')
				{
					$jml_bruto=$jml_org[$no]*$bruto[$no];
					$pph=$pphx*($jml_bruto + $h_naskah[$no])/100;
					}
				 else
				if($jns_honor=='4' or $jns_honor=='7' or $jns_honor=='8' or $jns_honor=='5')
				{
					$jml_bruto=$bruto[$no];
					$pph=$pphx*($jml_bruto)/100;
					}
				 else
				if($jns_honor=='6')
				{
					$jml_bruto=$jml_hari[$no]*$bruto[$no];
					$pph=$pphx*$jml_bruto/100;
					}
				//=====================================================
				//=====================================================
				if($jns_honor=='3')
				{
					$nominal=($nominal + $jml_bruto + $h_naskah[$no]);
					}
					else
                {
					$nominal=($nominal + $jml_bruto);
				}
				
				$pajak=($pajak + $pph);

				$id_honor = $this->nomer->no_baru('tb_honor_gu','honor','id_subunit',$subunit, date('y'));
                 
				 $this->db->set('id_kwitansi',$id['id_kwitansi']);
                 $this->db->set('jns_honor',$jns_honor);
                 $this->db->set('nama',$nam);
                 $this->db->set('jabatan',$jabatan[$no]);
                 $this->db->set('golongan',$golongan[$no]);
                 $this->db->set('nama_mhs',$nama_mhs[$no]);
				 $this->db->set('nim_mhs',$nim_mhs[$no]);
                 $this->db->set('kd_mk',$kd_mk[$no]);
				 $this->db->set('m_kul',$m_kul[$no]);
                 $this->db->set('kls',$kls[$no]);
                 $this->db->set('jum_hadir',$jml_hadir[$no]);
                 $this->db->set('jum_org',$jml_org[$no]);
                 $this->db->set('jum_hari',$jml_hari[$no]);
                 $this->db->set('jum_bln',$jml_bln[$no]);                 
				 $this->db->set('honor_naskah',$h_naskah[$no]);
				 $this->db->set('bruto',$bruto[$no]);
				 $this->db->set('jum_bruto',$jml_bruto);
                 $this->db->set('pph',$pph);
                 $this->db->set('ptkp',$ptkp[$no]);
                 $this->db->set('pkp',$pkp[$no]);
					
					$this->db->where('id_honor', $id_honor['id_honor']);
					$this->db->where('th_honor', $id_honor['th_honor']);
					$this->db->where('id_subunit', $id_honor['id_subunit']);
					$this->db->update('tb_honor_gu'); 	
					
					//==============================
					$this->db->set('nominal',$nominal);
					$this->db->set('pph',$pajak);
					$this->db->where('id_kwitansi', $id['id_kwitansi']);
					$this->db->where('th_kwitansi', $id['th_kwitansi']);
					$this->db->where('id_subunit', $id['id_subunit']);
					$this->db->update('t_kwitansi');
						   
            }
	}
	
	
		$this->db->trans_complete();
		if ($this->db->trans_status() === FALSE){
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Gagal di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/buat_kwitansi'>";
		}else{
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Berhasil di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/daftar_kwitansi_ls'>";
		}	
		
}

/**
* Fungsi untuk menyimppan data kwitansi kontraktual modal bansos yg telah dibuat
* @param jenis_kwitansi is integer untuk inputan jenis kwitansi dari user
* @param tgl_kwitansi is date untuk inputan tanggal kwitansi dari user
* @param tpt_kwitansi is varchar untuk inputan tempat kwitansi dari user
* @param kdoutput is varchar untuk kode output kwitansi dari user
* @param kdakun is varchar untuk inputan kode akun dari user
* @param kdkomponen is varchar untuk inputan kode komponen dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user	
* @param ket_kwitansi is varchar untuk inputan keterangan kwitansi dari user
* @param pengambil is varchar untuk inputan pengambil dari user
* @param nip_pengambil is varchar untuk inputan nip pengambil dari user
* @param penerima is varchar untuk inputan penerima dari user				
* @param nominal is varchar untuk inputan nominal angka dari user
* @param jns_pajak is varchar untuk inputan jenis pajak dari user
* @param pph is integer untuk inputan pajak penghasilan dari user
* @param ppn is integer untuk inputan pajak pertambahan nilai dari user
*/
function simpan_kontraktual_modal_bansos(	$jenis_kwitansi, $tgl_kwitansi, $tpt_kwitansi, 
											$kdoutput, $kdkomponen,$kdskomponen, $kdakun, $hdr, 
											$nmoutput, $nmkomponen,$nmsubkomponen, $nmakun, $nmheader, 					
											$ket_kwitansi, $pengambil, $nip_pengambil, $penerima, 
											$id_subunit_rincian, $nama_barang, $jumlah, $harga, 
											$nominal, $jns_pajak, $pph, $ppn, $kode_bas )
{
	 	$subunit = $this->session->userdata('id_subunit');
		$unit_kerja = $this->session->userdata('id_unit');

		$this->db->trans_strict(FALSE);
		$this->db->trans_start();
        $id=$this->nomer->no_baru2('t_kwitansi','kwitansi','id_subunit',$subunit, date('y')); 
		 
		  	if($jenis_kwitansi=='HONOR'){
				 $jenis_kwitansi = 1;
			}else if($jenis_kwitansi=='KONTRAK'){
				 $jenis_kwitansi = 2;
			}else if($jenis_kwitansi=='MODAL'){
				 $jenis_kwitansi = 3;
			}else if($jenis_kwitansi=='BANSOS'){
				 $jenis_kwitansi = 4;
			}else if($jenis_kwitansi=='PERJADIN'){
				$jenis_kwitansi = 5;
			} 	
		
		 $this->db->set('id_sifatpembayaran','4');
		 $this->db->set('jenis_kwitansi',$jenis_kwitansi); 
		 $this->db->set('id_unit',$unit_kerja); 
		 $this->db->set('tgl_kwitansi',$tgl_kwitansi);
		 
		 $this->db->set('kegiatan','4078');
         $this->db->set('kdoutput',$kdoutput);
         $this->db->set('kdkomponen',$kdkomponen);
		 $this->db->set('kdskomponen',$kdskomponen);
         $this->db->set('kdakun',$kdakun);
         $this->db->set('hdr',$hdr);
		 
		 $this->db->set('nmoutput',$nmoutput);
         $this->db->set('nmkomponen',$nmkomponen);
		 $this->db->set('nmskomponen',$nmsubkomponen);
		 $this->db->set('nmakun',$nmakun);
		 $this->db->set('nmheader',$nmheader);

		 $this->db->set('nominal',$nominal);
         $this->db->set('id_pajak',$jns_pajak);
		 $this->db->set('ppn',$ppn);
		 $this->db->set('pph',$pph);
		 
		 $this->db->set('ket_kwitansi',$ket_kwitansi);
		 $this->db->set('pengambil',$pengambil);
		 $this->db->set('nip_pengambil',$nip_pengambil);
		 $this->db->set('penerima',$penerima);
 		 $this->db->set('tpt_kwitansi',$tpt_kwitansi);	
		 $this->db->set('akun_kode',$kode_bas);
			
			$this->db->where('id_kwitansi', $id['id_kwitansi']);
			$this->db->where('th_kwitansi', $id['th_kwitansi']);
			$this->db->where('id_subunit', $id['id_subunit']);
			$this->db->update('t_kwitansi');
				 
			//=== INSERT DATA KELENGKAAN ===
			$this->db->query("INSERT into t_verunit (id_kwitansi, th_kwitansi, id_ver, flag, jenis_kwitansi, id_sifatpembayaran)
							  SELECT	".$id['id_kwitansi'].",".$id['th_kwitansi'].", id_ver, 0, $jenis_kwitansi, 4  
							  FROM m_verunit, t_kwitansi
						      WHERE m_verunit.id_sifat_pembayaran=t_kwitansi.id_sifatpembayaran
							  AND m_verunit.jenis_kwitansi=t_kwitansi.jenis_kwitansi
							  AND t_kwitansi.id_kwitansi=".$id['id_kwitansi']."
						      AND t_kwitansi.th_kwitansi=".$id['th_kwitansi']
							);
		
			
		$this->db->trans_complete();
		if ($this->db->trans_status() === FALSE){
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Gagal di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/buat_kwitansi'>";
		}else{
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Berhasil di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/daftar_kwitansi_ls'>";
		}	
		
}
/**
* Fungsi untuk menyimppan data kwitansi kontrak yg telah dibuat
* @param jenis_kwitansi is integer untuk inputan jenis kwitansi dari user
* @param tgl_kwitansi is date untuk inputan tanggal kwitansi dari user
* @param tpt_kwitansi is varchar untuk inputan tempat kwitansi dari user
* @param kdoutput is varchar untuk kode output kwitansi dari user
* @param kdakun is varchar untuk inputan kode akun dari user
* @param kdkomponen is varchar untuk inputan kode komponen dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user	
* @param ket_kwitansi is varchar untuk inputan keterangan kwitansi dari user
* @param pengambil is varchar untuk inputan pengambil dari user
* @param nip_pengambil is varchar untuk inputan nip pengambil dari user
* @param penerima is varchar untuk inputan penerima dari user
* @param id_subunit_rincian is integer untuk inputan penerima dari user
* @param nama_barang is varchar untuk inputan penerima dari user
* @param jumlah is integer untuk inputan jumlah dari user
* @param harga is integer untuk inputan harga dari user
* @param nominal is integer untuk inputan nominal dari user
* @param jns_pajak is varchar untuk inputan jns_pajak dari user
* @param pph is integer untuk inputan pajak penghasilan dari user
* @param ppn is integer untuk inputan pajak pertambahan nilai dari user
*/

function simpan_kontrak(	$jenis_kwitansi, $tgl_kwitansi, $tpt_kwitansi, 
							$kdoutput, $kdkomponen, $kdakun, $hdr, 
							$nmoutput, $nmkomponen, $nmakun, $nmheader, 				
							$ket_kwitansi, $pengambil, $nip_pengambil, $penerima, 
							$id_subunit_rincian, $nama_barang, $jumlah, $harga, 
							$nominal, $jns_pajak, $pph, $ppn, $kode_bas)
{
	 	$subunit = $this->session->userdata('id_subunit');
		$unit_kerja = $this->session->userdata('id_unit');

		$this->db->trans_strict(FALSE);
		$this->db->trans_start();
        $id=$this->nomer->no_baru2('t_kwitansi','kwitansi','id_subunit',$subunit, date('y')); 
		
		 $this->db->set('id_sifatpembayaran','4');
		 $this->db->set('jenis_kwitansi','2'); 
		 $this->db->set('id_unit',$unit_kerja); 
		 $this->db->set('tgl_kwitansi',$tgl_kwitansi);
		 
		 $this->db->set('kegiatan','4078');
         $this->db->set('kdoutput',$kdoutput);
         $this->db->set('kdkomponen',$kdkomponen);
         $this->db->set('kdakun',$kdakun);
         $this->db->set('hdr',$hdr);
		 
		 $this->db->set('nmoutput',$nmoutput);
         $this->db->set('nmkomponen',$nmkomponen);
		 $this->db->set('nmakun',$nmakun);
		 $this->db->set('nmheader',$nmheader);

		 $this->db->set('nominal',$nominal);
         $this->db->set('id_pajak',$jns_pajak);
		 $this->db->set('ppn',$ppn);
		 $this->db->set('pph',$pph);

		 $this->db->set('ket_kwitansi',$ket_kwitansi);
		 $this->db->set('pengambil',$pengambil);
		 $this->db->set('nip_pengambil',$nip_pengambil);
		 $this->db->set('penerima',$penerima);
 		 $this->db->set('tpt_kwitansi',$tpt_kwitansi);	
		 $this->db->set('akun_kode',$kode_bas);
			
			$this->db->where('id_kwitansi', $id['id_kwitansi']);
			$this->db->where('th_kwitansi', $id['th_kwitansi']);
			$this->db->where('id_subunit', $id['id_subunit']);
			$this->db->update('t_kwitansi');
			
		
	if(isset($id_subunit_rincian) && $id_subunit_rincian[0]!=''){
		$uang=0;
		$pajak=0;
            foreach ($id_subunit_rincian as $no=>$nam){	
				$total[$no]=$jumlah[$no]*$harga[$no];					
				$uang=($uang + $total[$no]);
				
				$id_rincian = $this->nomer->no_baru('tb_rincian_kontrak','rincian_kontrak','id_subunit',$subunit, date('y'));
				
					 $this->db->set('id_kwitansi',$id['id_kwitansi']);
					 $this->db->set('th_kwitansi',$id['th_kwitansi']);
					 $this->db->set('id_subunit',$id_subunit_rincian[$no]);
					 $this->db->set('nama_barang',$nama_barang[$no]);
					 $this->db->set('jumlah', $jumlah[$no]);
					 $this->db->set('harga', $total[$no]);
						
						$this->db->where('id_rincian_kontrak', $id_rincian['id_rincian_kontrak']);
						$this->db->update('tb_rincian_kontrak'); 		   
					
					//==============================
					$this->db->set('nominal',$uang);
					$this->db->where('id_kwitansi', $id['id_kwitansi']);
					$this->db->where('th_kwitansi', $id['th_kwitansi']);
					$this->db->where('id_subunit', $id['id_subunit']);
					$this->db->update('t_kwitansi');
						   
            }
	}
	
		$this->db->trans_complete();
		if ($this->db->trans_status() === FALSE){
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Gagal di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/buat_kwitansi'>";
		}else{
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Berhasil di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/daftar_kwitansi_ls'>";
		}	
		
}

/**
* Fungsi untuk menyimppan data kwitansi surat perjalanan dinas yg telah dibuat
* @param tgl_kwitansi is date untuk inputan tanggal kwitansi dari user
* @param tpt_kwitansi is varchar untuk inputan tempat kwitansi dari user
* @param kdoutput is varchar untuk kode output kwitansi dari user
* @param kdakun is varchar untuk inputan kode akun dari user
* @param kdkomponen is varchar untuk inputan kode komponen dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user	
* @param pp_spd is varchar untuk inputan nama petugas penerbit surat perjalanan dinas dari user	
* @param no_sk_spd is varchar  untuk inputan no surat keputusan surat perjalanan dinas dari user		
* @param dari is varchar untuk inputan tempat asal keberangkatan dari user		
* @param tujuan is varchar untuk inputan tempat tujuan perjalanan dinas dari user	
* @param yg_berpergian is varchar untuk inputan orang yang berangkat dalam perjalanan dinas dari user		 
* @param nip is varchar	untuk inputan nip petugas yang berangkat dari user	
* @param golongan_spd is varchar untuk inputan golongan dari user	 	
* @param maksud is varchar untuk inputan tujuan keberangkatan dari user	
* @param tgl_b is date untuk inputan tanggal berangkat dari user	
* @param tgl_k is date untuk inputan tanggal kembali dari user	
* @param ket_spd is varchar untuk inputan keterangan perjalanan dinas dari user	
* @param perincianzz is varchar untuk inputan perincian dari user	
* @param jumlah is integer untuk inputan jumlah dari user	
* @param pph_spd is integer untuk inputan pajak penghasilan dari perjalanan dinas dari user	
*/
function simpan_spd( $tgl_kwitansi, $tpt_kwitansi, 
					 $kdoutput, $kdkomponen,$kdskomponen, $kdakun, $hdr, 
					 $nmoutput, $nmkomponen,$nmsubkomponen, $nmakun, $nmheader, 	
					 $pp_spd, $no_sk_spd, $dari, $tujuan, $yg_bepergian, $nip, $golongan_spd, $maksud, $tgl_b, $tgl_k, $ket_spd, 				
					 $biaya, $lama, $jumlah, $pph21, $tiket, $board, $taxi, $dll, $uang_saku, $representatif, $kode_bas )
{
	 	$subunit = $this->session->userdata('id_subunit');
		$unit_kerja = $this->session->userdata('id_unit');

		$this->db->trans_strict(FALSE);
		$this->db->trans_start();
        $id=$this->nomer->no_baru2('t_kwitansi','kwitansi','id_subunit',$subunit, date('y')); 
		
		 $this->db->set('id_sifatpembayaran','4');
		 $this->db->set('jenis_kwitansi','5'); 
		 $this->db->set('id_unit',$unit_kerja); 
		 $this->db->set('tgl_kwitansi',$tgl_kwitansi);
		 
		 $this->db->set('kegiatan','4078');
         $this->db->set('kdoutput',$kdoutput);
         $this->db->set('kdkomponen',$kdkomponen);
		 $this->db->set('kdskomponen',$kdskomponen);
         $this->db->set('kdakun',$kdakun);
         $this->db->set('hdr',$hdr);
		 
		 $this->db->set('nmoutput',$nmoutput);
         $this->db->set('nmkomponen',$nmkomponen);
		 $this->db->set('nmskomponen',$nmsubkomponen);
		 $this->db->set('nmakun',$nmakun);
		 $this->db->set('nmheader',$nmheader);
		 
		 $this->db->set('no_spd',$no_sk_spd);		 
		 $this->db->set('pp_spd',$pp_spd);
		 $this->db->set('dari',$dari);
		 $this->db->set('tujuan',$tujuan);
		 $this->db->set('yg_bepergian',$yg_bepergian);
		 $this->db->set('nip',$nip);
		 $this->db->set('gol',$golongan_spd);
		 $this->db->set('maksud',$maksud);
		 $this->db->set('tgl_b',$tgl_b);
		 $this->db->set('tgl_k',$tgl_k);
		 $this->db->set('ket_kwitansi',$ket_spd);
		 $this->db->set('ket_spd',$ket_spd);		 
		 $this->db->set('tpt_kwitansi',$tpt_kwitansi);
		 $this->db->set('nominal',$biaya);
		 $this->db->set('lama',$lama);
		 $this->db->set('pph',$pph21);
		 $this->db->set('tiket',$tiket);
		 $this->db->set('board',$board);
		 $this->db->set('taxi',$taxi);
		 $this->db->set('uang_saku',$uang_saku);
		 $this->db->set('represent',$representatif); 
		 $this->db->set('dll',$dll);	 
		 $this->db->set('akun_kode',$kode_bas);
			
			$this->db->where('id_kwitansi', $id['id_kwitansi']);
			$this->db->where('th_kwitansi', $id['th_kwitansi']);
			$this->db->where('id_subunit', $id['id_subunit']);
			$this->db->update('t_kwitansi');
			
			//=== INSERT DATA KELENGKAPAN ===
			$this->db->query("INSERT into t_verunit (id_kwitansi, th_kwitansi, id_ver, flag, jenis_kwitansi, id_sifatpembayaran)
								SELECT	".$id['id_kwitansi'].",".$id['th_kwitansi'].", id_ver, 0, 5, 4 
								FROM m_verunit, t_kwitansi
								WHERE m_verunit.id_sifat_pembayaran=t_kwitansi.id_sifatpembayaran
								AND m_verunit.jenis_kwitansi=t_kwitansi.jenis_kwitansi
								AND t_kwitansi.id_kwitansi=".$id['id_kwitansi']."
								AND t_kwitansi.th_kwitansi=".$id['th_kwitansi']
								);
	
		$this->db->trans_complete();
		if ($this->db->trans_status() === FALSE){
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Gagal di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/buat_kwitansi'>";
		}else{
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Berhasil di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/daftar_kwitansi_ls'>";
		}	
		
}

/**
* Fungsi untuk mendapatkan list data kwitansi
* @return list of object
*/ 

	function data_kuitansi(){	
	$kode_subunit = $this->session->userdata('id_subunit');		
			$sql= $this->db->query("SELECT DISTINCT  *, `id_kwitansi`,`id_jk`,`jk`,`th_kwitansi`,`status`,`nip_pengambil`,
						 `tgl_kwitansi`,`jenis_kwitansi`,`kegiatan`, `nominal`, no_kwitansi, `t_kwitansi`.`kdakun`, `t_kwitansi`.`kdoutput`,
						  `ket_kwitansi`, `pengambil`, `penerima` ,`id_status_kwitansi` 
							FROM (`t_kwitansi`,`m_jeniskwitansi`) 
							WHERE `t_kwitansi`.`jenis_kwitansi` = `m_jeniskwitansi`.`id_jk` 
							AND t_kwitansi.id_sifatpembayaran=m_jeniskwitansi.id_sifat_pembayaran
							AND `id_status_kwitansi` = '0' 
							AND `t_kwitansi`.`id_sifatpembayaran` = '4' 
							AND t_kwitansi.id_subunit= '$kode_subunit' 
							AND `t_kwitansi`.`th_kwitansi`='".date('y')."'"
									);
			return $sql; 
	}

/**
* Fungsi untuk mengecek kwitansi ls yang belum di verifikasi
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh masing-masing user
* @param th is integer untuk inputan tahun dari user	
* @param bl is integer untuk inputan bulan dari user	
* @return boolean
*/ 	
 function cek_ada_kwitansi($id_subunit,$th,$bl)
        {    
            $this->db->select('*');
            $this->db->from('t_kwitansi');     
            $this->db->where('id_subunit',$id_subunit);     
            $this->db->where('th_kwitansi',$th);
            $this->db->where('MONTH(tgl_kwitansi)',$bl);     
            $this->db->where('id_sifatpembayaran',4); 
            $this->db->where('id_status_kwitansi',0); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {     
                return true;
            }
        }
/**
* Fungsi untuk menampilkan kwitansi ls yang belum di verifikasi
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh masing-masing user
* @param th is integer untuk inputan tahun dari user	
* @param bl is integer untuk inputan bulan dari user	
* @return list of object
*/ 
function daftar_ls_subunit($id_subunit,$th,$bl)
        {               
            $this->db->select("t_kwitansi.id_kwitansi, t_kwitansi.th_kwitansi"); 
            $this->db->from('t_kwitansi');     
            $this->db->where('id_subunit',$id_subunit);     
            $this->db->where('th_kwitansi',$th);
            $this->db->where('id_sifatpembayaran',4); 
            $this->db->where('id_status_kwitansi',0);
            $this->db->group_by('t_kwitansi.id_kwitansi');
            $result = $this->db->get();
            return $result;
        }
/**
* Fungsi untuk mengubah status kwitansi ls yang diajukan
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh masing-masing user
* @param th is integer untuk inputan tahun dari user	
* @param bl is integer untuk inputan bulan dari user	
* @param id_kwitansi is integer merupakan id yang dimiliki oelh kwitansi ketika diinputkan
*/ 
 function ubah_status_gu_ajukan($id_subunit,$id_kwitansi,$th)
        { 
                 
            $this->db->set('id_status_kwitansi',1);       
            $this->db->where('id_kwitansi',$id_kwitansi);
            $this->db->where('id_subunit',$id_subunit);     
            $this->db->where('th_kwitansi',$th);
            $this->db->where('jenis_kwitansi <> 2');
            $this->db->where('id_sifatpembayaran = 4');
            $this->db->update('t_kwitansi'); 
        }
/**
* Fungsi untuk menambahkan waktu kwitansi ls yang diajukan
* @param th is integer merupakan tahun ketika terjadi penginputan
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih
*/ 
 function masuk_waktu_pengajuan($id_kwitansi,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi, th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th', '$tgl_skrg $jam_skrg','diajukan','1')");
            }

/**
* Fungsi untuk menseleksi kwitansi ls berdasarkan id dan tahun kwitansi 
* @param id is integer merupakan id dari kwitansi terpilih
* @param th is integer merupakan tahun dari kwitansi terpilih
* @return list of object
*/	
function getKuitansi($id,$th){
		$kode_subunit = $this->session->userdata('id_subunit');	
				$sql= $this->db->query("SELECT `id_kwitansi`,jenis_kwitansi,pph,ppn, YEAR(tgl_kwitansi) AS 'tahun',`tgl_kwitansi`, `tpt_kwitansi`, th_kwitansi, no_kwitansi, akun_kode, 
										`kegiatan`, `nominal`,`t_kwitansi`.`kdakun`, `t_kwitansi`.`kdoutput`, `ket_kwitansi`, `pengambil`,`nip_pengambil`, `penerima`,nip_penerima, nip 
										,yg_bepergian FROM (`t_kwitansi`, `t_rkakl`) WHERE id_kwitansi='$id' AND th_kwitansi='$th' AND id_subunit='$kode_subunit'
										GROUP BY id_kwitansi;");
			return $sql; 
	
	}

/**
* Fungsi untuk menseleksi nama pemberi ttd sesuai dengan unit
* @param id_unit is integer merupakan id unit dari user
* @return list of object
*/	
	function getNamattd($id_unit){	
		$sql= $this->db->query("SELECT nama_bpp,nip_bpp,nama_ppk,nip_ppk FROM m_bpp ,m_ppk, m_unit
								WHERE 
								m_unit.id_bpp=m_bpp.id_bpp
								AND m_unit.id_ppk=m_ppk.id_ppk
								AND m_unit.id_unit=$id_unit"
							  );
			return $sql; 
	}

/**
* Fungsi untuk menseleksi level maksimum dari kwitansi berdasarkan id_kwitansi dan tahun
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih
* @param th is integer merupakan tahun dari kwitansi terpilih
* @return integer
*/	
        function ambil_level_tertinggi($id_kwitansi,$th)
        {  
           $this->db->select_max('level');
           $this->db->from('tb_waktu_kwitansi');    
           $this->db->where('id_kwitansi',$id_kwitansi);  
           $this->db->where('th_kwitansi',$th);  
           $query = $this->db->get(); 
           return $query;
        }

/**
* Fungsi untuk menambahkan data waktu revisi kwitansi ls
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih
* @param th_kwitansi is integer merupakan tahun dari kwitansi terpilih
* @param id_status_kwitansi is integer merupakan id status dari kwitansi terpilih
* @param level_tekini is integer merupakan level terkini dari kwitansi terpilih
*/
 function masuk_kirim_hasil_revisi($id_kwitansi,$th_kwitansi,$level_terkini,$comment,$stat_waktu)
        {
			$data = array(
			  'id_kwitansi'=>$id_kwitansi,
			  'th_kwitansi'=>$th_kwitansi,
			  'status_waktu'=>$stat_waktu,
			  'tanggal_waktu'=> date("Y-m-d H:i:s"),
			  'komentar'=>$comment,
			  'level'=>$level_terkini
			);
			$this->db->insert('tb_waktu_kwitansi',$data);
            }

/**
* Fungsi untuk mengambil data subunit berdasarkan unit
* @param id_unit is integer merupakan id unit yang dimiliki user
* @return list of object
*/	
 function getUnitList($id_unit)
         {
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_unit',$id_unit);    
            $result = $this->db->get();  
            return $result->result_array();
        }
/**
* Fungsi untuk mengambil data jumlah kwitansi berdasarkan kondisi yang dibuat
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh user
* @return integer
*/	
 function banyak_kwitansi($id_subunit)
    {
            $result=$this->db->query("SELECT * 
                FROM t_kwitansi 
                WHERE 
                id_subunit=$id_subunit and 
                ( id_status_kwitansi=1 or id_status_kwitansi=3 or id_status_kwitansi=19 or id_status_kwitansi=21 )
				and id_sifatpembayaran=4 
				and jenis_kwitansi <> 2 
				and th_kwitansi='".date('y')."' 
                GROUP BY id_kwitansi 
                                ");
            return $result->num_rows() ;
    }

/**
* Fungsi untuk mengambil data kwitansi yang telah diverivikasi
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh user
* @return list of object 
*/
 function data_kuitansi_verifikasi($id_subunit)
     {            
            $result=$this->db->query("SELECT * 
                FROM t_kwitansi 
                WHERE 
                id_subunit=$id_subunit AND 
                ( id_status_kwitansi=1 OR id_status_kwitansi=3 OR id_status_kwitansi=19 OR id_status_kwitansi=21 )
                AND id_sifatpembayaran=4
                AND jenis_kwitansi <> 2 
                GROUP BY id_kwitansi 
                                ");
            return $result; 
    }

/**
* Fungsi untuk mengambil nama subunit
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh user
* @return a object
*/
 function nama_subunit($id_subunit)
     {            
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_subunit',$id_subunit);
            $nama_subunit = $this->db->get(); 
            return $nama_subunit->row();
    }  
/**
* Fungsi untuk menseleksi nama unit
* @param id_subunit is integer merupakan id subunit yang dimiliki oleh user
* @param id_unit is integer merupakan id unit yang dimiliki oleh user
* @return boolean
*/
   function cek_unit($id_subunit,$id_unit)
     {            
            $this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->where('id_subunit',$id_subunit);
            $this->db->where('id_unit',$id_unit);
            $result = $this->db->count_all_results();
            if( $result > 0) {
                return true;
            }else{
                return false;
            }
            
    }            
/**
* Fungsi untuk menseleksi kwitansi yang akan di verifikasi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @return list of object
*/
  function getKuitansi_veri($id,$th){
            $this->db->select('id_kwitansi,th_kwitansi,YEAR(tgl_kwitansi) AS "tahun",tgl_kwitansi,tpt_kwitansi, no_kwitansi, akun_kode 
            ,jenis_kwitansi,id_unit,kegiatan,nominal,kdakun,kdoutput,ket_kwitansi, id_status_kwitansi, yg_bepergian, akun_kode, id_sifatpembayaran,    
            pengambil,nip_pengambil,penerima,status,ppn,pph,id_pajak,st_kwitansi,st_ssp,st_bukti');
            $this->db->from('t_kwitansi');
            $this->db->where('id_kwitansi',$id);
            $this->db->where('th_kwitansi',$th);
            return $this->db->get(); 

    }

/**
* Fungsi untuk menseleksi jenis pajak dari kwitansi yang akan di verifikasi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @return list of object
*/
 function get_jenis_pajak_veri($id,$th){
        
        $result=$this->db->query("
                SELECT tb_pajak.ppn AS ppn,tb_pajak.pph AS pph,tb_pajak.ket AS ket  
                FROM tb_pajak, t_kwitansi 
                WHERE t_kwitansi.id_pajak=tb_pajak.id_pajak 
				AND t_kwitansi.id_kwitansi = '".$id."' 
				AND t_kwitansi.th_kwitansi = '".$th."' 
                                ");
        return $result;
    }

/**
* Fungsi untuk menyeleksi waktu kwitansi yang belum diverivikasi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @return list of object
*/
 function get_history($id,$th)
        {            
            $this->db->select('*');
            $this->db->from('tb_waktu_kwitansi');
            $this->db->where('id_kwitansi',$id);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('komentar <> "" ');
            $this->db->order_by('tanggal_waktu', 'asc');   
            return $this->db->get(); 
        }
	
/**
* Fungsi untuk menyeleksi kelengkapan dari kwitansi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @param jenis_kwitansi is integer merupakan jenis kwitansi yang dimiliki oleh kwitansi
* @param id_sifatpembayaran is integer merupakan sifat pembayaran yang dimiliki oleh kwitansi
* @return list of object
*/
 function kelengkapan($id,$th,$jenis_kwitansi,$id_sifatpembayaran)
     {            
            $this->db->distinct();
			$this->db->select("*");
            $this->db->from('t_verunit');
            $this->db->join("m_verunit",'m_verunit.id_ver=t_verunit.id_ver','inner');         
            $this->db->where('t_verunit.id_kwitansi',$id);
            $this->db->where('t_verunit.th_kwitansi',$th);
            $this->db->where('t_verunit.jenis_kwitansi',$jenis_kwitansi);
            $this->db->where('t_verunit.id_sifatpembayaran',$id_sifatpembayaran);
            return $this->db->get(); 
    }            

/**
* Fungsi untuk menyeleksi status dari kwitansi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @param st_kwitansi is integer merupakan status kwitansi yang dimiliki oleh kwitansi
* @param status is integer merupakan status dari peng-UPan dari kwitansi
*/
 function up_kwitansi($status,$id,$th,$st_kwitansi)
     {            
		$this->db->set('id_status_kwitansi',$status);
		$this->db->set('st_kwitansi',$st_kwitansi);
		$this->db->where('id_kwitansi', $id);
		$this->db->where('th_kwitansi', $th);
		$this->db->update('t_kwitansi'); 		   
	 }

/**
* Fungsi untuk menyeleksi kelengkapan dari kwitansi
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @param comment is varchar merupakan comment yg harus diberikan oleh user
*/
  function insert_comment($comment,$id,$th)
  {
    $user=$this->session->userdata('username');
    $data = array(
      'id_kwitansi'=>$id,
	  'th_kwitansi'=>$th,
      'tanggal_waktu'=>date('Y-m-d'),
      'komentar'=>$comment
    );
    $this->db->insert('tb_waktu_kwitansi',$data);
  }    

/**
* Fungsi untuk mengupdate status kelengkapan dari kwitansi
* @param flag is integer digunakan sebagai penanda ketika terjadi update
* @param id is integer merupakan id yang dimiliki oleh kwitansi
* @param th is integer merupakan tahun pembuatan yang dimiliki oleh kwitansi
* @param id_ver is integer merupakan id yang dimiliki oleh verifikasi 
*/
  function up_kelengkapan($flag,$id,$th,$id_ver)
     {            
		$this->db->set('flag',$flag);
		$this->db->where('id_kwitansi', $id);
		$this->db->where('th_kwitansi', $th);
		$this->db->where('id_ver', $id_ver);
		$this->db->update('t_verunit'); 		   
	 }

/**
* Fungsi untuk menyeleksi revisi kwitansi yang telah dilakukan 
* @return list of object
*/
 function data_rev_kuitansi()
     {        
    $id_subunit = $this->session->userdata('id_subunit');    
            $result=$this->db->query("SELECT * 
                FROM t_kwitansi 
                WHERE 
                id_subunit='".$id_subunit."' and 
                ( id_status_kwitansi=2 or id_status_kwitansi=20 )
				and id_sifatpembayaran=4 
				and th_kwitansi='".date('y')."' 
                GROUP BY id_kwitansi 
                                ");
            return $result; 
    }
/**
* Fungsi untuk mencari pajak pph sesuai dengan id pajak
* @param id_pajak is integer merupakan id yang dimiliki oleh pajak
* @return list of object
*/
 function get_pph($id_pajak)
        {
            $this->db->select('pph');
            $this->db->from('tb_pajak');   
            $this->db->where('id_pajak',$id_pajak);     
            $hasil = $this->db->get();
            $result=$hasil->row();
            return $result->pph;
        } 
/**
* Fungsi untuk mencari pajak ppn sesuai dengan id pajak
* @param id_pajak is integer merupakan id yang dimiliki oleh pajak
* @return list of object
*/
 function get_ppn($id_pajak)
        {
            $this->db->select('ppn');
            $this->db->from('tb_pajak');   
            $this->db->where('id_pajak',$id_pajak);     
            $hasil = $this->db->get();
            $result=$hasil->row();
            return $result->ppn;
        } 
	
/**
* Fungsi untuk menampilkan jenis pajak pph dan ppn 
* @return list of object
*/   
 function edit_jenis_pajak()
        {
            $result = array();
            $this->db->select('*');
            $this->db->from('tb_pajak');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Jenis Pajak-';
                $result[$row->id_pajak]= (" [PPN : $row->ppn % ] - [PPH : $row->pph% ] - $row->ket");
            }
            
            return $result;
        }

/**
* Fungsi untuk menyeleksi revisi kwitansi yang telah dilakukan 
* @param objek is varchar merupakan objek dari kwitansi
* @param id_kwitansi is integer merupakan id_kwitansi yang dimiliki oleh kwitansi
* @param th_kwitansi is integer merupakan th_kwitansi yang dimiliki oleh kwitansi
*/
 function edit_kwitansi($objek,$id_kwitansi,$th_kwitansi){
    $this->db->where('id_kwitansi', $id_kwitansi);
	$this->db->where('th_kwitansi', $th_kwitansi);
    $this->db->update('t_kwitansi', $objek);
  } 
/**
* Fungsi untuk menyeleksi subunit
* @return list of object
*/
function getSubunit() {
            $result = array();
			$this->db->select('*');
            $this->db->from('m_subunit');
            $this->db->order_by('id_subunit','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '<<-Pilih Subunit->>';
                $result[$row->id_subunit]= ("$row->nama_subunit");
            }
            
            return $result;
        }
/**
* Fungsi untuk menampilkan jenis pajak pph dan ppn 
* @return list of object
*/
 function output_list()
    {      
            $q=$this->db->query(" SELECT kdoutput, kdakun FROM t_kwitansi GROUP BY kdoutput,kdakun ");
            return $q->result_array();
    }

/**
* Fungsi untuk menampilkan jenis kwitansi kontrak
* @param kdoutput is integer merupakan kode output yang terpilih oleh user 
* @param kdakun is integer merupakan kode akun yang terpilih oleh user 
* @param th is integer merupakan tahun dari kwitansi kontrak
* @param bulan is integer merupakan bulan dari kwitansi kontrak
* @return integer
*/
 function banyak_kwitansi_kontrak_subunit($kdouput, $kdakun,$th,$bulan)
    {
            $this->db->select('*'); 
            $this->db->from("t_kwitansi");           
            $this->db->where('kdoutput',$kdouput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('jenis_kwitansi',2);
            $this->db->where('id_sifatpembayaran',4);
            $this->db->where('id_status_kwitansi',0);
            $this->db->group_by('t_kwitansi.id_kwitansi'); 
            $result = $this->db->get();
            return $result->num_rows() ;
    }
/**
* Fungsi untuk menampilkan data kwitansi kontrak
* @param id_output is integer merupakan id yang dimiliki oleh output
* @param id_akun is integer merupakan id yang dimiliki oleh akun
* @param th is integer merupakan tahun yang dimiliki oleh kwitansi
* @return list of object
*/
 function data_kuitansi_kontrak($id_output,$id_akun,$th){    
            $this->db->select('*'); 
            $this->db->from("t_kwitansi");           
            $this->db->where('kdoutput',$id_output);
            $this->db->where('kdakun',$id_akun);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('jenis_kwitansi',2);
            $this->db->where('id_sifatpembayaran',4);
            $this->db->where('id_status_kwitansi',0);
            $this->db->group_by('t_kwitansi.id_kwitansi'); 
            $result = $this->db->get();
			return $result;
    }

/**
* Fungsi untuk mengambil data kwitansi berdasarkan persyaratan yang ada(id)
* @param id_output is integer merupakan id yang dimiliki oleh output
* @param id_akun is integer merupakan id yang dimiliki oleh akun
* @param th is integer merupakan tahun yang dimiliki oleh kwitansi
* @return list of object
*/
 function ambil_id($kdoutput,$id_akun,$bulan){
            $id_unit = $this->session->userdata('id_unit');            
            $q=$this->db->query("SELECT * FROM t_kwitansi
								WHERE kdoutput = $kdoutput 
								AND kdakun = $id_akun 
								AND jenis_kwitansi='2'
								AND id_sifatpembayaran='4'
								AND id_status_kwitansi='0'
								");
            return $q;
    }
/**
* Fungsi untuk mengubah kwitansi kontrak
* @param id is integer merupakan id umum yang dimiliki kwitansi
* @param th is integer merupakan tahun yang dimiliki kwitansi
* @param id_kwitansi_kontrak is integer merupakan id yang dimiliki kwitansi kontrak
* @return list of object
*/

 function update_kwitansi_kontrak($id,$th,$id_kwitansi_kontrak){   
            $q=$this->db->query("UPDATE t_kwitansi SET id_status_kwitansi = '1' ,  
            id_kwitansi_kontrak='$id_kwitansi_kontrak' 
            WHERE id_kwitansi='$id' and th_kwitansi=$th");
            return $q;
 echo $this->db->last_query();

    }

/**
* Fungsi untuk menyimppan data kwitansi kontrak yg telah dibuat
* @param kdoutput is varchar untuk kode output kwitansi dari user
* @param kdakun is varchar untuk inputan kode akun dari user
* @param kdkomponen is varchar untuk inputan kode komponen dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user		
* @param bulan is integer merupakan bulan dari kwitansi
* @param kwitansi is varchar merupakan jenis dari kwitansi	
* @param tpt_kwitansi is varchar merupakan tempat pembuatan kwitansi	
* @param ket_kwitansi is varchar merupakan keterangan pembuatan kwitansi
* @param pengambil is varchar merupakan pengambil uang kwitansi	 
* @param nip_pengambil is varchar merupakan nip pengambil uang kwitansi	 	
* @param penerima is varchar merupakan penerima kwitansi	 	
* @param sum_nominal is integer merupakan sum nominal uang dari kwitansi	 
* @param tgl_kwitansi is date merupakan tanggal dari pembuatan kwitansi
* @param tgl_k is date merupakan tanggal pembuatan kontrak
* @param p_pph is integer merupakan pajak penghasilan yang diinputkan user
* @param p_ppn is integer merupakan pajak pertambahan nilai yang diinputkan user
*/
 function simpan_kwitansi_kontrak(	$kdoutput,$kdkomponen,$kdakun,$hdr,
		 							$nmoutput,$nmkomponen,$nmakun,$nmheader, 
		 							$bulan, $kwitansi, 
		 							$tgl_kwitansi, $tpt_kwitansi, $ket_kwitansi, $pengambil, 
									$nip_pengambil, $penerima, $sum_nominal, $p_ppn, $p_pph
		 							)
{    
            $tgl_skr = date('Y-m-d');
            $id_unit = $this->session->userdata('id_unit');
            $id=$this->nomer->no_baru('t_kwitansi_kontrak','kwitansi_kontrak','id_unit',$id_unit, date('y')); 
            
			$pph=$p_pph*$sum_nominal/100;
			$ppn=$p_ppn*$sum_nominal/100;

            $this->db->set('kegiatan','4078'); 

            $this->db->set('kdoutput',$kdoutput); 
            $this->db->set('kdkomponen',$kdkomponen); 
            $this->db->set('kdakun',$kdakun);   
            $this->db->set('hdr',$hdr); 
            $this->db->set('nmoutput',$nmoutput); 
            $this->db->set('nmkomponen',$nmkomponen); 
            $this->db->set('nmakun',$nmakun); 
            $this->db->set('nmheader',$nmheader); 

            $this->db->set('jenis_kwitansi','2'); 
            $this->db->set('id_sifatpembayaran','4'); 
            $this->db->set('tgl_kwitansi',$tgl_kwitansi); 
            $this->db->set('nominal',$sum_nominal); 
            $this->db->set('pph',$pph);   
            $this->db->set('ppn',$ppn); 
            $this->db->set('tpt_kwitansi',$tpt_kwitansi); 
            $this->db->set('ket_kwitansi',$ket_kwitansi); 
            $this->db->set('pengambil',$pengambil); 
            $this->db->set('nip_pengambil',$nip_pengambil); 
            $this->db->set('penerima',$penerima); 
            $this->db->set('id_status_kwitansi','1'); 
            $this->db->where('id_kwitansi_kontrak', $id['id_kwitansi_kontrak']);
            $this->db->where('th_kwitansi_kontrak', $id['th_kwitansi_kontrak']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_kwitansi_kontrak'); 
            
			//=== INSERT DATA KELENGKAAN ===
			$this->db->query("INSERT into t_verunit (id_kwitansi, th_kwitansi, id_ver, flag, jenis_kwitansi, id_sifatpembayaran)
								SELECT	".$id['id_kwitansi_kontrak'].",".$id['th_kwitansi_kontrak'].", id_ver, 0, 2, 4  
								FROM m_verunit, t_kwitansi_kontrak
								WHERE m_verunit.id_sifat_pembayaran=t_kwitansi_kontrak.id_sifatpembayaran
								AND m_verunit.jenis_kwitansi=t_kwitansi_kontrak.jenis_kwitansi
								AND t_kwitansi_kontrak.id_kwitansi_kontrak=".$id['id_kwitansi_kontrak']."
								AND t_kwitansi_kontrak.th_kwitansi_kontrak=".$id['th_kwitansi_kontrak']
								);

			
            $th  = date ('y');
            foreach($kwitansi->result_array() as $row)
                     {  
                        $id_k = $row ['id_kwitansi'];
                        $this->m_ls->update_kwitansi_kontrak($id_k,$th,$id['id_kwitansi_kontrak']);
                     }
            
    }

/**
* Fungsi untuk mengambil data kwitansi pengadaan
* @return list of object
*/	
	function data_kuitansi_pengadaan(){	
	$kode_subunit = $this->session->userdata('id_subunit');		
			$sql= $this->db->query(" select * from t_kwitansi_kontrak where id_status_kwitansi = 0 ");
			return $sql; 
	}
/**
* Fungsi untuk menampilkan data kwitansi pengadaan
* @param id is integer merupakan id dari kwitansi pengadaan
* @param th is integer merupakan tahun dari kwitansi pengadaan
* @return list of object
*/
	function getKuitansiPengadaam($id,$th){
		$kode_subunit = $this->session->userdata('id_subunit');	
				$sql= $this->db->query("SELECT *, year(tgl_kwitansi) as tahun from t_kwitansi_kontrak ");
			return $sql; 
	
	}
/**
* Fungsi untuk menampilkan list data kwitansi pengadaan
* @param id_subunit is integer merupakan id subunit dari kwitansi pengadaan
* @param th is integer merupakan tahun dari kwitansi pengadaan
* @param bl is integer merupakan bulan dari kwitansi pengadaan
* @return list of object
*/
function daftar_ls_kontrak_pengadaan($id_subunit,$th,$bl)
        {   
            
            $this->db->select("t_kwitansi_kontrak.id_kwitansi_kontrak, t_kwitansi_kontrak.th_kwitansi_kontrak"); 
            $this->db->from('t_kwitansi_kontrak');     
            $this->db->where('th_kwitansi_kontrak',$th);
            $this->db->where('id_sifatpembayaran',4); 
            $this->db->where('id_status_kwitansi',0);
            $this->db->group_by('t_kwitansi_kontrak.id_kwitansi_kontrak');
            $result = $this->db->get();
            return $result;
        }

/**
* Fungsi untuk memverifikasi data kwitansi pengadaan pada verifikator
* @param id_subunit is integer merupakan id subunit dari kwitansi pengadaan
* @param th is integer merupakan tahun dari kwitansi pengadaan
* @param bl is integer merupakan bulan dari kwitansi pengadaan
* @return boolean
*/
 function cek_ada_kwitansi_pengadaan($id_subunit,$th,$bl)
        {    
            $this->db->select('*');
            $this->db->from('t_kwitansi_kontrak');     
            $this->db->where('th_kwitansi_kontrak',$th);
            $this->db->where('id_sifatpembayaran',4); 
            $this->db->where('id_status_kwitansi',0); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {     
                return true;
            }
		}
/**
* Fungsi untuk mengubah status kirim pengadaan
* @param id_subunit is integer merupakan id subunit dari kwitansi pengadaan
* @param th is integer merupakan tahun dari kwitansi pengadaan
* @param id_kwitansi is integer merupakan id dari kwitansi pengadaan
*/
function ubah_status_kirim_pengadaan($id_subunit,$id_kwitansi,$th)
        { 
                 
            $this->db->set('id_status_kwitansi',1);       
            $this->db->where('id_kwitansi_kontrak',$id_kwitansi);
            $this->db->where('th_kwitansi_kontrak',$th);
            $this->db->where('id_sifatpembayaran = 4');
            $this->db->update('t_kwitansi_kontrak'); 
        }
        
/**
* Fungsi untuk mencari list output
* @param id_unit is integer merupakan id dari unit user
* @param tahun is integer merupakan tahun dari list output
* @return list of object
*/       
function output_list_arick($id_unit,$tahun)
    {      
            $q=$this->db->query( "SELECT DISTINCT * FROM t_rkakl WHERE kode_unit='U003' GROUP BY kdoutput, kdakun" );
            return $q->result_array();
    }
/**
* Fungsi untuk mencari banyak list kwitansi sptb
* @param kdoutput is integer merupakan kode output kwitansi sptb
* @param kdakun is integer merupakan kode akun kwitansi sptb
* @param th is integer merupakan tahun dari kwitansi sptb
* @param bulan is integer merupakan bulan dari kwitansi sptb
* @return a object
*/  	
    function banyak_kwitansi_sptb($kdouput, $kdakun,$th,$bulan)
    {
            $this->db->select('*'); 
            $this->db->from("t_kwitansi");           
            $this->db->where('kdoutput',$kdouput);
            $this->db->where('kdakun',$kdakun);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('id_sifatpembayaran',4);
            $this->db->where('id_status_kwitansi',4);
            $this->db->where('MONTH(tgl_kwitansi)',$bulan);
            $this->db->group_by('t_kwitansi.id_kwitansi'); 
            $result = $this->db->get();
            return $result->num_rows() ;
    }
/**
* Fungsi untuk mencari data kwitansi sptb
* @param kdoutput is integer merupakan kode output dari kwitansi sptb
* @param id_akun is integer merupakan id akun dari kwitansi sptb
* @param bulan is integer merupakan bulan dari kwitansi sptb
* @return list of object
*/ 
    function data_kuitansi_sptb($kdoutput,$id_akun,$bulan){    
            $id_unit = $this->session->userdata('id_unit');    
            $q=$this->db->query("SELECT* FROM t_kwitansi JOIN (SELECT id_subunit FROM m_subunit WHERE id_unit=$id_unit) AS subunit ON t_kwitansi.id_subunit=subunit.id_subunit WHERE `id_status_kwitansi` = '4' AND id_sifatpembayaran = '4' AND MONTH(tgl_kwitansi) = $bulan AND `kdoutput` = $kdoutput AND `kdakun` = $id_akun ;");
            return $q;
    }
/**
* Fungsi untuk menyimpan data kwitansi sptb
* @return list of object
*/ 
    function simpan_sptb(){    
            $id_unit = $this->session->userdata('id_unit');            
            $id_output = $this->input->post('id_output');
            $id_akun = $this->input->post('id_akun');
            $bulan = date('m');
            $kwitansi = $this->m_ls->ambil_id_arick($id_output,$id_akun,$bulan);
            
            $id=$this->nomer->no_baru('t_sptb','sptb','id_unit',$id_unit, date('y')); 
            $tgl_skrg = date("Y-m-d");
            $this->db->set('id_sifatpembayaran','4'); 
            $this->db->set('tgl_sptb',$tgl_skrg);
            $this->db->where('id_sptb', $id['id_sptb']);
            $this->db->where('th_sptb', $id['th_sptb']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_sptb'); 
            
            $th  =date ('y');
            
            foreach($kwitansi->result_array() as $row)
                     {  
                        $id_k = $row ['id_kwitansi'];
                        $this->m_ls->update_sptb($id['id_sptb'],$id_k,$th);
                        //echo $this->db->last_query();
                        $get_id = $this->m_ls->ambil_level_tertinggi_arick($id_k,$th);
                            foreach($get_id->result_array() as $row){
                            $level = $row['level'];  
                            }
                            $level_terkini =  $level+1;           
                            $this->m_ls->masuk_waktu_dibuatkan_sptb($id_k,$level_terkini,$th);
                     } 
            
            
    }
/**
* Fungsi untuk mencari data id kwitansi
* @param kdoutput is integer merupakan kode output dari kwitansi sptb
* @param id_akun is integer merupakan id akun dari kwitansi sptb
* @param bulan is integer merupakan bulan dari kwitansi sptb
* @return list of object
*/ 	
    function ambil_id_arick($kdoutput,$id_akun,$bulan){
            $id_unit = $this->session->userdata('id_unit');            
            $q=$this->db->query("SELECT* FROM t_kwitansi JOIN (SELECT id_subunit FROM m_subunit WHERE id_unit='".$id_unit."') AS subunit ON t_kwitansi.id_subunit=subunit.id_subunit WHERE `id_status_kwitansi` = '4' AND id_sifatpembayaran ='4' AND MONTH(tgl_kwitansi) = $bulan AND `kdoutput` = $kdoutput AND `kdakun` =$id_akun ;");
            return $q;
    }
/**
* Fungsi untuk mengupdate data kwitansi sptb
* @param id_sptb is integer merupakan id dari kwitansi sptb
* @param id is integer merupakan id akun dari kwitansi sptb
* @param bulan is integer merupakan bulan dari kwitansi sptb
* @return list of object
*/ 
    function update_sptb($id_sptb,$id,$th){            
            $q=$this->db->query("UPDATE t_kwitansi SET id_status_kwitansi = '5' ,  
            id_sptb='$id_sptb' 
            WHERE id_kwitansi='$id' and th_kwitansi=$th");
            return $q;
    }
/**
* Fungsi untuk mengambil level tertinggi dari waktu insert kwitansi
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param th is integer merupakan tahun dari kwitansi
* @return list of object
*/ 
    function ambil_level_tertinggi_arick($id_kwitansi,$th)
        {  
           $this->db->select_max('level');
           $this->db->from('tb_waktu_kwitansi');    
           $this->db->where('id_kwitansi',$id_kwitansi);  
           $this->db->where('th_kwitansi',$th);  
           $query = $this->db->get(); 
           return $query;
        }
/**
* Fungsi untuk mencatat waktu pembuatan sptb
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param level_terkini is integer merupakan level terkini dari kwitansi
* @param th is integer merupakan tahun dari kwitansi
*/ 
    function masuk_waktu_dibuatkan_sptb($id_kwitansi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th','$tgl_skrg $jam_skrg','dibuatkan sptb','$level_terkini')");
            }
/**
* Fungsi untuk menampilkan data sptb
* @param bulan is integer merupakan bulan dari kwitansi
* @param th is integer merupakan tahun dari kwitansi
* @return list of object
*/     
    function data_sptb($th,$bulan){            
            $this->db->select('*, year(tgl_sptb) as thn');
            $this->db->from('t_kwitansi');
            $this->db->join("t_sptb",'t_kwitansi.id_sptb=t_sptb.id_sptb','inner');
            $this->db->where('t_sptb.id_sifatpembayaran','4');
            $this->db->where('t_sptb.id_status_sptb','1');
            $this->db->where('MONTH(tgl_sptb)',$bulan);
            $this->db->where('th_sptb',$th);
            $this->db->group_by('t_sptb.id_sptb');
            return $this->db->get(); 
    }
/**
* Fungsi untuk menampilkan nama unit
* @param id_unit is integer merupakan id unit dari kwitansi
* @return list of object
*/  
    function nama_unit($id_unit){            
            $q=$this->db->query("SELECT nama_unit_singkat as maks FROM m_unit where id_unit='".$id_unit."'");
            $hasil=$q->row();
            return $hasil->maks;
    } 
/**
* Fungsi untuk menampilkan nama unit sptb
* @param id_unit is integer merupakan id unit dari kwitansi
* @return list of object
*/   
    function nama_unit_sptb($id_unit){            
            $q=$this->db->query("SELECT id_pd2,id_bpp,nama_unit FROM m_unit where id_unit='".$id_unit."'");
            return $hasil=$q->row();
    }
/**
* Fungsi untuk mengambil nama dan nip
* @param tabel is varchar merupakan nama tabel yang diinputkan oleh user
* @param field_id is integer merupakan id field yang diinputkanoleh user
* @param id is integer merupakan id dari tabel nip
* @return list of object
*/  	
    function ambil_nama_nip($tabel,$field_id,$id){
            $this->db->select('*');
            $this->db->from($tabel);
            $this->db->where($field_id,$id);
            $q= $this->db->get();  
            return $q->row();
    }
/**
* Fungsi untuk mengambil sptb kwitansi
* @param th is integer merupakan tahun dari sptb kwitansi
* @param id is integer merupakan id dari sptb kwitansi
* @return list of object
*/      
	function get_sptb_kwitansi($id,$th){
			$q=$this->db->query("SELECT *, SUBSTRING(akun_kode,7,2) AS jenis_belanja, year(tgl_sptb) as thn, `t_kwitansi`.`kdoutput` as kd_out FROM (`t_kwitansi`) INNER JOIN `t_sptb` as m ON `t_kwitansi`.`id_sptb`=`m`.`id_sptb` INNER JOIN `t_rkakl` as n ON `t_kwitansi`.`kdakun`=`n`.`kdakun` WHERE `m`.`id_sptb` = '$id' AND `m`.`th_sptb` = '$th' GROUP BY `m`.`id_sptb` ");
            return $q; 
    
    }
/**
* Fungsi untuk mengambil sptb kwitansi detail
* @param th is integer merupakan tahun dari sptb kwitansi
* @param id is integer merupakan id dari sptb kwitansi
* @return list of object
*/
    function get_sptb_kwitansi_detail($id,$th){
            $this->db->select('*','SUBSTRING(t_kwitansi.akun_kode,7,2) as jenis_belanja');
            $this->db->from('t_kwitansi, m_subunit');
            $this->db->where('id_sptb',$id);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('t_kwitansi.id_subunit = m_subunit.id_subunit');
            $kueri=$this->db->get();
            return $kueri->result();
    }
/**
* Fungsi untuk mengecek sptb kwitansi
* @param th is integer merupakan tahun dari sptb kwitansi
* @param id is integer merupakan id dari sptb kwitansi
* @param id_unit is integer merupakan id unit dari sptb kwitansi
* @return list of object
*/
    function cek_sptb($id,$id_unit,$th)
        {            // cek di database, ada ga?
            
            $this->db->from("t_sptb");
            $this->db->join("t_kwitansi as m",'m.id_sptb=t_sptb.id_sptb','inner');
            $this->db->join("m_unit as n",'t_sptb.id_unit=n.id_unit','inner');
            $this->db->where('n.id_unit',$id_unit); 
            $this->db->where('t_sptb.th_sptb',$th); 
            $this->db->where('t_sptb.id_sptb',$id);  
            $this->db->group_by('t_sptb.id_sptb');
            $result = $this->db->get();
            return $result;
        } 
/**
* Fungsi untuk mengecek sptb kwitansi yang diajukan
* @param th is integer merupakan tahun dari sptb kwitansi
* @param id is integer merupakan id dari sptb kwitansi
* @param id_unit is integer merupakan id unit dari sptb kwitansi
* @return list of object
*/
        function sptb_diajukan($id,$id_unit,$th)
        {            // cek di database, ada ga?
            
            $this->db->from("t_spp");
            $this->db->join("m_unit",'t_spp.id_unit=m_unit.id_unit','inner');
            $this->db->where('m_unit.id_unit',$id_unit); 
            $this->db->where('t_spp.th_spp',$th); 
            $this->db->where('t_spp.id_sptb',$id);   
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                // username dan password tsb tidak ada 
                return false;
            }
            else    
            {
                
                return true;
            }
        }
/**
* Fungsi untuk menyimpan spp
* @param sptb is integer merupakan nama dari sptb
* @param id_s is integer merupakan id dari spp yang akan dibuat
* @param id_unit is integer merupakan id unit dari spp yang akan dibuat
*/ 
    function simpan_spp($id_unit,$sptb, $id_s, $kode_unit)
        {         
            $nowFormat = date('Y-m-d H:i:s');      
            $ta = $this->m_settings->get_tahun_anggaran();      
            
            $dipa = $this->m_ls->ambil_level_tertinggi_dipa();
            foreach($dipa->result_array() as $row){
                            $dipa = $row['id_dipa'];  
            }
			$daftar_unit = $this->getDetailUnit($id_unit); 
                $kd_digit = $daftar_unit->kode_digit; 
            
            
            $id=$this->nomer->no_baru2('t_spp','spp','id_unit',$id_unit, date('y'), Constant::JB_LS,$kd_digit,$ta,Constant::JSPJ_SPP); 
            
            $this->db->set('id_sifatpembayaran','4'); 
            $this->db->set('id_jenispembayaran','1'); 
            $this->db->set('id_sptb',$id_s); 
            $this->db->set('id_kegiatan','1'); 
            $this->db->set('tgl_dibuat',$nowFormat);  
            $this->db->set('id_unit',$id_unit); 
            $this->db->set('id_dipa',$dipa); 
            $this->db->where('id_spp', $id['id_spp']);
            $this->db->where('th_spp', $id['th_spp']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_spp'); 
            
            $th  =date ('y');
			
            foreach($sptb->result_array() as $row){
            $id_sptb = $row['id_sptb'];     
            $id_kwitansi = $row['id_kwitansi'];     
            $th_sptb = $row['th_sptb'];  
            $this->m_ls->update_sptb_spp($id_sptb,$th_sptb);
            $this->m_ls->update_kwitansi($id_kwitansi,$th_sptb,$id['id_spp']);
            //echo $this->db->last_query();  
            /*                $get_id = $this->m_ls->ambil_level_tertinggi($id_trans,$th);
                            foreach($get_id->result_array() as $row){
                            $level = $row['level'];  
                            }
                            $level_terkini =  $level+1;           
                            $this->m_ls->masuk_waktu_dibuatkan_spp($id_trans,$level_terkini,$th); */
            }
        }
/**
* Fungsi untuk mengambil level tertinggi dipa
* @return list of object
*/		
        function ambil_level_tertinggi_dipa()
        {  
           $this->db->select_max('id_dipa');
           $this->db->from('m_dipa');    
           $this->db->where('aktif',1);  
           $query = $this->db->get(); 
           return $query;
        }
/**
* Fungsi untuk mengupdate sptb spp
* @param id_sptb is integer merupakan id dari sptb 
* @param th_sptb is integer merupakan tahun dari sptb
*/	
        function update_sptb_spp($id_sptb,$th_sptb)
        {     
             $this->db->set('id_status_sptb',2);  
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_sptb); 
             $this->db->update('t_sptb'); 
        } 
/**
* Fungsi untuk mengupdate kwitansi
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param th_kwitansi is integer merupakan tahun dari kwitansi 
*/	
        function update_kwitansi($id_sptb,$id_spp)
        {  
             $this->db->set('id_status_kwitansi',5);
             $this->db->set('id_spp',$id_spp); 
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk membuat spp gu
* @param id_unit is integer merupakan id dari unit pada spp
* @return list of object
*/	
        function spp_gu($id_unit)
        {   
            $q=$this->db->query("SELECT t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(nominal) as jumlah FROM t_kwitansi, t_sptb, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit ='$id_unit' and t_spp.id_sifatpembayaran ='4' group by t_spp.id_spp;");
            return $q;    
        } 
/** 
* Fungsi untuk menampilkan detail spp
* @param id_unit is integer merupakan id dari unit pada spp
* @param id_spp is integer merupakan id dari spp
* @param th_spp is integer merupakan tahun dari spp
* @return list of object
*/	
      
        function detail_spp($id_unit,$id_spp,$th_spp)
        {      
            $this->db->select('*, sum(nominal) as jumlah_spp');
			$this->db->from("t_spp"); 
            $this->db->join("m_dipa",'t_spp.id_dipa=m_dipa.id_dipa','inner');
            $this->db->join("m_sifatpembayaran",'t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran','inner');
            $this->db->join("m_jenispembayaran",'t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran','inner');
            $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');  
            $this->db->join("t_kwitansi",'t_kwitansi.id_sptb=t_sptb.id_sptb','inner');  
            $this->db->join("m_unit",'t_spp.id_unit=m_unit.id_unit','inner');
            $this->db->join("m_ppk",'m_ppk.id_ppk=m_unit.id_ppk','inner');
            $this->db->join("m_status_spp",'m_status_spp.id_status_spp=t_spp.id_status_spp','inner'); 
            $this->db->where('t_spp.id_unit',$id_unit);
            $this->db->where('t_spp.id_spp',$id_spp);
            $this->db->where('t_spp.th_spp',$th_spp);
            $this->db->group_by('t_spp.id_spp');
            $result = $this->db->get();
            return $result;
        } 
/** 
* Fungsi untuk menjumlahkan spp
* @param id_unit is integer merupakan id dari unit
* @param id_spp is integer merupakan id dari spp
* @param th_spp is integer merupakan tahun dari spp 
* @return list of object
*/	
        function jum ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_kwitansi.kdoutput as output, 
             t_kwitansi.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` 
             INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` 
             INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` 
             INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` 
             INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` 
             INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` 
             WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spp`.`th_spp` = '$th_spp' AND `t_spp`.`id_spp` = '$id_spp' 
             GROUP BY `t_kwitansi`.`kdoutput`, `t_kwitansi`.`kdakun`) as apa 
             on t_rkakl.kdoutput=apa.output and t_rkakl.kdakun=apa.akun 
             join 
            (SELECT kode_unit from m_unit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_unit
            group by t_rkakl.kdoutput, t_rkakl.kdakun");
            return $q->result();
        }
		/*function jum ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdkomponen,t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_kwitansi.kdoutput as output,t_kwitansi.kdkomponen as komponen, t_kwitansi.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spp`.`th_spp` = '$th_spp' AND `t_spp`.`id_spp` = '$id_spp' GROUP BY `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun`) as apa on t_rkakl.kdoutput=apa.output and t_rkakl.kdkomponen=apa.komponen and t_rkakl.kdakun=apa.akun join 
            (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit
            group by t_rkakl.kdoutput,t_rkakl.kdkomponen, t_rkakl.kdakun");
            return $q->result();
        }*/
/** 
* Fungsi untuk menjumlahkan spp sebagian
* @param id_unit is integer merupakan id yang dimiliki oleh unit 
* @param id_spp is integer merupakan id yang dimiliki oleh spp
* @param th_spp is integer merupakan tahun yang dimiliki oleh spp
* @return list of object
*/	
        function jum_sebagian ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_rkakl.kdoutput, t_rkakl.kdkomponen,t_rkakl.kdakun,sum(jumlah) as jumlah from t_rkakl join
            (SELECT t_kwitansi.kdoutput as output,t_kwitansi.kdkomponen as komponen, t_kwitansi.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spp`.`th_spp` = '$th_spp' AND `t_spp`.`id_spp` = '$id_spp' GROUP BY `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun`) as apa on t_rkakl.kdoutput=apa.output and t_rkakl.kdkomponen=apa.komponen and t_rkakl.kdakun=apa.akun join 
            (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit
            group by t_rkakl.kdoutput,t_rkakl.kdkomponen, t_rkakl.kdakun");
            return $q->result();
        } 
/** 
* Fungsi untuk menjumlahkan spp terdahulu
* @param id_unit is integer merupakan id dari unit pada pembuatan spp
* @param th_spp is integer merupakan tahun dari spp pada pembuatan spp
* @return list of object
*/	
        function jum_spp_terdahuluxxx ($id_unit,$th_spp)
        {
            $q=$this->db->query("
			select t_kwitansi.kdoutput, t_kwitansi.kdkomponen, t_kwitansi.kdakun,sum(nominal) as jumlah from t_kwitansi join
            	( SELECT t_kwitansi.kdoutput as output, t_kwitansi.kdkomponen as komponen, t_kwitansi.kdakun as akun FROM (`t_spp`) 
				  INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` 
				  INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` 
				  INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` 
				  INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` 
				  INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb`  
				  INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit`  
				  WHERE id_status_spp='12' and `t_spp`.`id_unit` = '$id_unit' and `t_spp`.`th_spp` = '$th_spp' 
				  GROUP BY `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun` ) 
            as apa on t_kwitansi.kdoutput=apa.output and t_kwitansi.kdkomponen=apa.komponen and t_kwitansi.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_kwitansi.id_subunit=total_unit.id_subunit
            group by `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun`");
            return $q->result();
        }
/** 
* Fungsi untuk menjumlahkan spp terdahulu
* @param id_unit is integer merupakan id dari unit pada pembuatan spp
* @param th_spp is integer merupakan tahun dari spp pada pembuatan spp
* @return list of object
*/	
        function jum_spp_terdahulu ($id_unit,$th_spp,$id_spp)
        {
            $kode_unit = $this->session->userdata('kode_unit');
			$tahun= date('Y');
				$q=$this->db->query("
						SELECT kegiatan, kdoutput, kdakun, SUM(pok), SUM(spp) AS jumlah
						FROM (
						SELECT kdgiat AS kegiatan, kdoutput, kdakun, SUM(jumlah) AS pok,0 AS spp
						FROM t_rkakl
						WHERE kode_unit = '$kode_unit' 
						AND tahun=$tahun 
						GROUP BY kdkomponen, kdakun
						UNION
						SELECT kegiatan, kdoutput, kdakun, 0 AS pok, SUM(nominal) AS spp
						FROM t_kwitansi
						WHERE id_unit = '$id_unit'  AND id_spp < '$id_spp'  AND YEAR(tgl_kwitansi)=$tahun
						GROUP BY kdkomponen, kdakun
						) AS temp
						GROUP BY kdoutput, kdakun
						");
            return $q->result();
        }
		
/** 
* Fungsi untuk menjumlahkan spp terkini
* @param id_unit is integer merupakan id dari unit pada pembuatan dari spp
* @param id_spp is integer merupakan id dari spp pada pembuatan kwitansi
* @param th_spp is integer
* @return list of object
*/
function jum_kini ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_kwitansi.kdoutput, t_kwitansi.kdakun,sum(nominal) as jumlah from t_kwitansi 
            join
            ( SELECT t_kwitansi.kdoutput as output, t_kwitansi.kdkomponen as komponen, t_kwitansi.kdakun as akun 
            FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` 
            INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` 
            INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` 
            INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` 
            INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb`  
            INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit`  
            WHERE `t_spp`.`id_unit` = '$id_unit' and `t_spp`.`th_spp` = '$th_spp' and `t_spp`.`id_spp` = '$id_spp' 
            GROUP BY `t_kwitansi`.`kdoutput`, `t_kwitansi`.`kdakun` ) 
            as apa 
            on t_kwitansi.kdoutput=apa.output and t_kwitansi.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit 
            on t_kwitansi.id_subunit=total_unit.id_subunit
            group by `t_kwitansi`.`kdoutput`, `t_kwitansi`.`kdakun`");
            return $q->result();
        }
	
        /*function jum_kini ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select t_kwitansi.kdoutput, t_kwitansi.kdkomponen, t_kwitansi.kdakun,sum(nominal) as jumlah from t_kwitansi join
            ( SELECT t_kwitansi.kdoutput as output, t_kwitansi.kdkomponen as komponen, t_kwitansi.kdakun as akun FROM (`t_spp`) INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb`  INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit`  WHERE `t_spp`.`id_unit` = '$id_unit' and `t_spp`.`th_spp` = '$th_spp' and `t_spp`.`id_spp` = '$id_spp' GROUP BY `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun` ) 
            as apa on t_kwitansi.kdoutput=apa.output and t_kwitansi.kdkomponen=apa.komponen and t_kwitansi.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_kwitansi.id_subunit=total_unit.id_subunit
            group by `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun`");
            return $q->result();
        }*/
		
/** 
* Fungsi untuk menentukan pagu total dipa
* @param id_unit is integer merupakan id dari unit
* @return list of object
*/
        function pagu_tot_dipa ($id_unit)
        {
            $tahun = date('Y');
            $q=$this->db->query("select sum(jumlah) from t_rkakl  join (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit where tahun='$tahun' ;");
            return $q;
        }
/** 
* Fungsi untuk menentukan total spp terbayar
* @param id_unit is integer merupakan id dari unit
* @param th_spp is integer merupakan tahun dari spp
* @return list of object
*/
function total_spp_terbayar ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_spp 
            INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` 
            INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` 
            where t_spp.id_sifatpembayaran = 3 and th_spp=$th_spp and id_status_spp='12' ;");
            return $q;
        }


        /*function total_spp_terbayar ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_spp INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` where th_spp=$th_spp and id_status_spp='12' ;");
            return $q;
        }*/ 
/** 
* Fungsi untuk menentukan total spp yang diajukan
* @param id_unit is integer merupakan id dari unit
* @param id_spp is integer merupakan id dari spp
* @param th_spp is integer merupakan tahun dari spp
* @return list of object
*/
        function total_spp_diajukan ($id_unit,$id_spp,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_kwitansi,t_sptb,t_spp WHERE `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` AND `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb`  AND  `t_spp`.`id_spp` = '$id_spp' AND  `t_spp`.`th_spp` = '$th_spp' ;");
            return $q;
        }
/** 
* Fungsi untuk menentukan total spp
* @param id_unit is integer merupakan id dari unit
* @param id_spp is integer merupakan id dari surat permintaan pembayaraan(spp)
* @return list of object
*/
        function all ($id_unit,$id_spp)
        {
            $tahun = date('Y');
            $kode_unit = $this->session->userdata('kode_unit');
            $q=$this->db->query("
					SELECT t_rkakl.kdkomponen, t_rkakl.kdakun, SUM(jumlah) AS jumlah 
					FROM t_rkakl 
					WHERE tahun=$tahun AND kode_unit = '$kode_unit'
					GROUP BY t_rkakl.kdkomponen, t_rkakl.kdakun				
					");
            return $q->result();
        }
/** 
* Fungsi untuk menentukan total spp terbayar perunit
* @param id_unit is integer merupakan id dari unit
* @param th_spp is integer merupakan tahun dari surat permintaan pembayaraan(spp)
* @return list of object
*/
        function total_spp_terbayar_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_spp INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` where id_status_spp='12' and t_spp.id_unit=$id_unit and th_spp=$th_spp ;");
            return $q;
        }
/** 
* Fungsi untuk menentukan total spp yang diajukan perunit
* @param id_unit is integer merupakan id dari unit
* @param th_spp is integer merupakan tahun dari surat permintaan pembayaraan(sp
* @return list of object
*/
        function total_spp_diajukan_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_spp INNER  JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` where t_spp.id_sifatpembayaran = 4 and id_status_spp='1' and t_spp.id_unit=$id_unit and th_spp=$th_spp ;");
            return $q;
        }
/** 
* Fungsi untuk menentukan total semua spp yang diajukan perunit
* @param id_unit is integer merupakan id dari unit
* @param th_spp is integer merupakan tahun dari surat permintaan pembayaraan(sp
* @return list of object
*/
        function total_spp_semua_diajukan_perunit ($id_unit,$th_spp)
        {
            $q=$this->db->query("select sum(nominal) from t_spp INNER JOIN  `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_sptb`.`id_sptb`=`t_kwitansi`.`id_sptb` where t_spp.id_unit=$id_unit and th_spp=$th_spp;");
            return $q;
        }
/** 
* Fungsi untuk menyimpan otorisasi spp up
* @param id is integer merupakan id dari spp up
* @param th is integer merupakan tahun dari spp up
*/
        function otorisasi_spp_up($id,$th)
        {  
             $this->db->set('id_status_spp',2);
             $this->db->where('id_spp',$id); 
             $this->db->where('th_spp',$th); 
             $this->db->update('t_spp'); 
        }
/** 
* Fungsi untuk menselek kwitansi yang dibuat
* @param id is integer merupakan id dari kwitansi
* @param th is integer merupakan tahun dari kwitansi
* @return list of object
*/
        function selek_kwitansi($id,$th)
        {  
           $this->db->select('*');
           $this->db->from('t_spp');
           $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');     
           $this->db->join("t_kwitansi",'t_kwitansi.id_sptb=t_sptb.id_sptb','inner');     
           $this->db->where('t_spp.id_spp',$id);
           $this->db->where('t_spp.th_spp',$th);
           $query = $this->db->get(); 
           return $query;
        }
/** 
* Fungsi untuk otorisasi sptb ppk
* @param id_sptb is integer merupakan id dari sptb
* @param th is integer merupakan tahun dari sptb
*/
		function otorisasi_sptb_ppk($id_sptb,$th)
        {  
             $this->db->set('id_status_sptb',3);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk otorisasi kwitansi ppk
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param th is integer merupakan tahun dari kwitansi 
* @return list of object
*/
        function otorisasi_kwitansi_ppk($id_kwitansi,$th)
        {  
             $this->db->set('id_status_kwitansi',6);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk mencatat waktu masuk otorisasi ppk
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param level is integer merupakan level dari otorisasi ppk
* @param th is integer merupakan tahun dari kwitansi 
*/	
        function masuk_waktu_otorisasi_ppk($id_kwitansi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th','$tgl_skrg $jam_skrg','terotorisasi ppk','$level_terkini')");
            }
/** 
* Fungsi untuk pembuatan spp up keuangan
* @param id_unit is integer merupakan id dari unit yans terselect pad spp
* @return list of object
*/	
        function spp_up_keu($id_unit)
        {      
            $q=$this->db->query("SELECT t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(nominal) as jumlah FROM t_kwitansi, t_sptb, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit ='$id_unit' and t_spp.id_sifatpembayaran ='4' group by t_spp.id_spp;");
            return $q;
        }
/** 
* Fungsi untuk mencari cara pembayaran
* @return list of object
*/
        function get_carabayar()
        {       
            $this->db->select('*');
            $this->db->from('m_carabayar');   
            $this->db->order_by('id_carabayar','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Cara Bayar-';
                $result[$row->id_carabayar]= ("$row->kode_carabayar - $row->carabayar"); 
            }  
            return $result;
        }
/** 
* Fungsi untuk mencari surat permintaan pembayaran(spp)
* @param id_unit is integer merupakan id dari unit
* @param id_spp is integer merupakan id dari spp
* @param th_spp is integer merupakan tahun dari spp
* @return list of object
*/
        function spp($id_unit,$id_spp,$th_spp)
        {   
            $q=$this->db->query("SELECT *,SUBSTRING(akun_kode,7,2) as j_belanja, m_kegiatan.kdkeg, m_sifatpembayaran.sifatpembayaran, m_jenispembayaran.jenispembayaran,  t_spp.id_spp, t_spp.no_spp,t_spp.th_spp,m_status_spp.status_spp,m_unit.nama_unit, sum(nominal) as jumlah FROM m_kegiatan,m_sifatpembayaran,m_jenispembayaran,t_kwitansi, t_sptb, t_spp, m_status_spp, m_unit WHERE t_spp.id_unit=m_unit.id_unit and m_status_spp.id_status_spp=t_spp.id_status_spp and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_unit ='$id_unit' and t_spp.id_spp ='$id_spp' and th_spp ='$th_spp' and t_spp.id_sifatpembayaran ='4' group by t_spp.id_spp;");
            return $q;  
        }
/** 
* Fungsi untuk mencari spp spm
* @param id_spp is integer merupakan id dari dari surat permintaan pembayaran (spp)
* @param th_spp is integer merupakan tahun dari spp
* @return boolean
*/
        function cek_spp_spm($id_spp,$th_spp)
        {
            
            $this->db->from("t_spm");
            $this->db->join("t_spp",'t_spm.id_spp=t_spp.id_spp','inner');    
            $this->db->where('t_spm.id_spp',$id_spp);  
            $this->db->where('t_spp.th_spp',$th_spp);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {      
                return false;
            }
            else    
            {   
                return true;
            }
        } 
/** 
* Fungsi untuk menyimpan spm
* @param id_spp is integer merupakan id dari dari surat permintaan pembayaran (spp)
* @param th_spp is integer merupakan tahun dari spp
* @param kwitansi is integer merupakan id yang dimiliki oleh kwitansi terpilih
* @param id_unit is integer merupakan id unit yang dimiliki oleh kwitansi terpilih
*/  
      function simpan_spm($id_spp,$kwitansi,$id_unit,$th_spp)
        {      
            $tgl_skrg = date("Y-m-d");         
            $cb = $this->input->post('cb');     
            $kepada = $this->input->post('kepada'); 
            $npwp = $this->input->post('npwp'); 
            $no_rek = $this->input->post('no_rek'); 
            $bank= $this->input->post('bank'); 
            $uraian = $this->input->post('uraian');    
            
            $id=$this->nomer->no_baru2('t_spm','spm','id_unit',$id_unit, date('y')); 
            
            $this->db->set('id_spp',$id_spp); 
            $this->db->set('tgl_spm',$tgl_skrg); 
            $this->db->set('id_carabayar',$cb); 
            $this->db->set('kepada',$kepada); 
            $this->db->set('npwp',$npwp);  
            $this->db->set('bank',$bank);  
            $this->db->set('nomor_rekening',$id_unit); 
            $this->db->set('uraian_spm',$uraian); 
            $this->db->where('id_spm', $id['id_spm']);
            $this->db->where('th_spm', $id['th_spm']);
            $this->db->where('id_unit', $id['id_unit']);
            $this->db->update('t_spm');
            
            $this->m_ls->update_status_spp($id_spp,$th_spp); 
            foreach($kwitansi->result_array() as $row){
              $id_sptb = $row['id_sptb'];
              $id_kwitansi = $row['id_kwitansi'];
              $this->m_ls->update_sptb_spm($id_sptb,$th_spp);
              $this->m_ls->update_kwitansi_spm($id_kwitansi,$th_spp);
              $get_id = $this->m_ls->ambil_level_tertinggi($id_kwitansi,$th_spp);
                            foreach($get_id->result_array() as $row){
                            $level = $row['level'];  
                            }
                            $level_terkini =  $level+1;           
                            $this->m_ls->masuk_waktu_dibuatkan_spm($id_kwitansi,$level_terkini,$th_spp);
          } 
        }
/** 
* Fungsi untuk mengupdate status spp
* @param id_spp is integer merupakan id dari dari surat permintaan pembayaran (spp)
* @param th_spp is integer merupakan tahun dari spp
*/          
		function update_status_spp($id_spp,$th_spp)
        {    
            $this->db->set('id_status_spp',3);   
            $this->db->where('id_spp', $id_spp);
            $this->db->where('th_spp', $th_spp);
            $this->db->update('t_spp');
        }
/** 
* Fungsi untuk mengupdate sptb spm
* @param id_spp is integer merupakan id dari dari surat permintaan pembayaran (spp)
* @param th_spp is integer merupakan tahun dari spp
*/  
        function update_sptb_spm($id_sptb,$th_spp)
        {    
            $this->db->set('id_status_sptb',4);   
            $this->db->where('id_sptb', $id_sptb);
            $this->db->where('th_sptb', $th_spp);
            $this->db->update('t_sptb');
        }
/** 
* Fungsi untuk mengupdate kwitansi spm
* @param id_kwitansi is integer merupakan id dari dari kwitansi
* @param th_spp is integer merupakan tahun dari spp
*/  
        function update_kwitansi_spm($id_kwitansi,$th_spp)
        {    
            $this->db->set('id_status_kwitansi',7);   
            $this->db->where('id_kwitansi', $id_kwitansi);
            $this->db->where('th_kwitansi', $th_spp);
            $this->db->update('t_kwitansi');
        }
/** 
* Fungsi untuk mencatat waktu masuk dibuatkannya spm
* @param id_kwitansi is integer merupakan id dari kwitansi
* @param th is integer merupakan tahun yang dimiliki oleh kwitansi
* @param level_terkini is integer merupakan level terkini yang dimiliki oleh kwitansi terpilih
*/  
        function masuk_waktu_dibuatkan_spm($id_kwitansi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th','$tgl_skrg $jam_skrg','dibuatkan spm','$level_terkini')");
            }
/** 
* Fungsi untuk menghitung spm jumlah gu
* @param id_unit is integer merupakan id dari unit
* @param th_spp is integer merupakan tahun dari surat permintaan pembayaran
* @return list of object
*/        
		function spm_gu_jum($id_unit)
        {      
            $q=$this->db->query("SELECT sum(nominal) FROM t_kwitansi, t_sptb, t_spp, t_spm, m_status_spm, m_unit WHERE t_spp.id_spp=t_spm.id_spp and t_spp.id_unit=m_unit.id_unit and m_status_spm.id_status_spm=t_spm.id_status_spm and t_sptb.id_sptb=t_spp.id_sptb and t_sptb.id_sptb=t_kwitansi.id_sptb and t_spp.id_unit ='$id_unit' and t_spp.id_sifatpembayaran ='4' group by t_spp.id_spp;");
            return $q; 
        }
/** 
* Fungsi untuk menyelek spm gu
* @param id_unit is integer merupakan id dari unit
* @return list of object
*/ 
        function spm_gu($id_unit)
        {      
           $this->db->select('*');
           $this->db->from('t_spm');
           $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner');     
           $this->db->join("m_status_spm",'m_status_spm.id_status_spm=t_spm.id_status_spm','inner');    
           $this->db->join("m_unit",'t_spm.id_unit=m_unit.id_unit','inner');    
           $this->db->join("m_sifatpembayaran",'m_sifatpembayaran.id_sifatpembayaran=t_spp.id_sifatpembayaran','inner');    
           $this->db->where('t_spp.id_sifatpembayaran',4);
           $this->db->where('t_spm.id_unit',$id_unit);
           $this->db->group_by('t_spm.id_spm');
           $query = $this->db->get(); 
           return $query;
        }
/** 
* Fungsi untuk menyeleksi detail spm
* @param id_unit is integer merupakan id dari unit
* @param id_spm is integer merupakan id dari surat perintah membayar(spm)
* @param th_spm is integer merupakan tahun dari unit
* @return list of object
*/
         function detail_spm($id_unit,$id_spm,$th_spm)
        {    
        
        $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spm.id_spm =$id_spm and t_spm.th_spm =$th_spm and t_spp.id_sifatpembayaran =4 group by t_spm.id_spm;");
            return $q; 


        }
/** 
* Fungsi untuk menghitung jumlah terkini dari spm
* @param id_unit is integer merupakan id dari unit
* @param id_spm is integer merupakan id dari spm
* @param th_spm is integer merupakan tahun dari unit
* @return list of object
*/
        function jum_kini_spm ($id_unit,$id_spm,$th_spm)
        {
            $q=$this->db->query("select t_kwitansi.kdoutput, t_kwitansi.kdkomponen, t_kwitansi.kdakun,sum(nominal) as jumlah from t_kwitansi join
            ( SELECT t_kwitansi.kdoutput as output,t_kwitansi.kdkomponen as komponen,t_kwitansi.kdakun as akun FROM (`t_spm`) INNER JOIN `t_spp` ON `t_spp`.`id_spp`=`t_spm`.`id_spp` INNER JOIN `m_dipa` ON `t_spp`.`id_dipa`=`m_dipa`.`id_dipa` INNER JOIN `m_sifatpembayaran` ON `t_spp`.`id_sifatpembayaran`=`m_sifatpembayaran`.`id_sifatpembayaran` INNER JOIN `m_jenispembayaran` ON `t_spp`.`id_jenispembayaran`=`m_jenispembayaran`.`id_jenispembayaran` INNER JOIN `t_sptb` ON `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `t_kwitansi` ON `t_kwitansi`.`id_sptb`=`t_sptb`.`id_sptb` INNER JOIN `m_unit` ON `t_spp`.`id_unit`=`m_unit`.`id_unit` WHERE `t_spp`.`id_unit` = '$id_unit' AND `t_spm`.`th_spm` = '$th_spm' AND `t_spm`.`id_spm` = '$id_spm' GROUP BY `t_kwitansi`.`kdoutput`,`t_kwitansi`.`kdkomponen`, `t_kwitansi`.`kdakun` ) 
            as apa on t_kwitansi.kdoutput=apa.output and t_kwitansi.kdkomponen=apa.komponen and t_kwitansi.kdakun=apa.akun join 
            (SELECT id_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_kwitansi.id_subunit=total_unit.id_subunit
            group by t_kwitansi.kdoutput,t_kwitansi.kdkomponen,t_kwitansi.kdakun");
            return $q->result();
        }
/** 
* Fungsi untuk menghitung jumlah yang diajukan dari spm
* @param id_unit is integer merupakan id dari unit
* @param id_spm is integer merupakan id dari surat perintah membayar(SPM)
* @param th_spm is integer merupakan tahun dari surat perintah membayar(SPM)
* @return list of object
*/
        function total_spm_diajukan ($id_unit,$id_spm,$th_spm)
        {
            $q=$this->db->query("select sum(nominal) from t_kwitansi,t_sptb,t_spp, t_spm WHERE `t_spp`.`id_sptb`=`t_sptb`.`id_sptb` AND `t_kwitansi`.`id_sptb`=`t_sptb`.`id_sptb` AND `t_spm`.`id_spp`=`t_spp`.`id_spp` AND  `t_spm`.`id_unit` = '$id_unit' AND  `t_spm`.`id_spm` = '$id_spm' AND  `t_spm`.`th_spm` = '$th_spm' and t_spp.id_sifatpembayaran='4' ;");
            return $q;
        }
/** 
* Fungsi untuk mengupdate data spm
* @param id_unit is integer merupakan id dari unit
* @param id_spm is integer merupakan id dari surat perintah membayar(SPM)
* @param th_spm is integer merupakan tahun dari surat perintah membayar(SPM)
*/ 
        function update_spm($id_unit,$id_spm,$th_spm)
        {      
                
            $kepada = $this->input->post('kepada'); 
            $npwp = $this->input->post('npwp'); 
            $no_rek = $this->input->post('no_rek'); 
            $bank= $this->input->post('bank'); 
            $uraian = $this->input->post('uraian');     
             $this->db->set('kepada',$kepada); 
             $this->db->set('npwp',$npwp); 
             $this->db->set('nomor_rekening',$no_rek); 
             $this->db->set('bank',$bank); 
             $this->db->set('uraian_spm',$uraian); 
             $this->db->where('id_spm', $id_spm);
             $this->db->where('th_spm', $th_spm);
             $this->db->where('id_unit', $id_unit);
             $this->db->update('t_spm');
        }
/** 
* Fungsi untuk mencari nama fakultas
* @param id_unit is integer merupakan id yang dimiliki oleh unit yang dimiliki user
* @return list of object
*/ 
        function nama_fakultas($id_unit)
        {   
            $this->db->select("*"); 
            $this->db->from("m_unit"); 
            $this->db->join("m_dekan",'m_dekan.id_dekan=m_unit.id_dekan','inner'); 
            $this->db->where('id_unit',$id_unit);   
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk mencari dipa
* @param id_unit is integer merupakan id dari unit yang dimiliki oleh user
* @return list of object
*/ 
        function dipa()
        {   
            $this->db->select("*"); 
            $this->db->from("m_dipa");   
            $this->db->where('aktif',1);   
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk mencari mp pengeluran
* @param id_unit is integer merupakan id dari unit yang dimiliki oleh user
* @return list of object
*/ 
        function mp_pengeluaran($id_unit)
        {     
            $q=$this->db->query("select sum(jumlah) as jumlah from t_rkakl join (SELECT kode_subunit from m_subunit where id_unit=$id_unit) as total_unit on t_rkakl.kode_unit=total_unit.kode_subunit;");
            return $q;
        }
/** 
* Fungsi untuk membuat otorisasi spm up
* @param id is integer merupakan id yang dimiliki oleh spm up
* @param th is integer merupakan tahun yang dimiliki spm up 
*/ 
        function otorisasi_spm_up($id,$th)
        {  
             $this->db->set('id_status_spm',2);
             $this->db->where('id_spm',$id); 
             $this->db->where('th_spm',$th); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk menyelek kwitansi spm
* @param id is integer merupakan id yang dimiliki oleh spm up
* @param th is integer merupakan tahun yang dimiliki spm up 
* @return list of object
*/ 
        function selek_kwitansi_spm($id,$th)
        {  
           $this->db->select('*');
           $this->db->from('t_spm');
           $this->db->join("t_spp",'t_spm.id_spp=t_spp.id_spp','inner');     
           $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');     
           $this->db->join("t_kwitansi",'t_kwitansi.id_sptb=t_sptb.id_sptb','inner');     
           $this->db->where('t_spp.id_spp',$id);
           $this->db->where('t_spp.th_spp',$th);
           $query = $this->db->get(); 
           return $query;
        }
/** 
* Fungsi untuk otorisasi kwitansi up
* @param id_kwitansi is integer merupakan id yang dimiliki oleh kwitansi terpilih
* @param th is integer merupakan tahun yang dimiliki oleh kwitansi terpilih
* @return list of object
*/
        function otorisasi_kwitansi_up2($id_kwitansi,$th)
        {  
             $this->db->set('id_status_kwitansi',8);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th); 
             $this->db->update('t_kwitansi'); 
        } 
/** 
* Fungsi untuk otorisasi sptb up
* @param id_kwitansi is integer merupakan id yang dimiliki oleh kwitansi terpilih
* @param th is integer merupakan tahun yang dimiliki oleh kwitansi terpilih
* @return list of object
*/
        function otorisasi_sptb_up2($id_sptb,$th)
        {  
             $this->db->set('id_status_sptb',5);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk otorisasi spp up
* @param id_spp is integer merupakan id dari surat permintaan pembayaran (SPP)
* @param th is integer merupakan tahun dari surat permintaan pembayaran (SPP)
* @return list of object
*/
        function otorisasi_spp_up2($id_spp,$th)
        {  
             $this->db->set('id_status_spp',4);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th); 
             $this->db->update('t_spp'); 
        }
/** 
* Fungsi untuk mengetahui waktu dekan masuk untuk otorisasi spp
* @param id_kwitansi is integer merupakan id dari kwitansi yang terpilih
* @param level_terkini is integer merupakan level dari otorisasi dekan 
* @param th is integer merupakan tahun dari dilakukannya otorisasi dekan
*/
        function masuk_waktu_otorisasi_dekan($id_kwitansi,$level_terkini,$th)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th','$tgl_skrg $jam_skrg','terotorisasi dekan','$level_terkini')");
            }
/** 
* Fungsi untuk mengetahui spm up pengeluaran
* @param th is integer merupakan tahun dari dilakukannya otorisasi dekan
* @return list of object
*/
        function spm_up_pen($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk mengecek adanya verifikasi atau tidak
* @param id is integer merupakan id dari kwitansi yang diverifikasi
* @param th is integer merupakan tahun dari dilakukannya otorisasi dekan
* @return boolean
*/
        function cek_ada_veri($id,$th)
        {   
            $this->db->select('*');
            $this->db->from('t_detail_veri');   
            $this->db->where('id_spm',$id);  
            $this->db->where('th_spm',$th);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {     
                return false;
            }
            else    
            {
                
                return true;
            }
        }
/** 
* Fungsi untuk mendapatkan syarat umum UP
* @return list of object
*/	
        function getSyaratUmum_up()
        {  
           $result = array();
           $this->db->select('*');
           $this->db->from('m_verifikasi');   
           $this->db->where('id_jenis',8);   
           $this->db->where('id_persyaratan',1);   
           $query = $this->db->get();   
           return $query;
        }
/** 
* Fungsi untuk mendapatkan list khusus UP
* @return list of object
*/	
        function getKhususList()
           {
            $result = array();
            $this->db->select('*');
            $this->db->from('m_jenis_khusus');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Unit-';
                $result[$row->id_jenis_khusus]= ("$row->id_jenis_khusus - $row->nama_jenis");
            }
            
            return $result;
        }
/** 
* Fungsi untuk membuat spm up pengeluaran
* @param id is integer merupakan id dari spm up (surat perintah membayar uang persediaan) 
* @param th is integer  merupakan tahun dari spm  up
* @return list of object
*/
        function spm_up_pen4($id,$th)
        {      
            $this->db->from("t_spm"); 
            $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner'); 
            $this->db->join("m_sifatpembayaran",'t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran','inner'); 
            $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');
            $this->db->join("t_kwitansi",'t_sptb.id_sptb=t_kwitansi.id_sptb','inner');  
            $this->db->join("m_unit",'t_spm.id_unit=m_unit.id_unit','inner');
            $this->db->where('t_spm.id_spm',$id);
            $this->db->where('t_spm.th_spm',$th);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result;
        } 
/** 
* Fungsi untuk membuat detail daftar spm up
* @param id is integer merupakan id dari spm up (surat perintah membayar uang persediaan) 
* @param th is integer  merupakan tahun dari spm  up
* @return list of object
*/
        function detail_daftar($id,$th)
        {   
			$this->db->select('*');   
            $this->db->from("t_spm"); 
            $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner');  
            $this->db->join("m_sifatpembayaran",'t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran','inner');  
            $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');
            $this->db->join("t_kwitansi",'t_sptb.id_sptb=t_kwitansi.id_sptb','inner');  
            $this->db->join("m_unit",'t_spm.id_unit=m_unit.id_unit','inner');  
            $this->db->join("m_kegiatan",'m_kegiatan.id_keg=t_spp.id_kegiatan','inner');     
            $this->db->where('t_spm.id_spm',$id);
            $this->db->where('t_spm.th_spm',$th);
            $this->db->group_by('t_spm.id_spm');
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk membuat checklist umum 
* @param id is integer merupakan id dari spm up (surat perintah membayar uang persediaan) 
* @param th is integer  merupakan tahun dari spm  up
* @return list of object
*/
        function ceklist_umum($id,$th)
         {   
            $this->db->select('*');
            $this->db->from('t_spm');
            $this->db->join("t_detail_veri",'t_detail_veri.id_spm=t_spm.id_spm','inner'); 
            $this->db->join("m_verifikasi",'m_verifikasi.id_uraian=t_detail_veri.id_uraian','inner'); 
            $this->db->where('id_persyaratan',1); 
            $this->db->where('t_detail_veri.id_spm', $id); 
            $this->db->where('t_detail_veri.th_spm', $th); 
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk membuat checklist khusus
* @param id is integer merupakan id dari spm up (surat perintah membayar uang persediaan) 
* @param th is integer  merupakan tahun dari spm  up
* @return list of object
*/
        function ceklist_khusus($id,$th)
         {   
            $this->db->select('*');
            $this->db->from('t_spm');
            $this->db->join("t_detail_veri",'t_detail_veri.id_spm=t_spm.id_spm','inner'); 
            $this->db->join("m_verifikasi",'m_verifikasi.id_uraian=t_detail_veri.id_uraian','inner');  
            $this->db->join("m_jenis_khusus",'m_jenis_khusus.id_jenis_khusus=m_verifikasi.id_jenis','inner');  
            $this->db->where('id_persyaratan',2); 
            $this->db->where('t_detail_veri.id_spm', $id); 
            $this->db->where('t_detail_veri.th_spm', $th);
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk memanggil setting
* @return list of object
*/
        function select_setting()
         {   
            $this->db->select('*');
            $this->db->from('m_setting'); 
            $result = $this->db->get();
            return $result;
        }
/** 
* Fungsi untuk mengupdate data penyerah
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
*/
        function update_penyerah($id,$th)
        {
        // cek di database, ada ga?  
            $nm = $this->input->post('nmpenyerah');     
            $nip = $this->input->post('nippenyerah');     
            $this->db->set('nama_penyerah',$nm); 
            $this->db->set('nip_penyerah',$nip); 
            $this->db->where('id_spm', $id);    
            $this->db->where('th_spm', $th);    
            $this->db->update('t_spm');
             
        } 
/** 
* Fungsi untuk menginsert data detail
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
*/
        function insert_detail($id,$th)
        {   

            $cek = $this->input->post('cek');  
                for($i=0;$i<count($_POST['cek']);$i++){
                    $q = $this->db->query("insert into t_detail_veri(id_spm,th_spm,id_uraian) values ('$id','$th',$cek[$i])");
                } 
                
        }
/** 
* Fungsi untuk update data detail
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
*/ 
        function update_detail($id,$th)
        {
        // cek di database, ada ga?  
        $tes = $this->input->post('tes'); 
        for($i=0;$i<count($_POST['tes']);$i++){
             $this->db->set('flag_cek',1); 
             $this->db->where('id_spm', $id);
             $this->db->where('th_spm', $th);
             $this->db->where('id_uraian', $tes[$i]);
             $this->db->update('t_detail_veri');
             
        }
        }
/** 
* Fungsi untuk mengupdate data kelengkapan
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
* @param tes integer merupakan variabel pengujian 
*/
        function update_kelengkapan($id,$th,$tes)
        {
        // cek di database, ada ga?   
        for($i=0;$i<count($tes);$i++){
             $this->db->set('flag_cek',1); 
             $this->db->where('id_spm', $id);
             $this->db->where('th_spm', $th);
             $this->db->where('id_uraian', $tes[$i]);
             $this->db->update('t_detail_veri');
             
        }
        }
/** 
* Fungsi untuk mengupdate data kelengkapan
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
* @return boolean
*/
        function ada_flag_cek($id_spm,$th_spm)
        {
            $this->db->select('*'); 
            $this->db->from('t_detail_veri');
            $this->db->where('flag_cek',0); 
            $this->db->where('id_spm',$id_spm); 
            $this->db->where('th_spm',$th_spm); 
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                return false;
            }
            else    
            {   
                return true;
            }
        }
/** 
* Fungsi untuk mengetahui persetujuan BAK
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
*/
        function setuju_bak($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',3);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk mengetahui spp transaksi
* @param id is integer merupakan id dari spm (surat perintah membayar) 
* @param th is integer  merupakan tahun dari spm
* @return list of object
*/
        function selek_spp_trans($th_spm,$id_spm)
        {  
           $this->db->select('*');
           $this->db->from('t_spm');    
           $this->db->join("t_spp",'t_spp.id_spp=t_spm.id_spp','inner'); 
           $this->db->join("t_sptb",'t_sptb.id_sptb=t_spp.id_sptb','inner');     
           $this->db->join("t_kwitansi",'t_kwitansi.id_sptb=t_sptb.id_sptb','inner');     
           $this->db->where('t_spm.id_spm',$id_spm);
           $this->db->where('t_spm.th_spm',$th_spm);
           $query = $this->db->get(); 
           return $query;
        }
/** 
* Fungsi untuk mengetahui transaksi statistik verifikasi blu
* @param id_kwitansi is integer merupakan id kwitansi terpilih
* @param th_spm is integer merupakan tahun surat perintah membayar
*/
        function trans_stat_veri_blu($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',10);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk mengetahui transaksi statistik verifikasi blu
* @param id_spp is integer merupakan id surat permintaan pembayaran dari transaksi terpilih 
* @param th_spm is integer merupakan tahun surat permintaan pembayaran dari transaksi terpilih 
*/
        function spp_stat_veri_blu($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',5);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp'); 
        }
/** 
* Fungsi untuk mengetahui statistik verifikasi sptb blu
* @param id_sptb is integer merupakan id dari sptb terpilih 
* @param th_spm is integer merupakan tahun surat permintaan pembayaran dari transaksi terpilih 
*/
        function sptb_stat_veri_blu($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',6);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk mengetahui waktu masuk petugas penerima
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih 
* @param level_terkini is integer merupakan level dari waktu masuk petugas penerima
* @param th_spm is integer 
*/
        function masuk_waktu_dicek_petugas_penerima($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','diotorisasi petugas penerima','$level_terkini')");
            }
/** 
* Fungsi untuk mengetahui verifikasi spm up
* @param th is integer merupakan tahun dari pemverifikasian spm up
* @return list of object
*/	
        function spm_up_veri($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk mengetahui detail spm up
* @param id_spm is integer merupakan id dari spm yang terpilih
* @param th_spm is integer merupakan tahun dari spm terpilih
* @return list of object
*/
        function detail_spm2($id_spm,$th_spm)
        {     
            $q=$this->db->query("SELECT tgl_sptb, t_kwitansi.id_kwitansi,t_sptb.id_sptb, m_subunit.nama_subunit, sum(nominal) as jumlah FROM t_spp, t_spm, t_sptb, t_kwitansi,m_subunit WHERE t_spm.id_spp=t_spp.id_spp and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_kwitansi.id_subunit = m_subunit.id_subunit and t_spm.id_spm = '$id_spm' and t_spm.th_spm = '$th_spm' group by t_kwitansi.id_subunit;");
            return $q;
        }
/** 
* Fungsi untuk persetujuan verifikasi
* @param id_spm is integer merupakan id dari spm yang terpilih
* @param th_spm is integer merupakan tahun dari spm terpilih
*/
        function setuju_veri($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',4);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk mengetahui status transaksi subag dm
* @param id_kwitansi is integer merupakan id dari kwitansi yang terpilih
* @param th_spm is integer merupakan tahun dari spm terpilih
*/
        function trans_stat_subag_dm($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',11);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk mengetahui status transaksi subag dm
* @param id_sptb is integer merupakan id dari sptb dari kwitansi terpilih
* @param th_spm is integer  merupakan tahun dari spm terpilih
*/	
        function sptb_stat_subag_dm($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',7);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk mengetahui status spp transaksi subag dm
* @param id_spp is integer merupakan id dari spp dari kwitansi terpilih
* @param th_spm is integer  merupakan tahun dari spm terpilih
*/        
        function spp_stat_subag_dm($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',6);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp'); 
        }
/** 
* Fungsi untuk mengetahui waktu masuk otorisasi verifikator pusat
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih
* @param level_terkini is integer merupakan level terakhir dari otorisasi pusat  
* @param th_spm is integer merupakan tahun dari spm yang terpilih
*/   		
        function masuk_waktu_otorisasi_verifikator_pusat($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi verifikator pusat','$level_terkini')");
            }
/** 
* Fungsi untuk mengetahui spm up dm
* @param th is integer merupakan tahun dari pembuatan spm up
* @return list of object
*/ 
        function spm_up_dm($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk persetujuan dm
* @param th_spm is integer merupakan tahun dari pembuatan spm terpilih pada dm
* @param id_spm is integer merupakan id dari pembuatan spm terpilih pada dm
*/
        function setuju_dm($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',5);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk membuat persetujuan dm
* @param th_spm is integer merupakan tahun dari pembuatan spm
* @param id_kwitansi is integer merupakan id kwitansi dari pembuatan spm
*/
        function trans_stat_kabag_keu($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',12);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi');
        }
/** 
* Fungsi untuk membuat status sptb kabag keuangan
* @param th_spm is integer merupakan tahun dari pembuatan spm
* @param id_sptb is integer merupakan id sptb dari pembuatan spm 
*/
        function sptb_stat_kabag_keu($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',8);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk membuat status spp kabag keuangan
* @param th_spm is integer merupakan tahun dari pembuatan spm
* @param id_spp is integer merupakan id spp dari pembuatan spm 
*/
        function spp_stat_kabag_keu($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',7);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp'); 
        }
/** 
* Fungsi untuk status sptb kabag keuangan
* @param th_spm is integer merupakan tahun dari pembuatan spm
* @param level_terkini is integer merupakan level terkini dari status kabag keuangan
* @param id_kwitansi is integer merupakan id dari kwitansi terpilih
*/
        function masuk_waktu_otorisasi_subag_dm($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi kasubag dana masyarakat','$level_terkini')");
            }
/** 
* Fungsi untuk status spm up kabag keuangan
* @param th is integer merupakan tahun dai pengisian status spm kabag keuangan
* @return list of object
*/
        function spm_up_kabag($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk membuat persetujuan kabag
* @param id_spm is integer merupakan id dari spm
* @param th_spm is integer merupakan tahun dari spm
* @return list of object
*/        
		function setuju_kabag($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',6);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk membuat transaksi status ppsp2d
* @param id_kwitansi is integer merupakan id kwitansi yang akan dipergunakan dalam pembuatan ppsp2d
* @param th_spm is integer merupakan tahun dari spm terpilih
*/ 
        function trans_stat_ppsp2d($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',13);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi');
        }
/** 
* Fungsi untuk membuat sptb status ppsp2d
* @param id_sptb is integer merupakan id dari sptb yang terpilih 
* @param th_spm is integer merupakan tahun dari spm yang terpilih
*/ 
        function sptb_stat_ppsp2d($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',9);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk membuat eptb status ppsp2d
* @param id_spp is integer merupakan id dari spp yang dipergunakan 
* @param th_spm is integer merupakan tahun dari spm yang terpilih
*/
        function spp_stat_ppsp2d($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',8);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp');
        }
/** 
* Fungsi untuk menyimpan waktu otorisasi kabag keuangan
* @param id_kwitansi is integer merupakan id dari kwitansi yang terpilih
* @param level_terkini is integer merupakan level terkini dari otorisasi kabag keuangan
* @param th_spm is integer  merupakan tahun dari spm yang terpilih
*/
        function masuk_waktu_otorisasi_kabag_keu($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi kabag keuangan','$level_terkini')");
            }
/** 
* Fungsi untuk membuat spm up sp2d
* @param th is integer merupakan tahun dari spm yang terpilih
* @return list of object
*/
        function spm_up_sp2d($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm =$th group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk membuat pengecekan sp2d
* @param id_spm is integer merupakan id dari spm yang terpilih
* @param th_spm is integer merupakan tahun dari spm yang terpilih
* @return boolean
*/
        function cek_adasp2d($th_spm,$id_spm)
        {
            
            $this->db->select('*');
            $this->db->from('t_sp2d');   
            $this->db->where('id_spm',$id_spm);  
            $this->db->where('th_sp2d',$th_spm);  
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {    
                return false;
            }
            else    
            {return true; }
        }
/** 
* Fungsi untuk membuat sp2d
* @param id_spm is integer merupakan id dari sp2d yang terpilih
* @param th_spm is integer merupakan tahun dari sp2d yang terpilih
* @param trans is integer merupakan transaksi yang tercatat dari sp2d yang terpilih 
*/
        function buat_sp2d($id_spm,$trans,$th_spm)
        {
            $tahun = date("Y");
            $tgl_skrg = date("Y-m-d");    
            $id=$this->nomer->id_baru('t_sp2d','sp2d', date('y')); 
            
            $no = sprintf("%04d", $id['id_sp2d']);
            $nomor_sp2d = ''.$no.'/LS/BLU/'.$tahun; 
            
            $this->db->set('id_spm',$id_spm);
            $this->db->set('no_sp2d',$nomor_sp2d);
            $this->db->set('tgl_buat',$tgl_skrg);
            $this->db->where('id_sp2d', $id['id_sp2d']);
            $this->db->where('th_sp2d', $id['th_sp2d']);
            $this->db->update('t_sp2d'); 
            
            foreach($trans->result_array() as $row){
                    $id_kwitansi = $row['id_kwitansi'];
                    $id_sptb = $row['id_sptb'];
                    $id_spp = $row['id_spp'];
                    $this->m_ls->trans_stat_telah_sp2d($id_kwitansi,$th_spm);
                    $this->m_ls->sptb_stat_telah_sp2d($id_sptb,$th_spm);
                    $this->m_ls->spp_stat_telah_sp2d($id_spp,$th_spm);
                    
                    $get_id = $this->m_ls->ambil_level_tertinggi($id_kwitansi,$th_spm);
                    foreach($get_id->result_array() as $row){
                    $level = $row['level'];  
                    }
                    $level_terkini =  $level+1;           
                    $this->m_ls->masuk_waktu_dibuatkan_sp2d($id_kwitansi,$level_terkini,$th_spm);
            }
        }
/** 
* Fungsi untuk membuat trans status sp2d
* @param id_kwitansi is integer merupakan id dari kwitansi pada status sp2d
* @param th_spm is integer merupakan tahun dari spm pada status sp2d
*/		
        function trans_stat_telah_sp2d($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',14);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk membuat status sptb setelah sp2d
* @param id_kwitansi is integer merupakan id dari kwitansi pada status sptb
* @param th_spm is integer merupakan tahun dari spm pada status sptb
*/	
        function sptb_stat_telah_sp2d($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',10);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb'); 
        }
/** 
* Fungsi untuk membuat status spp setelah sp2d
* @param id_spp is integer merupakan id dari spp pada status spm
* @param th_spm is integer merupakan tahun dari kwitansi pada status spm
*/	
        function spp_stat_telah_sp2d($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',9);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp');
        }
/** 
* Fungsi untuk membuat history pembuatan sp2d
* @param id_kwitansi is integer merupakan id dari kwitansi pada penyimpanan waktu masuk sp2d
* @param level_terkini is integer merupakan id dari kwitansi pada penyimpanan waktu masuk sp2d
* @param th_spm is integer merupakan tahun dari spm pada penyimpanan waktu masuk sp2d
*/
        function masuk_waktu_dibuatkan_sp2d($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','dibuatkan sp2d','$level_terkini')");
            }
/** 
* Fungsi untuk membuat persetujuan sp2d
* @param id_sptb is integer merupakan id dari sptb pada persetujuan sp2d
* @param th_spm is integer merupakan tahun dari spm pada penyimpanan waktu masuk sp2d
*/
        function setuju_sp2d($id_spm,$th_spm)
        {  
             $this->db->set('id_status_spm',7);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk membuat detail sp2d
* @param id_spm is integer merupakan id yang diambil dari spm
* @return list of object
*/		
        function detail_sp2d($id_spm)
        {      
            $q=$this->db->query("SELECT nmakun,t_sp2d.*,kdkeg, t_spm.*, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE t_spm.id_spm=t_sp2d.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk membuat otorisasi pr2
* @param id_spm is integer merupakan id dari spm terpilih
* @param th_spm is integer merupakan tahun dari spm terpilih
*/
    function otorisasi_pr2($th_spm,$id_spm)
        {  
             $this->db->set('id_status_spm',8);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_spm); 
             $this->db->update('t_spm'); 
        } 
/** 
* Fungsi untuk membuat status transaksi oleh pr2
* @param id_kwitansi is integer merupakan id dari kwitansi yang akan diotorisasi oleh pr2
* @param th_spm is integer merupakan tahun dari spm yang akan diotorisasi oleh pr2
*/
        function trans_stat_pr2($id_kwitansi,$th_spm)
        {  
             $this->db->set('id_status_kwitansi',15);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi'); 
        }
/** 
* Fungsi untuk membuat status sptb oleh pr2
* @param id_sptb is integer merupakan id dari sptb yang akan diotorisasi oleh pr2
* @param th_spm is integer merupakan tahun dari spm yang akan diotorisasi oleh pr2

*/
        function sptb_stat_pr2($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',10);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb');  
        }
/** 
* Fungsi untuk membuat status spp oleh pr2
* @param id_spp is integer merupakan id dari spp yang akan diotorisasi oleh pr2
* @param th_spm is integer merupakan tahun dari spm yang akan diotorisasi oleh pr2
*/
        function spp_stat_pr2($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',9);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp');
        }
/** 
* Fungsi untuk membuat history otorisasi oleh pr2
* @param id_kwitansi is integer merupakan id dari kwitansi yang akan diotorisasi oleh pr2
* @param th_spm is integer merupakan tahun dari spm yang akan diotorisasi oleh pr2
* @param level_terkini is integer merupakan level terakhir dari history otorisasi pr2
*/		
        function masuk_waktu_otorisasi_pr2($id_kwitansi,$level_terkini,$th_spm)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_spm','$tgl_skrg $jam_skrg','terotorisasi pr2','$level_terkini')");
            }
/** 
* Fungsi untuk membuat list sp2d
* @param th is integer merupakan list tahun yang ingin ditampilkan  
* @return list of object
*/	
            function list_sp2d($th)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*,t_sp2d.id_sp2d,t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and t_spm.th_spm= '$th' group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk membuat list sp2d bagian ke 2
* @param id_sp2d is integer merupakan id dari sp2d terpilih
* @param th_sp2d is integer merupakan tahun dari sp2d terpilih
* @return list of object
*/
        function list_sp2d2($id_sp2d,$th_sp2d)
        {      
            $q=$this->db->query("SELECT kdkeg, t_spm.*,t_sp2d.id_sp2d,t_sp2d.tgl_buat, t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM t_sp2d,t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and  t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and id_sp2d=$id_sp2d and th_sp2d=$th_sp2d group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk mengambil no bg
* @param th_sp2d is integer merupakan tahun dari sp2d terpilih
* @return list of object
*/
        function ambil_nomor_bg($th_sp2d)
        {  
           $q=$this->db->query("select m_bg.id_bg,m_bg.nomor_bg from m_bg join (SELECT MIN(`id_bg`) AS id_bg FROM (`m_bg`) WHERE `status_bg` = 'baru' ) as nomor on m_bg.id_bg = nomor.id_bg where th_bg='$th_sp2d';");
           return $q->result();
        }
/** 
* Fungsi untuk membuat bg sp2d
* @param id_sp2d is integer merupakan id dari sp2d yang terpilih
* @param id_bg is integer merupakan id dari bilyet dan giro(BG) 
* @param th_sp2d is integer merupakan tahun dari sp2d terpilih
*/		
        function buat_bg_sp2d($id_sp2d,$id_bg,$th_sp2d)
        {                  
             $this->db->set('id_bg',$id_bg);
             $this->db->where('id_sp2d',$id_sp2d); 
             $this->db->where('th_sp2d',$th_sp2d); 
             $this->db->update('t_sp2d'); 
        }
/** 
* Fungsi untuk update bg sp2d
* @param id_bg is integer merupakan id dari bilyet dan giro(BG) 
* @param th_sp2d is integer merupakan tahun dari sp2d terpilih
*/
        function update_bg($id_bg,$th_sp2d)
        {  
             $this->db->set('status_bg','terpakai'); 
             $this->db->where('id_bg',$id_bg); 
             $this->db->where('th_bg',$th_sp2d); 
             $this->db->update('m_bg'); 
        }
/** 
* Fungsi untuk membuat bg
* @param id_spm is integer merupakan id dari spm yang terpilih pada pembuatan bg
* @param th_sp2d is integer merupakan tahun dari sp2d yang dipadukan pada pembuatan bg 
*/		
        function buat_bg($id_spm,$th_sp2d)
        {  
             $this->db->set('id_status_spm',9);
             $this->db->where('id_spm',$id_spm); 
             $this->db->where('th_spm',$th_sp2d); 
             $this->db->update('t_spm'); 
        }
/** 
* Fungsi untuk membuat transaksi setelah bg
* @param id_kwitansi is integer merupakan id dari kwitansi yang terpilih
* @param th_sp2d is integer merupakan tahun dari surat perintah pencairan dana(sp2d)
*/	
        function trans_stat_telah_bg($id_kwitansi,$th_sp2d)
        {  
             $this->db->set('id_status_kwitansi',16);
             $this->db->where('id_kwitansi',$id_kwitansi); 
             $this->db->where('th_kwitansi',$th_spm); 
             $this->db->update('t_kwitansi');
        }
/** 
* Fungsi untuk membuat status sptb setelah bg
* @param id_sptb is integer merupakan id dari sptb yang terpilih 
* @param th_spm is integer merupakan tahun dari spm terpilih
*/
        function sptb_stat_telah_bg($id_sptb,$th_spm)
        {  
             $this->db->set('id_status_sptb',11);
             $this->db->where('id_sptb',$id_sptb); 
             $this->db->where('th_sptb',$th_spm); 
             $this->db->update('t_sptb');  
        }
/** 
* Fungsi untuk membuat status spp setelah bg
* @param id_sptb is integer merupakan id dari sptb setelah pembuatan bg
* @param th_spm is integer merupakan tahun dari spm yang dibuat
*/
        function spp_stat_telah_bg($id_spp,$th_spm)
        {  
             $this->db->set('id_status_spp',10);
             $this->db->where('id_spp',$id_spp); 
             $this->db->where('th_spp',$th_spm); 
             $this->db->update('t_spp');
        }
/** 
* Fungsi untuk membuat status spp setelah bg
* @param id_kwitansi is integer merupakan id dari kwitansi pada status spp
* @param level_terkini is integer merupakan level terkini dari status spp
* @param th_sp2d is integer merupakan tahun dari sp2d yang telah dibuat 
*/
        function masuk_waktu_dibuatkan_bg($id_kwitansi,$level_terkini,$th_sp2d)
        {
            $tgl_skrg = date("Y-m-d"); 
            $jam_skrg = date("H:i:s");
            $w = $this->db->query("insert into tb_waktu_kwitansi(id_kwitansi,th_kwitansi, tanggal_waktu,status_waktu,level) values('$id_kwitansi','$th_sp2d','$tgl_skrg $jam_skrg','dibuatkan bg','$level_terkini')");
        }
/** 
* Fungsi untuk membuat list sp2d bagian ke 3
* @param id_sp2d is integer merupakan id dari sp2d yang terpilih
* @param th_sp2d is integer merupakan tahun dari sp2d 
*/
        function list_sp2d3($id_sp2d,$th_sp2d)
        {      
            $q=$this->db->query("SELECT m_bg.nomor_bg,kdkeg, t_spm.*,t_sp2d.id_sp2d,t_sp2d.tgl_buat, t_sp2d.th_sp2d,t_sp2d.no_sp2d, m_dekan.*,m_status_spm.*, kode_digit, carabayar, singkat, sifatpembayaran, jenispembayaran,singkat,nama_unit, sum(nominal) as jumlah FROM m_bg,t_sp2d,t_spm,m_status_spm,t_spp,m_kegiatan,m_dipa,m_sifatpembayaran,m_jenispembayaran,m_carabayar,t_sptb,t_kwitansi,m_unit,m_dekan WHERE t_sp2d.id_bg=m_bg.id_bg and t_sp2d.id_spm=t_spm.id_spm and m_status_spm.id_status_spm=t_spm.id_status_spm and t_spp.id_spp=t_spm.id_spp and m_kegiatan.id_keg=t_spp.id_kegiatan and t_spp.id_dipa=m_dipa.id_dipa and t_spp.id_sifatpembayaran=m_sifatpembayaran.id_sifatpembayaran and t_spp.id_jenispembayaran=m_jenispembayaran.id_jenispembayaran and t_spm.id_carabayar=m_carabayar.id_carabayar and t_spp.id_sptb=t_sptb.id_sptb and t_kwitansi.id_sptb=t_sptb.id_sptb and t_spp.id_unit=m_unit.id_unit and m_dekan.id_dekan=m_unit.id_dekan and t_spp.id_sifatpembayaran =4 and id_sp2d=$id_sp2d and th_sp2d=$th_sp2d group by t_spm.id_spm;");
            return $q;
        }
/** 
* Fungsi untuk membuat cek ada bg
* @param nomor_bg is integer merupakan no bilyet dan giro yang diinputkan user
* @return boolean
*/  
        function cek_adabg($nomor_bg)
        {
            // cek di database, ada ga?
            $this->db->from('m_bg');
            $this->db->where('nomor_bg',$nomor_bg);       
            $this->db->where('status_bg','baru');       
            $result = $this->db->get();
            if($result->num_rows() == 0) 
            {
                 
                return false;
            }
            else    
            {
                
                return true;
            }
        }
/** 
* Fungsi untuk membuat history transaksi
* @param id_transaksi is integer merupakan id dari transaksi yg telah diinputkan 
* @param th_transaksi is integer merupakan tahun dari transaksi yang dibuat
* @return list of object
*/ 
   function history($id_transaksi,$th_transaksi)
        {      
            $this->db->select('*');
            $this->db->from("tb_waktu_transaksi");  
            $this->db->where('tb_waktu_transaksi.id_transaksi',$id_transaksi); 
            $this->db->where('tb_waktu_transaksi.th_transaksi',$th_transaksi); 
            $result = $this->db->get();
            return $result;
        }
   

/** 
* Fungsi untuk membuat data kwitansi versi pengadaan
* @return list of object
*/ 
 function data_kuitansi_ver_pengadaan()
     {            
            $result=$this->db->query("SELECT * 
                FROM t_kwitansi_kontrak
                WHERE 
                ( id_status_kwitansi=1 OR id_status_kwitansi=3 OR id_status_kwitansi=19 OR id_status_kwitansi=21 )
                AND id_sifatpembayaran=4
                AND jenis_kwitansi = 2 
                GROUP BY id_kwitansi_kontrak 
                                ");
            return $result; 
    }
/** 
* Fungsi untuk mengambil data kwitansi pengadaan
* @param id is integer merupakan id dari kwitansi pengadaan yg dipilih
* @param th is integer merupakan tahun dari verifikasi kwitansi pengadaan
* @return list of object
*/ 
  function getKuitansi_ver_pengadaan($id,$th){
            $this->db->select('*, year(tgl_kwitansi) as tahun');
            $this->db->from('t_kwitansi_kontrak');
            $this->db->where('id_kwitansi_kontrak',$id);
            $this->db->where('th_kwitansi_kontrak',$th);
            return $this->db->get(); 

    }
/** 
* Fungsi untuk mengambil jenis pajak kwitansi pengadaan
* @param id is integer merupakan id dari kwitansi pengadaan terpilih 
* @param th is integer merupakan tahun dari kwitansi pengadaan yang terselect
* @return list of object
*/ 
 function get_jenis_pajak_ver_pengadaan($id,$th){
        
        $result=$this->db->query("
                SELECT tb_pajak.ppn AS ppn,tb_pajak.pph AS pph,tb_pajak.ket AS ket  
                FROM tb_pajak, t_kwitansi_kontrak 
                WHERE t_kwitansi_kontrak.id_pajak=tb_pajak.id_pajak 
				AND t_kwitansi_kontrak.id_kwitansi_kontrak = '".$id."' 
				AND t_kwitansi_kontrak.th_kwitansi_kontrak = '".$th."' 
                                ");
        return $result;
    }
/** 
* Fungsi untuk membuat kwitansi pengadaan
* @param status is integer merupakan status yang dimiliki oleh kwitansi pengadaan
* @param id is integer merupakan id dari kwitansi yang dimiliki oleh kwitansi pengadaan
* @param th is integer merupakan tahun dari kwitansi yang terpilih
* @param st_kwitansi is integer merupakan tahun dari kwitansi yang terpilih
* @param jenis_kwitansi is integer merupakan jenis yang dimiliki oleh kwitansi pengadaan 
* @param id_sifatpembayaran is integer merupakan sifat pembayaran dari kwitansi pengadaan
*/ 
 function up_kwitansi_pengadaan($status,$id,$th,$st_kwitansi,$jenis_kwitansi,$id_sifatpembayaran)
     {            
		$this->db->set('id_status_kwitansi',$status);
		$this->db->set('st_kwitansi',$st_kwitansi);
		$this->db->where('id_kwitansi_kontrak', $id);
		$this->db->where('th_kwitansi_kontrak', $th);
		$this->db->update('t_kwitansi_kontrak'); 		   
	 }

/** 
* Fungsi untuk membuat data revisi kwitansi pengadaan
* @return list of object
*/ 
 function data_rev_kuitansi_pengadaan()
     {        
    $id_subunit = $this->session->userdata('id_subunit');    
            $result=$this->db->query("SELECT * 
                FROM t_kwitansi_kontrak 
                WHERE 
                ( id_status_kwitansi=2 or id_status_kwitansi=18 or id_status_kwitansi=20 )
                GROUP BY id_kwitansi_kontrak 
                                ");
            return $result; 
    }

/** 
* Fungsi untuk membuat edit data kwitansi pengadaan
* @param objek is integer merupakan inputan yang diisikan oleh user
* @param id_kwitansi is integer merupakan id dari kwitansi yang terpilih
* @param th_kwitansi is integer merupakan tahun dari kwitansi yang terpilih
*/ 
 function edit_kwitansi_pengadaan($objek,$id_kwitansi,$th_kwitansi){
    $this->db->where('id_kwitansi_kontrak', $id_kwitansi);
	$this->db->where('th_kwitansi_kontrak', $th_kwitansi);
    $this->db->update('t_kwitansi_kontrak', $objek);
  }  

/** 
* Fungsi untuk membuat data kuitansi cetak
* @return list of object
*/ 
	function data_kuitansi_cetak(){	
	$kode_subunit = $this->session->userdata('id_subunit');		
			$sql= $this->db->query("SELECT DISTINCT `id_kwitansi`,`th_kwitansi`,`status`,`nip_pengambil`, no_kwitansi,  `tgl_kwitansi`,`jenis_kwitansi`,`kegiatan`, `nominal`, `t_kwitansi`.`kdakun`, `t_kwitansi`.`kdoutput`, `ket_kwitansi`, `pengambil`, `penerima` ,id_status_kwitansi 
									FROM (`t_kwitansi`) 
									WHERE `id_status_kwitansi` = '18' 
									AND id_subunit= '$kode_subunit' 
									AND `t_kwitansi`.`id_sifatpembayaran`='4' 
									AND `t_kwitansi`.`jenis_kwitansi`<>'2' 
									AND `t_kwitansi`.`th_kwitansi`='".date('y')."' 
									");
			return $sql; 
	}
/** 
* Fungsi untuk mengubah status kwitansi cetak
* @param id is integer merupakan id dari kwitansi yang dipilih
* @param th is integer merupakan tahun dari kwitansi yang dipilih
*/   
     function ubah_status_kwi_cetak($th,$id)
        { 
                 
            $this->db->set('id_status_kwitansi',19);       
            $this->db->where('id_kwitansi',$id);
            $this->db->where('th_kwitansi',$th);
            $this->db->where('jenis_kwitansi <> 2');
            $this->db->where('id_sifatpembayaran = 4');
            $this->db->update('t_kwitansi'); 
        }
 
/** 
* Fungsi untuk mengambil jenis honor
* @param id is integer merupakan id dari kwitansi yang dipilih
* @param th is integer merupakan tahun dari kwitansi yang dipilih
* @return list of object
*/
function ambil_jenis_honor($id,$th)
        {  
           $this->db->select('jns_honor');
           $this->db->from('tb_honor_gu');    
           $this->db->where('id_kwitansi',$id);  
           $query = $this->db->get(); 
           return $query;
        }
/** 
* Fungsi untuk menampilkan honor
* @param id is integer merupakan id dari kwitansi yang dipilih
* @return list of object
*/
 function view_honor($id)
        {            
            $this->db->select('*, year(t_kwitansi.tgl_kwitansi) as tahun, tb_honor_gu.pph as pph_honor');
            $this->db->from('tb_honor_gu');
            $this->db->join("t_kwitansi",'t_kwitansi.id_kwitansi=tb_honor_gu.id_kwitansi','inner');         
            $this->db->where('tb_honor_gu.id_kwitansi',$id);
            return $this->db->get(); 
        }
/** 
* Fungsi untuk mendapatkan nama dari subunit
* @return list of object
*/
function get_nama_subunit(){
        $id_subunit = $this->session->userdata('id_subunit');
        $this->db->select('nama_subunit');
        $this->db->from('m_subunit');
        $this->db->where('id_subunit',$id_subunit); 

        return $this->db->get(); 
    }
/** 
* Fungsi untuk mendapatkan list tarif
* @return list of object
*/
function getTarifList()
        {
            $result = array();
            $this->db->select('*');
            $this->db->from('m_rincian_tarif');
          
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Komponen-';
                $result[$row->id_tarif]= ("$row->id_tarif - $row->uraian_tarif");
            }
            
            return $result; 
        }   
/** 
* Fungsi untuk mencari list tarif
* @param tarif is integer merupakan id dari list tarif yang dipilih 
* @return list of object
*/
function searchListTarif($tarif)
		{
 		   $this->db->select('*');
           $this->db->from('m_detail_tarif');    
           $this->db->where('id_tarif',$tarif);  
           $query = $this->db->get(); 
           return $query;
}

    function jumlahLs_revisi($id_subunit){
	   	$this->db->select('*');
		$this->db->from("t_kwitansi");  
		$this->db->where('id_subunit',$id_subunit); 
		$this->db->where('id_sifatpembayaran','4'); 
		$this->db->where('( id_status_kwitansi = 2 or id_status_kwitansi = 20 )');
		return $this->db->count_all_results();
	   }
	function jumlahLs_cetak($id_subunit){
	   	$this->db->select('*');
		$this->db->from("t_kwitansi");  
		$this->db->where('id_subunit',$id_subunit); 
		$this->db->where('id_sifatpembayaran','4'); 
		$this->db->where('id_status_kwitansi = 18');
		return $this->db->count_all_results();
	   }

   function jumlahLsVeri($id_unit){
	   	$this->db->select('*');
		$this->db->from("t_kwitansi");  
		$this->db->where('id_sifatpembayaran','4');  
		$this->db->where('id_unit',$id_unit); 
		$this->db->where('( id_status_kwitansi = 1 or id_status_kwitansi = 3 or id_status_kwitansi = 19 or id_status_kwitansi = 21 )');
		return $this->db->count_all_results();
	   }
   function jumlahSppLsBk($id_unit){
		$this->db->from('t_spp');
		$this->db->where('id_status_spp','2');
		$this->db->where('id_sifatpembayaran','4');
		$this->db->where('id_unit',$id_unit);  
		return $this->db->count_all_results();
   }
   function jumlahSpmLsBk($id_unit){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','1');
		$this->db->where('id_sifatpembayaran','4');
		$this->db->where('t_spp.id_unit',$id_unit);
		return $this->db->count_all_results();
   }	   
   function jumlahSpmLsPenerima(){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','2');
		$this->db->where('id_sifatpembayaran','4');
		return $this->db->count_all_results();
   }
   function jumlahSpmLsVeri(){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','3');
		$this->db->where('id_sifatpembayaran','4');
		return $this->db->count_all_results();
	}
	function jumlahSpmLsSubag(){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','4');
		$this->db->where('id_sifatpembayaran','4');
		return $this->db->count_all_results();
	   }
	function jumlahSpmLsKabag(){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','5');
		$this->db->where('id_sifatpembayaran','4');
		return $this->db->count_all_results();
	   }
	function jumlahSpmLsPpsp2d(){
		$this->db->from('t_spm');
		$this->db->join('t_spp','t_spp.id_spp = t_spm.id_spp');
		$this->db->where('id_status_spm','6');
		$this->db->where('id_sifatpembayaran','4');
		return $this->db->count_all_results();
	   }
/**
* Fungsi untuk mendapatkan data nama sub unit
* @param id_kwitansi is integer id kwitansi sebagai acuan mencari nama subunit pembuat kwitansi
* @return object
*/	
function get_nm_subunit(){
        $id_subunit = $this->session->userdata('id_subunit');
        $this->db->select('nama_subunit');
        $this->db->from('m_subunit');
        $this->db->where('id_subunit',$id_subunit); 
        return $this->db->get(); 
    }

/**
* Fungsi untuk mendapatkan nilai banyaknya data kwitansi
* @return list of object 
*/		
    function semua_data_kuitansi(){    
    $id_subunit = $this->session->userdata('id_subunit');        
            $sql= $this->db->query("SELECT *, jk as jenis_kwitansi FROM t_kwitansi AS k, m_status_kwitansi AS ms, m_jeniskwitansi AS mj
									WHERE k.id_status_kwitansi=ms.id_status_kwitansi
									AND k.jenis_kwitansi=mj.id_jk
									AND k.id_sifatpembayaran=mj.id_sifat_pembayaran
									AND k.th_kwitansi='".date('y')."' 
									AND k.id_subunit='$id_subunit'
									AND k.id_sifatpembayaran='4' " );
            return $sql; 
    }

    function info_jum_kwitansi()
        {
            $th_kwitansi = date('y');
            $id_subunit = $this->session->userdata('id_subunit');
            $this->db->query(" SELECT * FROM t_kwitansi AS k, m_status_kwitansi AS m
								WHERE k.id_status_kwitansi=m.id_status_kwitansi
								AND k.th_kwitansi='$th_kwitansi' 
								AND k.id_subunit='$id_subunit' 
								AND k.id_sifatpembayaran='4' "); 
			return $this->db->count_all_results();
        }

	function upJumUnduh($id,$th){
        $result=$this->db->query(" UPDATE t_kwitansi SET jum_unduh=jum_unduh+1 WHERE id_kwitansi=$id AND th_kwitansi=$th AND id_sifatpembayaran='4' ");
        return $result;
	   }
	function jumUnduh($th,$id){
        $result = $this->db->query(" select jum_unduh from t_kwitansi WHERE id_kwitansi=$id AND th_kwitansi=$th AND id_sifatpembayaran='4' ");
		$row = $result->row();	
		$jum_unduh = $row->jum_unduh;		
        return $jum_unduh;
	   }
	   
//===============Kontrak Pengabdian / penelitian===========
/**
* Fungsi untuk mendapatkan nama output
* @return result data array 
*/
 function getOutputListKontrak($jns_kwitansi)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('type_kwitansi',$jns_kwitansi); 
            $this->db->order_by('kdoutput','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Output-';
                $result[$row->kdoutput]= ("$row->kdoutput - $row->nmoutput");
            }
            return $result;
        }

/**
* Fungsi untuk mendapatkan nama komponen list
* @return result data array 
*/ 
function getKomponenListKontrak($jns_kwitansi)
        {
            $kdoutput = $this->input->post('kdoutput');
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
            $this->db->where('type_kwitansi','KONTRAK'); 
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Komponen-';
                $result[$row->kdkomponen]= ("$row->kdkomponen - $row->nmkomponen");
            }
            return $result; 
        }   
/**
* Fungsi untuk mendapatkan data sub komponen
* @return list of object
*/	
 function getSubKomponenListKontrak($jns_kwitansi,$kdoutput,$kdkomponen)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
			$this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('type_kwitansi','KONTRAK'); 
			$this->db->where('kdskomponen IS NOT NULL');
            $this->db->order_by('nmkomponen','ASC');
            $array_keys_values = $this->db->get();
			
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Sub Komponen-';
                $result[$row->kdskomponen]= ("$row->kdskomponen - $row->nmskomponen");
            }
            
            return $result; 
        } 
		
		/**
* Fungsi untuk menghitung data sub komponen
* @return list of object
*/	
 function getCountSubKomponenKontrak($jns_kwitansi,$kdoutput,$kdkomponen)
        {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit); 
            $this->db->where('kdoutput',$kdoutput); 
			$this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('type_kwitansi','KONTRAK'); 
		    $this->db->where('kdskomponen IS NOT NULL'); 
            $this->db->order_by('nmkomponen','ASC');
			return $this->db->count_all_results();
			
        } 
/**
* Fungsi untuk mendapatkan nama akun list
* @return result data array 
*/ 		
   function getAkunListKontrak($jns_kwitansi,$kdoutput,$kdkomponen)
       {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('type_kwitansi','KONTRAK'); 
            $this->db->order_by('kdakun','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Akun-';
                $result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
            }
            
            return $result;
        }

/**
* Fungsi untuk mendapatkan data akun
* @return list of object
*/	        
    function getAkunList_testKontrak($jns_kwitansi,$kdoutput,$kdkomponen,$kdskomponen)
       {
            $kode_subunit = $this->session->userdata('kode_subunit');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_subunit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
			$this->db->where('kdskomponen',$kdskomponen);
            $this->db->where('type_kwitansi','KONTRAK'); 
            $this->db->order_by('kdakun','ASC');
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Akun-';
                $result[$row->kdakun]= ("$row->kdakun - $row->nmakun"); 
            }
            
            return $result;
        }

/**
* Fungsi untuk mendapatkan nama header list
* @param kdakun is integer untuk inputan kode akun dari user
* @param kdkomponen is integer untuk inputan kode komponen dari user
* @param kdoutput is integer untuk inputan kode output dari user
* @return result data array 
*/ 			
    function getHeaderListKontrak($kdakun, $kdkomponen,$kdoutput)
        {
            
            $kode_unit = $this->session->userdata('kode_subunit');
            $id_akun = $this->input->post('id_akun');
            $result = array();
            $this->db->select('*');
            $this->db->from('t_rkakl');
            $this->db->where('kode_unit',$kode_unit);  
            $this->db->where('kdoutput',$kdoutput);
            $this->db->where('kdkomponen',$kdkomponen);
            $this->db->where('kdakun',$kdakun); 
            $array_keys_values = $this->db->get();
            foreach ($array_keys_values->result() as $row)
            
            { 
                $result[0]= '-Pilih Header-';
                $result[$row->id_header]= ("$row->hdr");
            }
            
            return $result;
        } 

/**
* Fungsi untuk menyimppan data kwitansi surat perjalanan dinas yg telah dibuat
* @param tgl_kwitansi is date untuk inputan tanggal kwitansi dari user
* @param tpt_kwitansi is varchar untuk inputan tempat kwitansi dari user
* @param kdoutput is varchar untuk kode output kwitansi dari user
* @param kdakun is varchar untuk inputan kode akun dari user
* @param kdkomponen is varchar untuk inputan kode komponen dari user
* @param hdr is varchar untuk inputan header dari user
* @param nmoutput is varchar untuk inputan nama output dari user
* @param nmkomponen is varchar untuk inputan nama komponen dari user
* @param nmakun is varchar untuk inputan nama akun dari user
* @param nmheader is varchar untuk inputan nama header dari user	
* @param pp_spd is varchar untuk inputan nama petugas penerbit surat perjalanan dinas dari user	
* @param no_sk_spd is varchar  untuk inputan no surat keputusan surat perjalanan dinas dari user		
* @param dari is varchar untuk inputan tempat asal keberangkatan dari user		
* @param tujuan is varchar untuk inputan tempat tujuan perjalanan dinas dari user	
* @param yg_berpergian is varchar untuk inputan orang yang berangkat dalam perjalanan dinas dari user		 
* @param nip is varchar	untuk inputan nip petugas yang berangkat dari user	
* @param golongan_spd is varchar untuk inputan golongan dari user	 	
* @param maksud is varchar untuk inputan tujuan keberangkatan dari user	
* @param tgl_b is date untuk inputan tanggal berangkat dari user	
* @param tgl_k is date untuk inputan tanggal kembali dari user	
* @param ket_spd is varchar untuk inputan keterangan perjalanan dinas dari user	
* @param perincianzz is varchar untuk inputan perincian dari user	
* @param jumlah is integer untuk inputan jumlah dari user	
* @param pph_spd is integer untuk inputan pajak penghasilan dari perjalanan dinas dari user	
*/
function simpan_kontraktual_Peng(	$jns_kwitansi, $tgl_kwitansi, $tpt_kwitansi, 
									$kdoutput, $kdkomponen,$kdskomponen, $kdakun, $hdr, 
									$nmoutput, $nmkomponen,$nmsubkomponen, $nmakun, $nmheader, 					
									$ket_kwitansi, $judul_p, $pengambil, $nip_pengambil,  
									$nominal, $no_kontrak, $jangka_waktu)
{
	 	$subunit = $this->session->userdata('id_subunit');
		$unit_kerja = $this->session->userdata('id_unit');

		$this->db->trans_strict(FALSE);
		$this->db->trans_start();
        $id=$this->nomer->no_baru2('t_kwitansi','kwitansi','id_subunit',$subunit, date('y')); 
		
		if($jns_kwitansi=='KONTRAK_PENGABDIAN')
		{$jenis_kwitansi=7;}
		else if ($jns_kwitansi=='KONTRAK_PENELITIAN')
		{$jenis_kwitansi=6;}
		
		 $this->db->set('id_sifatpembayaran','4');
		 $this->db->set('jenis_kwitansi',$jenis_kwitansi); 
		 $this->db->set('id_unit',$unit_kerja); 
		 $this->db->set('tgl_kwitansi',$tgl_kwitansi);
		 
		 $this->db->set('kegiatan','4078');
         $this->db->set('kdoutput',$kdoutput);
         $this->db->set('kdkomponen',$kdkomponen);
		 $this->db->set('kdskomponen',$kdskomponen);
         $this->db->set('kdakun',$kdakun);
         $this->db->set('hdr',$hdr);
		 
		 $this->db->set('nmoutput',$nmoutput);
         $this->db->set('nmkomponen',$nmkomponen);
		 $this->db->set('nmskomponen',$nmsubkomponen);
		 $this->db->set('nmakun',$nmakun);
		 $this->db->set('nmheader',$nmheader);
		 
		 $this->db->set('tpt_kwitansi',$tpt_kwitansi);	
		 $this->db->set('ket_kwitansi',$ket_kwitansi);	 
		 $this->db->set('judul_p',$judul_p);
		 $this->db->set('pengambil',$pengambil);	 
		 $this->db->set('nip_pengambil',$nip_pengambil);	
		 $this->db->set('pengambil',$pengambil);	 
		 $this->db->set('no_kontrak',$no_kontrak);
		 $this->db->set('nominal',$nominal);	
		 $this->db->set('jangka_waktu_kontrak',$jangka_waktu);	 
			
			$this->db->where('id_kwitansi', $id['id_kwitansi']);
			$this->db->where('th_kwitansi', $id['th_kwitansi']);
			$this->db->where('id_subunit', $id['id_subunit']);
			$this->db->update('t_kwitansi');
			
			//=== INSERT DATA KELENGKAAN ===
			$this->db->query("INSERT into t_verunit (id_kwitansi, th_kwitansi, id_ver, flag, jenis_kwitansi, id_sifatpembayaran)
								SELECT	".$id['id_kwitansi'].",".$id['th_kwitansi'].", id_ver, 0, $jenis_kwitansi, 4 
								FROM m_verunit, t_kwitansi
								WHERE m_verunit.id_sifat_pembayaran=t_kwitansi.id_sifatpembayaran
								AND m_verunit.jenis_kwitansi=t_kwitansi.jenis_kwitansi
								AND t_kwitansi.id_kwitansi=".$id['id_kwitansi']."
								AND t_kwitansi.th_kwitansi=".$id['th_kwitansi']
								);

	//print_r($perincianzz);
/*	if(isset($perincianzz) && $perincianzz[0]!=''){
		$uang=0;
		$pajak=0;
            foreach ($perincianzz as $no=>$nam){	
									
				$uang=($uang + $jumlah[$no]);
				$pajak=($pajak + $pph_spd[$no]);
				
				$id_rincian = $this->nomer->no_baru('tb_spd','spd','id_subunit',$subunit, date('y'));
				
					 $this->db->set('id_kwitansi',$id['id_kwitansi']);
					 $this->db->set('rincian',$nam);
					 $this->db->set('jumlah',$jumlah[$no]);
					 $this->db->set('pph', $pph_spd[$no]);
						
						$this->db->where('id_spd', $id_rincian['id_spd']);
						$this->db->where('th_spd', $id_rincian['th_spd']);
						$this->db->where('id_subunit', $id_rincian['id_subunit']);
						$this->db->update('tb_spd'); 		   
					
					//==============================
					$this->db->set('nominal',$uang);
					$this->db->set('pph',$pajak);
					$this->db->where('id_kwitansi', $id['id_kwitansi']);
					$this->db->where('th_kwitansi', $id['th_kwitansi']);
					$this->db->where('id_subunit', $id['id_subunit']);
					$this->db->update('t_kwitansi');
						   
            }
	}
	
*/	
		$this->db->trans_complete();
		if ($this->db->trans_status() === FALSE){
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Gagal di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/buat_kwitansi'>";
		}else{
			?>    
				<script type="text/javascript" language="javascript">
				alert(" Data Berhasil di simpan");
				</script>             
			<?php echo "<meta http-equiv='refresh' content='0; url=".site_url()."ls/daftar_kwitansi_ls'>";
		}	
		
}

//===========LOGIC MP====
	function cek_ada_pagu_real(){
        $id_subunit = $this->session->userdata('id_subunit');
           $this->db->select('pagu_real');
           $this->db->from('t_pagu_real');
           $this->db->where('subunit',$id_subunit);
           $this->db->where('tahun',date("Y"));
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->pagu_real))
		   {return $result->pagu_real;}
		   else
		   {return 0;}
	   }

	function pagu_real(){
        $id_subunit = $this->session->userdata('id_subunit');
           $this->db->select('pagu_real');
           $this->db->from('t_pagu_real');
           $this->db->where('subunit',$id_subunit);
           $this->db->where('tahun',date("Y"));
           $result = $this->db->get();
           return $result->num_rows() ;  
	   }

function cek_ketersediaan_mp()
        {
           $id_subunit = $this->session->userdata('id_subunit');
		   $tahun = date("Y");       
           $this->db->select('(alokasi_pnbp-spp_up-spp_tup-spp_gu-spp_ls-spp_ini) AS selisih');
           $this->db->from('t_mp');
           $this->db->where('id_subunit',$id_subunit);
           $this->db->where('bulan_mp = (SELECT MAX(bulan_mp) FROM t_mp where tahun_mp='.$tahun.')');
           $result = $this->db->get();
           return $result->num_rows() ;  
		   
        }
	function jum_paguMP(){
           $id_subunit = $this->session->userdata('id_subunit');
		   $tahun = date("Y");       
           $this->db->select('(alokasi_pnbp-spp_up-spp_tup-spp_gu-spp_ls-spp_ini) AS selisih');
           $this->db->from('t_mp');
           $this->db->where('id_subunit',$id_subunit);
           $this->db->where('bulan_mp = (SELECT MAX(bulan_mp) FROM t_mp where tahun_mp='.$tahun.')');
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->selisih))
     	   {return $result->selisih;}
           else
           {return 0;}
		   
	   }
	function jum_summKwitansi(){
        $id_subunit = $this->session->userdata('id_subunit');
           $this->db->select('sum(nominal) AS jumlah');
           $this->db->from('t_kwitansi');
           $this->db->where('id_subunit',$id_subunit);
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->jumlah))
		   {return $result->jumlah;}
		   else
		   {return 0;}
	   }
	function jum_dpt(){
        $id_subunit = $this->session->userdata('id_subunit');
           $this->db->select('*');
           $this->db->from('t_dpt');
           $this->db->where('id_subunit',$id_subunit);
           $hasil = $this->db->get();
           $result=$hasil->row();
           if(isset($result->jum_dpt))
		   {return $result->jum_dpt;}
		   else
		   {return 0;}
	   }
    function getBas($kdoutput,$kdakun)
       {
            $kode_subunit = $this->session->userdata('kode_subunit');
			$split=substr($kdakun, 0,2);
			$kegiatan='4078.'.$kdoutput;
			//echo $split;
			if($split=='53')
			{$quer="SELECT * FROM m_bas
					WHERE
					kegiatan LIKE '4078.$kdoutput.$split%'
					AND LEVEL = 8";}
			else
			{$quer="SELECT * FROM m_bas
					WHERE SUBSTRING(akun_kode,1,6) = $kdakun
					AND LEVEL = 8
					AND (kegiatan=$kegiatan OR kegiatan='') ";}		
            $result = array();
			$q=$this->db->query($quer);
			// penambahan querry where AND  aktif='Ya'				
           $array_keys_values=$q;
            foreach ($array_keys_values->result() as $row)
            {
                $result[0]= '-Pilih Bas-';
                $result[$row->akun_kode]= ("$row->akun_kode - $row->akun_nama"); 
            }
            
            return $result;
        }
		
/**
* Fungsi untuk mendapatkan data kwitansi
* @return result data array 
*/
 function get_perjadin($id_unit,$bulan,$tahun)
        {
            $result = array();
            $this->db->select('*');
            $this->db->from('t_kwitansi');
            $this->db->where('id_unit',$id_unit); 
			$this->db->where('YEAR(tgl_b)',$tahun); 
			if($bulan=='all'){
			}else{
				$this->db->where('MONTH(tgl_b)',$bulan);
			}
            $this->db->where('id_sifatpembayaran',4); 
			$this->db->where('jenis_kwitansi',5); 
			$this->db->where('id_status_kwitansi',4); 
            $result = $this->db->get();
            return $result;
}

function detail_nominatif($value)
        {
			if($value==""){
				$where = '';
			}else{
				$where = 'AND '.$value.'';
			}
            $q=$this->db->query("SELECT *,golongan FROM t_kwitansi,tb_golongan  
								 WHERE `t_kwitansi`.`gol`=tb_golongan.`id_golongan` 
								 AND id_status_kwitansi = 4 
								 AND id_sifatpembayaran = 4 
								 AND jenis_kwitansi = 5 ".$where." GROUP BY no_kwitansi ORDER BY no_kwitansi;");
            return $q;
}


//perbaikan SPP untuk LS
function getDetailUnit($id_unit)
{
	$this->db->select('*');
	$this->db->from('m_unit');
	$this->db->where('id_unit',$id_unit);    
	$result = $this->db->get();  
	return $result->row();
}

function getPok($kdoutput,$kdakun,$kdkomponen,$id_header)
{
	$kode_unit = $this->session->userdata('kode_unit');
	$kegiatan='4078.';
	$tahun=date('Y');
	$this->db->select('*');
	$this->db->from('t_rkakl');
	$this->db->where('kode_unit',$kode_unit);
	$this->db->where('kdoutput',$kdoutput);
	$this->db->where('kdakun',$kdakun);
	$this->db->where('kdkomponen',$kdkomponen);
	$this->db->where('id_header',$id_header);
	$hasil = $this->db->get();
	$result=$hasil->row();
	if(isset($result->jumlah)){
		return $result->jumlah;
	}else{
		return 0;
	}
}
        
function getMpUnit($id_spp)
{        
	$this->db->select('*');
	$this->db->from('t_mp');  
	$this->db->where('id_spp',$id_spp);
	$hasil = $this->db->get();
	return $hasil->row();   
}
        
function spp_current ($id_unit,$id_spp,$ta,$kdoutput,$kdakun)
{                  
	$q=$this->db->query("
    	SELECT kegiatan, kdoutput, kdakun, SUM(pok) as pok, SUM(spp_lalu) AS spp_lalu, SUM(spp_ini) AS spp_ini FROM 
            (SELECT kdgiat AS kegiatan, kdoutput, kdakun, SUM(jumlah) AS pok,0 AS spp_lalu, 0 AS spp_ini FROM t_rkakl a 
                INNER JOIN m_subunit b ON a.kode_unit=b.kode_subunit WHERE id_unit = '$id_unit' AND tahun=$ta 
                AND kdoutput=$kdoutput AND kdakun=$kdakun  
                GROUP BY kegiatan, kdoutput, kdakun 
                UNION 
                SELECT kegiatan, kdoutput, kdakun, 0 AS pok, SUM(nominal) AS spp_lalu, 0 AS spp_ini FROM t_kwitansi 
                WHERE id_spp < '$id_spp' AND YEAR(tgl_kwitansi) = $ta  
                GROUP BY kegiatan, kdoutput, kdakun 
                UNION 
                SELECT kegiatan, kdoutput, kdakun, 0 AS pok, 0 AS spp_lalu, SUM(nominal) AS spp_ini FROM t_kwitansi 
                WHERE id_spp = '$id_spp' AND YEAR(tgl_kwitansi) = $ta 
                GROUP BY kegiatan, kdoutput, kdakun ) AS temp GROUP BY kegiatan, kdoutput, kdakun
                ;");
	return $q->row();
}
        
function pagu_rkakl_unit ($id_unit,$ta)
{
	$q=$this->db->query("SELECT SUM(jumlah) AS pok FROM t_rkakl a 
                    INNER JOIN m_subunit b ON a.kode_unit=b.kode_subunit WHERE id_unit = '$id_unit' AND tahun=$ta;");
    return $q->row();
}
        
function spp_terbayar_lalu_unit($id_spp,$id_unit,$ta)
{                 
    $q=$this->db->query("SELECT SUM(nominal) AS spp_lalu FROM t_kwitansi 
                    WHERE id_unit = '$id_unit' AND id_spp < '$id_spp' AND YEAR(tgl_kwitansi) = $ta;");
    return $q->row();
}
        
function spp_ini_unit($id_spp,$id_unit,$ta)
{                
    $q=$this->db->query("SELECT SUM(nominal) AS spp_ini FROM t_kwitansi 
                    WHERE id_unit = '$id_unit' AND id_spp = '$id_spp' AND YEAR(tgl_kwitansi) = $ta;");
    return $q->row();
}










//=======================
//===== END CLASS =======
}
//=======================
//=======================


